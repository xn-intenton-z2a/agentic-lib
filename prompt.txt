
You are providing the entire new content of source files, test files, documentation files, and other necessary
files with all necessary changes applied to deliver the resolution to an issue. Focus on high-impact, 
functional solutions that address core issues rather than superficial changes or excessive code polishing.
Implement as much as you can and refer to the projects features and mission statement when expanding the code
beyond the scope of the original issue. Implement whole features and do not leave stubbed out or pretended code.

Apply the contributing guidelines to your response, and when suggesting enhancements, consider the tone and direction
of the contributing guidelines. Prioritize changes that deliver user value and maintain the integrity
of the codebase's primary purpose.

Do as much as you can all at once.

Follow the linting guidelines and the formatting guidelines from the included config.


You must only add, remove, or change the files in the target writable locations. You can update multiple
files by specifying their paths and contents in the enumerated updatedFile01Filepath updatedFile02Contents response
attribute, a second file would use updatedFile01Filepath updatedFile02Contents and so on to 16. Each file will
be checked against the write permission in the Agent configuration file before being written. Feel free to
add new files as long as they are in the target writable locations. You can also remove files, but only if
they are in the target writable locations. To delete a file, set the updated file contents to "delete".

The target writable locations for your output are: sandbox/SOURCES.md;sandbox/library/;sandbox/features/;sandbox/tests/;sandbox/source/;sandbox/docs/;sandbox/README.md
Other file will be supplied in the context but only the paths above should be written to.

Only provide new or updated content for the target source files in sandbox/source.
Only delete or update the target source files in sandbox/source.
Only provide new or updated content for the target test files in sandbox/tests.
Only delete or update the target test files in sandbox/tests.
Only update dependency file package.json.
Only update the target documentation files in sandbox/docs.

Follow the attached Formatting file content and Linting file content.

Consider the following when refining your response:
* Current feature names and specifications in the repository
* Source file content
* Test file content
* Documentation file content
* README file content
* MISSION file content
* Contributing file content
* Dependencies file content
* Formatting file content
* Linting file content
* Agent configuration file content
* Issue details
* Dependency list
* Build output
* Test output
* Main execution output

Current feature names and specifications (for context, read only):
CURRENT_FEATURES_START
find: ‘features/’: No such file or directory
none
CURRENT_FEATURES_END

Source files (write new files or update files in sandbox/source as necessary):
(Multiple files from both in writable locations and not.)
SOURCE_FILE_START Filepath: sandbox/source/main.js
#!/usr/bin/env node
// sandbox/source/main.js

// Initialize global callCount to support test mocks that reference it
if (typeof globalThis.callCount === "undefined") {
  globalThis.callCount = 0;
}

import { fileURLToPath } from "url";
import { readFile } from "fs/promises";
import path from "path";
import { z } from "zod";
import dotenv from "dotenv";

// ---------------------------------------------------------------------------------------------------------------------
// Environment configuration from .env file or environment variables or test values.
// ---------------------------------------------------------------------------------------------------------------------

dotenv.config();

if (process.env.VITEST || process.env.NODE_ENV === "development") {
  process.env.GITHUB_API_BASE_URL = process.env.GITHUB_API_BASE_URL || "https://api.github.com.test/";
  process.env.OPENAI_API_KEY = process.env.OPENAI_API_KEY || "key-test";
}

const configSchema = z.object({
  GITHUB_API_BASE_URL: z.string().optional(),
  OPENAI_API_KEY: z.string().optional(),
});

export const config = configSchema.parse(process.env);

// Global verbose mode flag
const VERBOSE_MODE = false;
// Global verbose stats flag
const VERBOSE_STATS = false;

// Helper function to format log entries
function formatLogEntry(level, message, additionalData = {}) {
  return {
    level,
    timestamp: new Date().toISOString(),
    message,
    ...additionalData,
  };
}

export function logConfig() {
  const logObj = formatLogEntry("info", "Configuration loaded", {
    config: {
      GITHUB_API_BASE_URL: config.GITHUB_API_BASE_URL,
      OPENAI_API_KEY: config.OPENAI_API_KEY,
    },
  });
  console.log(JSON.stringify(logObj));
}
logConfig();

export function logInfo(message) {
  const additionalData = VERBOSE_MODE ? { verbose: true } : {};
  const logObj = formatLogEntry("info", message, additionalData);
  console.log(JSON.stringify(logObj));
}

export function logError(message, error) {
  const additionalData = { error: error ? error.toString() : undefined };
  if (VERBOSE_MODE && error && error.stack) {
    additionalData.stack = error.stack;
  }
  const logObj = formatLogEntry("error", message, additionalData);
  console.error(JSON.stringify(logObj));
}

export function createSQSEventFromDigest(digest) {
  return {
    Records: [
      {
        eventVersion: "2.0",
        eventSource: "aws:sqs",
        eventTime: new Date().toISOString(),
        eventName: "SendMessage",
        body: JSON.stringify(digest),
      },
    ],
  };
}

export async function digestLambdaHandler(sqsEvent) {
  logInfo(`Digest Lambda received event: ${JSON.stringify(sqsEvent)}`);

  // If event.Records is an array, use it. Otherwise, treat the event itself as one record.
  const sqsEventRecords = Array.isArray(sqsEvent.Records) ? sqsEvent.Records : [sqsEvent];

  // Array to collect the identifiers of the failed records
  const batchItemFailures = [];

  for (const [index, sqsEventRecord] of sqsEventRecords.entries()) {
    try {
      const digest = JSON.parse(sqsEventRecord.body);
      logInfo(`Record ${index}: Received digest: ${JSON.stringify(digest)}`);
    } catch (error) {
      // If messageId is missing, generate a fallback identifier including record index
      const recordId =
        sqsEventRecord.messageId || `fallback-${index}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      logError(`Error processing record ${recordId} at index ${index}`, error);
      logError(`Invalid JSON payload. Error: ${error.message}. Raw message: ${sqsEventRecord.body}`);
      batchItemFailures.push({ itemIdentifier: recordId });
    }
  }

  // Return the list of failed messages so that AWS SQS can attempt to reprocess them.
  return {
    batchItemFailures,
    handler: "src/lib/main.digestLambdaHandler",
  };
}

// ---------------------------------------------------------------------------------------------------------------------
// CLI Helper Functions
// ---------------------------------------------------------------------------------------------------------------------

// Function to generate CLI usage instructions
function generateUsage() {
  return `
Usage:
  --help                     Show this help message and usage instructions.
  --mission                  Show the project mission statement.
  --digest                   Run a full bucket replay simulating an SQS event.
  --version                  Show version information with current timestamp.
`;
}

// Process the --help flag
function processHelp(args) {
  if (args.includes("--help")) {
    console.log(generateUsage());
    return true;
  }
  return false;
}

// Process the --mission flag
async function processMission(args) {
  if (args.includes("--mission")) {
    try {
      const missionPath = path.resolve(process.cwd(), "MISSION.md");
      const content = await readFile(missionPath, "utf8");
      console.log(content);
    } catch (error) {
      logError("Failed to read mission file", error);
    }
    return true;
  }
  return false;
}

// Process the --version flag
async function processVersion(args) {
  if (args.includes("--version")) {
    try {
      const { readFileSync } = await import("fs");
      const packageJsonPath = new URL("../../package.json", import.meta.url);
      const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf8"));
      const versionInfo = {
        version: packageJson.version,
        timestamp: new Date().toISOString(),
      };
      console.log(JSON.stringify(versionInfo));
    } catch (error) {
      logError("Failed to retrieve version", error);
    }
    return true;
  }
  return false;
}

// Process the --digest flag
async function processDigest(args) {
  if (args.includes("--digest")) {
    const exampleDigest = {
      key: "events/1.json",
      value: "12345",
      lastModified: new Date().toISOString(),
    };
    const sqsEvent = createSQSEventFromDigest(exampleDigest);
    await digestLambdaHandler(sqsEvent);
    return true;
  }
  return false;
}

// ---------------------------------------------------------------------------------------------------------------------
// Main CLI
// ---------------------------------------------------------------------------------------------------------------------

export async function main(args = process.argv.slice(2)) {
  if (await processMission(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }
  if (processHelp(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }
  if (await processVersion(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }
  if (await processDigest(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }

  console.log("No command argument supplied.");
  console.log(generateUsage());
  if (VERBOSE_STATS) {
    console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch((err) => {
    logError("Fatal error in main execution", err);
    process.exit(1);
  });
}

SOURCE_FILE_END


SOURCE_FILE_START Filepath: src/lib/main.js
#!/usr/bin/env node
// src/lib/main.js

// Initialize global callCount to support test mocks that reference it
if (typeof globalThis.callCount === "undefined") {
  globalThis.callCount = 0;
}

import { fileURLToPath } from "url";
import { z } from "zod";
import dotenv from "dotenv";

// ---------------------------------------------------------------------------------------------------------------------
// Environment configuration from .env file or environment variables or test values.
// ---------------------------------------------------------------------------------------------------------------------

dotenv.config();

if (process.env.VITEST || process.env.NODE_ENV === "development") {
  process.env.GITHUB_API_BASE_URL = process.env.GITHUB_API_BASE_URL || "https://api.github.com.test/";
  process.env.OPENAI_API_KEY = process.env.OPENAI_API_KEY || "key-test";
}

const configSchema = z.object({
  GITHUB_API_BASE_URL: z.string().optional(),
  OPENAI_API_KEY: z.string().optional(),
});

export const config = configSchema.parse(process.env);

// Global verbose mode flag
const VERBOSE_MODE = false;
// Global verbose stats flag
const VERBOSE_STATS = false;

// Helper function to format log entries
function formatLogEntry(level, message, additionalData = {}) {
  return {
    level,
    timestamp: new Date().toISOString(),
    message,
    ...additionalData,
  };
}

export function logConfig() {
  const logObj = formatLogEntry("info", "Configuration loaded", {
    config: {
      GITHUB_API_BASE_URL: config.GITHUB_API_BASE_URL,
      OPENAI_API_KEY: config.OPENAI_API_KEY,
    },
  });
  console.log(JSON.stringify(logObj));
}
logConfig();

// ---------------------------------------------------------------------------------------------------------------------
// Utility functions
// ---------------------------------------------------------------------------------------------------------------------

export function logInfo(message) {
  const additionalData = VERBOSE_MODE ? { verbose: true } : {};
  const logObj = formatLogEntry("info", message, additionalData);
  console.log(JSON.stringify(logObj));
}

export function logError(message, error) {
  const additionalData = { error: error ? error.toString() : undefined };
  if (VERBOSE_MODE && error && error.stack) {
    additionalData.stack = error.stack;
  }
  const logObj = formatLogEntry("error", message, additionalData);
  console.error(JSON.stringify(logObj));
}

// ---------------------------------------------------------------------------------------------------------------------
// AWS Utility functions
// ---------------------------------------------------------------------------------------------------------------------

export function createSQSEventFromDigest(digest) {
  return {
    Records: [
      {
        eventVersion: "2.0",
        eventSource: "aws:sqs",
        eventTime: new Date().toISOString(),
        eventName: "SendMessage",
        body: JSON.stringify(digest),
      },
    ],
  };
}

// ---------------------------------------------------------------------------------------------------------------------
// SQS Lambda Handlers
// ---------------------------------------------------------------------------------------------------------------------

export async function digestLambdaHandler(sqsEvent) {
  logInfo(`Digest Lambda received event: ${JSON.stringify(sqsEvent)}`);

  // If event.Records is an array, use it. Otherwise, treat the event itself as one record.
  const sqsEventRecords = Array.isArray(sqsEvent.Records) ? sqsEvent.Records : [sqsEvent];

  // Array to collect the identifiers of the failed records
  const batchItemFailures = [];

  for (const [index, sqsEventRecord] of sqsEventRecords.entries()) {
    try {
      const digest = JSON.parse(sqsEventRecord.body);
      logInfo(`Record ${index}: Received digest: ${JSON.stringify(digest)}`);
    } catch (error) {
      // If messageId is missing, generate a fallback identifier including record index
      const recordId =
        sqsEventRecord.messageId || `fallback-${index}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      logError(`Error processing record ${recordId} at index ${index}`, error);
      logError(`Invalid JSON payload. Error: ${error.message}. Raw message: ${sqsEventRecord.body}`);
      batchItemFailures.push({ itemIdentifier: recordId });
    }
  }

  // Return the list of failed messages so that AWS SQS can attempt to reprocess them.
  return {
    batchItemFailures,
    handler: "src/lib/main.digestLambdaHandler",
  };
}

// ---------------------------------------------------------------------------------------------------------------------
// CLI Helper Functions
// ---------------------------------------------------------------------------------------------------------------------

// Function to generate CLI usage instructions
function generateUsage() {
  return `
Usage:
  --help                     Show this help message and usage instructions.
  --digest                   Run a full bucket replay simulating an SQS event.
  --version                  Show version information with current timestamp.
`;
}

// Process the --help flag
function processHelp(args) {
  if (args.includes("--help")) {
    console.log(generateUsage());
    return true;
  }
  return false;
}

// Process the --version flag
async function processVersion(args) {
  if (args.includes("--version")) {
    try {
      const { readFileSync } = await import("fs");
      const packageJsonPath = new URL("../../package.json", import.meta.url);
      const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf8"));
      const versionInfo = {
        version: packageJson.version,
        timestamp: new Date().toISOString(),
      };
      console.log(JSON.stringify(versionInfo));
    } catch (error) {
      logError("Failed to retrieve version", error);
    }
    return true;
  }
  return false;
}

// Process the --digest flag
async function processDigest(args) {
  if (args.includes("--digest")) {
    const exampleDigest = {
      key: "events/1.json",
      value: "12345",
      lastModified: new Date().toISOString(),
    };
    const sqsEvent = createSQSEventFromDigest(exampleDigest);
    await digestLambdaHandler(sqsEvent);
    return true;
  }
  return false;
}

// ---------------------------------------------------------------------------------------------------------------------
// Main CLI
// ---------------------------------------------------------------------------------------------------------------------

export async function main(args = process.argv.slice(2)) {
  if (processHelp(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }
  if (await processVersion(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }
  if (await processDigest(args)) {
    if (VERBOSE_STATS) {
      console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
    }
    return;
  }

  console.log("No command argument supplied.");
  console.log(generateUsage());
  if (VERBOSE_STATS) {
    console.log(JSON.stringify({ callCount: globalThis.callCount, uptime: process.uptime() }));
  }
}

// if (import.meta.url.endsWith(process.argv[1])) {
if (process.argv[1] === fileURLToPath(import.meta.url)) {
  main().catch((err) => {
    logError("Fatal error in main execution", err);
    process.exit(1);
  });
}

SOURCE_FILE_END



Test files (write new files or update files in sandbox/tests as necessary):
(Multiple files from both in writable locations and not.)
TEST_FILE_START File: sandbox/tests/main.mission.test.js
import { describe, test, expect, vi, beforeEach } from "vitest";

// Mock fs/promises for readFile
vi.mock("fs/promises", () => ({
  readFile: vi.fn(),
}));

import path from "path";
import { main } from "../source/main.js";
import { readFile } from "fs/promises";

describe("--mission flag", () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  test("should read and print mission statement and exit early", async () => {
    const sampleMarkdown = "# Sample Mission";
    readFile.mockResolvedValue(sampleMarkdown);
    const consoleSpy = vi.spyOn(console, "log").mockImplementation(() => {});

    await main(["--mission"]);

    expect(readFile).toHaveBeenCalledWith(path.resolve(process.cwd(), "MISSION.md"), "utf8");
    expect(consoleSpy).toHaveBeenCalledWith(sampleMarkdown);

    consoleSpy.mockRestore();
  });
});

TEST_FILE_END


TEST_FILE_START File: tests/unit/main.test.js
import { describe, test, expect, vi, beforeAll, beforeEach, afterEach } from "vitest";

// Ensure that the global callCount is reset before tests that rely on it
beforeAll(() => {
  globalThis.callCount = 0;
});

// Reset callCount before each test in agenticHandler tests
beforeEach(() => {
  globalThis.callCount = 0;
});

// Clear all mocks after each test to tidy up
afterEach(() => {
  vi.clearAllMocks();
});

// Use dynamic import for the module to ensure mocks are applied correctly
let agenticLib;

// Default mock for openai used by tests that don't override it
vi.mock("openai", () => {
  return {
    Configuration: (config) => config,
    OpenAIApi: class {
      async createChatCompletion() {
        const dummyResponse = { fixed: "true", message: "dummy success", refinement: "none" };
        return {
          data: {
            choices: [{ message: { content: JSON.stringify(dummyResponse) } }]
          }
        };
      }
    }
  };
});

// Re-import the module after setting up the default mock
beforeAll(async () => {
  agenticLib = await import("../../src/lib/main.js");
});

describe("Main Module Import", () => {
  test("should be non-null", async () => {
    const mainModule = await import("../../src/lib/main.js");
    expect(mainModule).not.toBeNull();
  });
});

TEST_FILE_END


TEST_FILE_START File: tests/unit/module-index.test.js
// tests/unit/module-index.test.js
// src/lib/main.js
//
// This file is part of the Example Suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
// This file is licensed under the MIT License. For details, see LICENSE-MIT
//

import { describe, test, expect } from "vitest";
import anything from "@src/index.js";

describe("Index Module Exports", () => {
  test("module index should be defined", () => {
    expect(anything).toBeUndefined();
  });
});

TEST_FILE_END



Documentation files (write new files or update files in sandbox/docs as necessary):
(Multiple files from both in writable locations and not.)
DOCUMENTATION_FILE_START File: sandbox/docs

DOCUMENTATION_FILE_END



README file (for context, read only): sandbox/README.md
README_FILE_START
# Usage

```bash
node sandbox/source/main.js [options]
```

Options:

- `--help`                     Show this help message and usage instructions.
- `--mission`                  Show the project mission statement.
- `--digest`                   Run a full bucket replay simulating an SQS event.
- `--version`                  Show version information with current timestamp.

README_FILE_END

MISSION file (for context, read only): MISSION.md
MISSION_FILE_START
# Mission Statement

**agentic‑lib** Is a JavaScript library which can be used as a drop in JS implementation or wholesale replacement for 
the steps, jobs, and re-usable workflows below in this repository. It is designed to be used in a GitHub Actions 
workflow to enable your repository to operate in an “agentic” manner. In our system, autonomous workflows communicate
through branches and issues to continuously review, fix, update, and evolve your code. Each workflow is designed to be
invoked using GitHub’s `workflow_call` event, so they can be composed together like an SDK.

MISSION_FILE_END

Contributing file (for context, read only): CONTRIBUTING.md
CONTRIBUTING_FILE_START
# agentic‑lib

This document outlines our guidelines for human and automated contributions, ensuring that our core library remains 
robust, testable, and efficient in powering our reusable GitHub Workflows.

## How to Contribute

The guidelines below apply to human or automated contributions:

1. **Report Issues or Ideas:**
    - Open an issue on GitHub to share bug reports, feature requests, or any improvements you envision.
    - Clear descriptions and reproducible steps are highly appreciated.

2. **Submit Pull Requests:**
    - Implement your changes and push them to a new branch, ensuring you follow the 
      existing coding style and standards.
    - Add tests to cover any new functionality.
    - Update documentation if your changes affect usage or workflow behavior.
    - Submit your pull request for review.

## Guidelines

- **Features:**
    - Clear Objective & Scope: Define the feature with a concise description outlining its purpose, scope, and the specific problem it solves for the end user.
    - Value Proposition: Articulate the tangible benefits of the feature, including improved functionality, performance, or user experience.
    - Success Criteria & Requirements: List measurable success criteria and requirements, including performance benchmarks, usability standards, and stability expectations, to guide development and testing.
    - Testability & Stability: Ensure the feature can be verified through both automated tests and user acceptance criteria. Specify any necessary rollback or fail-safe mechanisms to maintain system stability.
    - Dependencies & Constraints: Identify any dependencies (external libraries, APIs, etc.), assumptions, and limitations that could impact feature delivery or future enhancements.
    - User Scenarios & Examples: Provide illustrative use cases or scenarios that demonstrate how the feature will be used in real-world situations, making it easier for both developers and stakeholders to understand its impact.
    - Verification & Acceptance: Define clear verification steps and acceptance criteria to ensure the feature meets its intended requirements. This should include detailed plans for unit tests, integration tests, manual user acceptance tests, and code reviews. Specify measurable outcomes that must be achieved for the feature to be considered successfully delivered and stable.

- **Code Quality:**
    - Ensure there are tests that cover your changes and any likely new cases they introduce.
    - When making a change remain consistent with the existing code style and structure.
    - When adding new functionality, consider if some unused or superseded code should be removed.

- **Compatibility:**
    - Ensure your code runs on Node 20 and adheres to ECMAScript Module (ESM) standards.
    - Tests use vitest and competing test frameworks should not be added.
    - Mocks in tests must not interfere with other tests.

- **Testing:**
    - The command `npm test` should invoke the tests added for the new functionality (and pass).
    - If you add new functionality, ensure it is covered by tests.

- **Documentation:**
    - When making a change to the main source file, review the readme to see if it needs to be updated and if so, update it.
    - Where the source exports a function, consider that part of the API of the library and document it in the readme.
    - Where the source stands-up an HTTP endpoint, consider that part of the API of the library and document it in the readme.
    - Include usage examples including inline code usage and CLI and HTTP invocation, API references.

- **README:**
    - The README should begin with something inspired by the mission statement and describe the current state of the repository (rather than the journey)
    - The README should include a link to MISSION.md, CONTRIBUTING.md, LICENSE.md.
    - The README should include a link to the intentïon `agentic-lib` GitHub Repository which is https://github.com/xn-intenton-z2a/agentic-lib.

## Sandbox mode

Please note that the automation features of this repository are in sandbox mode. This means that
automated changes should only be applied to the sandbox paths which are shown below:
```yaml
paths:
  targetTestsPath:
    path: 'sandbox/tests/'
    permissions: [ 'write' ]
  targetSourcePath:
    path: 'sandbox/source/'
    permissions: [ 'write' ]
  documentationPath:
    path: 'sandbox/docs/'
    permissions: [ 'write' ]
  readmeFilepath:
    path: 'sandbox/README.md'
    permissions: [ 'write' ]
```

CONTRIBUTING_FILE_END

Dependencies file (for context, read only): package.json
DEPENDENCIES_FILE_START
{
  "name": "@xn-intenton-z2a/agentic-lib",
  "version": "6.7.1-0",
  "description": "Agentic-lib Agentic Coding Systems SDK powering automated GitHub workflows.",
  "type": "module",
  "main": "src/lib/main.js",
  "scripts": {
    "build": "echo \"Nothing to build\"",
    "formatting": "prettier --check",
    "formatting-fix": "prettier --write",
    "linting": "eslint",
    "linting-json": "eslint --format=@microsoft/eslint-formatter-sarif",
    "linting-fix": "eslint --fix",
    "update-to-minor": "npx npm-check-updates --upgrade --enginesNode --target minor --verbose --install always",
    "update-to-greatest": "npx npm-check-updates --upgrade --enginesNode --target greatest --verbose --install always --reject \"alpha\"",
    "test": "vitest tests/unit/*.test.js sandbox/tests/*.test.js",
    "test:unit": "vitest --coverage tests/unit/*.test.js sandbox/tests/*.test.js",
    "start": "node src/lib/main.js"
  },
  "keywords": [],
  "author": "https://github.com/xn-intenton-z2a",
  "license": "GPL-3.0, MIT",
  "dependencies": {
    "@aws-sdk/client-lambda": "^3.804.0",
    "@xn-intenton-z2a/s3-sqs-bridge": "^0.24.0",
    "chalk": "^5.4.1",
    "change-case": "^5.4.4",
    "dayjs": "^1.11.13",
    "dotenv": "^16.5.0",
    "ejs": "^3.1.10",
    "figlet": "^1.8.1",
    "js-yaml": "^4.1.0",
    "lodash": "^4.17.21",
    "minimatch": "^10.0.1",
    "openai": "^4.97.0",
    "seedrandom": "^3.0.5",
    "zod": "^3.24.4"
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@vitest/coverage-v8": "^3.1.3",
    "aws-cdk": "^2.1013.0",
    "eslint": "^9.25.0",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^8.10.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.4.0",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "figlet": "^1.8.1",
    "markdown-it": "^14.1.0",
    "markdown-it-github": "^0.5.0",
    "npm-check-updates": "^18.0.1",
    "prettier": "^3.5.3",
    "vitest": "^3.1.3"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "files": [
    "package.json"
  ],
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  }
}

DEPENDENCIES_FILE_END

Formatting file (for context, read only): .prettierrc
FORMATTING_FILE_START
{
  "singleQuote": false,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "quoteProps": "consistent",
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}

FORMATTING_FILE_END

Linting file (for context, read only): eslint.config.js
LINTING_FILE_START
import js from "@eslint/js";
import google from "eslint-config-google";
import eslintPluginPrettierRecommended from "eslint-plugin-prettier/recommended";
import globals from "globals";
import promise from "eslint-plugin-promise";
import security from "eslint-plugin-security";
import sonarjs from "eslint-plugin-sonarjs";
import react from "eslint-plugin-react";
import importPlugin from "eslint-plugin-import";

const modifiedGoogleConfig = { ...google, rules: { ...google.rules } };
delete modifiedGoogleConfig.rules["valid-jsdoc"];
delete modifiedGoogleConfig.rules["require-jsdoc"];

/** @type {import('eslint').Linter.FlatConfig[]} */
export default [
  js.configs.recommended,
  modifiedGoogleConfig,
  eslintPluginPrettierRecommended,
  {
    plugins: {
      promise,
      security,
      sonarjs,
      react,
      import: importPlugin,
    },
    languageOptions: {
      ecmaVersion: 2023,
      sourceType: "module",
      globals: {
        ...globals.node,
      },
    },
    rules: {
      "prettier/prettier": "error",
      ...promise.configs.recommended.rules,
      "promise/avoid-new": "warn",
      "promise/no-new-statics": "error",
      "promise/valid-params": "error",
      "promise/prefer-await-to-then": "warn",

      ...sonarjs.configs.recommended.rules,
      "sonarjs/no-nested-conditional": "warn",
      "sonarjs/pseudo-random": "warn",
      "sonarjs/sonar-no-fallthrough": "off",
      "sonarjs/os-command": "off",
      "sonarjs/todo-tag": "off",
      "sonarjs/no-commented-code": "off",

      // Enabled non-recommended rules (SonarJS)
      "sonarjs/no-inverted-boolean-check": "warn",
      "sonarjs/no-useless-catch": "warn",

      // Local customizations
      "no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
      "no-extra-semi": 2,
      "object-curly-newline": ["error", { consistent: true }],
      "array-element-newline": ["error", "consistent", { multiline: true, minItems: 10 }],
      "import/newline-after-import": ["error", { count: 1 }],
      "camelcase": "off",
      "import/no-amd": "error",
      "import/no-commonjs": "error",
      "import/no-import-module-exports": "error",
      "import/no-cycle": "error",
      "import/no-dynamic-require": "error",
      "import/no-self-import": "off",
      "import/no-unresolved": "off",
      "import/no-useless-path-segments": "error",
      "import/no-duplicates": "error",
      "sonarjs/fixme-tag": "warn",
    },
  },
  {
    files: ["**/*.js"],
    ignores: ["**/tests/**/*.js", "**/*.test.js", "eslint.config.js"],
    rules: {
      ...security.configs.recommended.rules,
      "security/detect-non-literal-regexp": "off",
    },
  },
  {
    settings: {
      react: {
        version: "18", // With no react installed we can't use "detect"
      },
    },
  },
  {
    ignores: ["build/", "coverage/", "dist/", "exports/", "node_modules/", "eslint.config.js"],
  },
];

LINTING_FILE_END

Agent configuration file (for context, read only):
AGENT_CONFIG_FILE_START
# Which agentic-lib workflow schedule should be used?
schedule: schedule-3

# Mapping for from symbolic keys to filepaths for access by agentic-lib workflows with limits and access permissions
paths:
  # Filepaths for elaborator workflows
  missionFilepath:
    path: 'MISSION.md'
  librarySourcesFilepath:
    path: 'sandbox/SOURCES.md'
    permissions: [ 'write' ]
    limit: 8
  libraryDocumentsPath:
    path: 'sandbox/library/'
    permissions: [ 'write' ]
    limit: 32
  featuresPath:
    path: 'sandbox/features/'
    permissions: [ 'write' ]
    limit: 1

  # Filepaths for engineer workflows
  contributingFilepath:
    path: 'CONTRIBUTING.md'
  targetTestsPath:
    path: 'sandbox/tests/'
    permissions: [ 'write' ]
  otherTestsPaths:
    paths: [ 'tests/unit/' ]
  targetSourcePath:
    path: 'sandbox/source/'
    permissions: [ 'write' ]
  otherSourcePaths:
    paths: [ 'src/lib/' ]
  dependenciesFilepath:
    path: 'package.json'
  documentationPath:
    path: 'sandbox/docs/'
    permissions: [ 'write' ]

  # Filepaths for maintainer workflows
  formattingFilepath:
    path: '.prettierrc'
  lintingFilepath:
    path: 'eslint.config.js'
  readmeFilepath:
    path: 'sandbox/README.md'
    permissions: [ 'write' ]

# Execution commands
buildScript: 'npm run build'
testScript: 'npm test'
mainScript: 'npm run start'

# How many issues should be available to be picked up?
featureDevelopmentIssuesWipLimit: 2
maintenanceIssuesWipLimit: 1

# How many attempts should be made to work on an issue?
attemptsPerBranch: 2
attemptsPerIssue: 2

# Web publishing
docRoot: 'public'

# Sandbox configuration
sandbox:
  sandboxReset: 'true'
  sandboxPath: 'sandbox'

# Repository seeding
#seeding:
#  repositoryReseed: 'true'
#  missionFilepath: 'seeds/zero-MISSION.md'
#  sourcePath: 'seeds/zero-main.js'
#  testsPath: 'seeds/zero-main.test.js'
#  dependenciesFilepath: 'seeds/zero-package.json'
#  readmeFilepath: 'seeds/zero-README.md'

intentionBot:
  intentionFilepath: 'intentïon.md'

AGENT_CONFIG_FILE_END

Issue details:
ISSUE_START
title: Add mission statement support to core CLI and documentation
description:
Title: Add --mission Flag to Core CLI and Update Root README

Problem:
The core CLI (`src/lib/main.js`) does not support a `--mission` flag to print the project mission statement, causing inconsistency with the sandbox CLI and making it harder for users to discover the mission via the command line. The root `README.md` also lacks documentation for this capability.

Proposed Solution:
1. Core CLI Enhancement:
   - Implement `processMission(args)` in `src/lib/main.js`:
     • Detect the `--mission` flag in incoming CLI arguments.
     • Resolve the path to `MISSION.md` using `path.resolve(process.cwd(), 'MISSION.md')`.
     • Read and output the file contents with `fs/promises.readFile(..., 'utf8')` and `console.log()`.
     • Return `true` on successful processing to exit early.
   - In the `main(args)` function, insert an early check:
     ```js
     if (await processMission(args)) return;
     ```
   - Update `generateUsage()` to include:
     ```text
     --mission                  Show the project mission statement.
     ```

2. Unit Tests:
   - Create `tests/unit/main.mission.lib.test.js` that:
     • Mocks `fs/promises.readFile` to return sample mission markdown.
     • Spies on `console.log` to capture output.
     • Invokes `main(['--mission'])` and asserts:
       1. Only the mission file contents are printed (exact match).
       2. The function returns early without printing usage or invoking other flags.

3. Documentation Updates:
   - Update the root `README.md`:
     • Under **Options**, add:
       ```text
       --mission                  Show the project mission statement.
       ```
     • Provide a usage example:
       ```bash
       node src/lib/main.js --mission
       ```
     • Add a link to the mission file:
       ```md
       [Mission Statement](./MISSION.md)
       ```

Testable Acceptance Criteria:
- `node src/lib/main.js --mission` prints exactly the contents of `MISSION.md` and exits immediately (no usage text or extra logs).
- `generateUsage()` in `src/lib/main.js` lists the `--mission` option.
- New unit test in `tests/unit/main.mission.lib.test.js` passes, mocking the file read, capturing the log, and verifying early exit behavior.
- Root `README.md` includes the `--mission` flag in its Options list, a usage example, and a link to `MISSION.md`.
- Existing behaviors for `--help`, `--version`, and `--digest` remain unchanged and all existing tests continue to pass.
comments:
Author:github-actions[bot], Created:2025-05-18T22:20:57Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100602336
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7817d07574298bc98b2a0c5b9d2bae30cb86954d
Author:github-actions[bot], Created:2025-05-18T22:21:25Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100602336
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7817d07574298bc98b2a0c5b9d2bae30cb86954d
Author:github-actions[bot], Created:2025-05-18T22:22:06Z, Comment: Workflow name: transformation-05-issue-to-ready-issue
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100625265
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7817d07574298bc98b2a0c5b9d2bae30cb86954d
Author:github-actions[bot], Created:2025-05-18T22:22:21Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100602336
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7817d07574298bc98b2a0c5b9d2bae30cb86954d
Author:github-actions[bot], Created:2025-05-18T22:22:58Z, Comment: This issue has been reviewed and marked as 'ready'. The description has been updated with testable acceptance criteria, and relevant library documents ([], 0 in total) have been added as comments.
Author:github-actions[bot], Created:2025-05-18T22:24:08Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100641762
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/22bd187f6636180b5f413f437858a6a0d13580c4
Author:github-actions[bot], Created:2025-05-18T22:25:42Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100653980
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/9ac9ba11b68069c06976f4096c3e2bcced841d06
Author:github-actions[bot], Created:2025-05-18T22:33:07Z, Comment: Workflow name: flow-feature-maintenance
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100694351
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:33:58Z, Comment: This issue has been reviewed and marked as 'ready'. The description has been updated with testable acceptance criteria, and relevant library documents ([], 0 in total) have been added as comments.
Author:github-actions[bot], Created:2025-05-18T22:35:04Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100725698
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:38:46Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100754391
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:39:18Z, Comment: Workflow name: flow-maintenance-activity-to-issue
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100749277
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:39:58Z, Comment: This issue has been reviewed and marked as 'ready'. The description has been updated with testable acceptance criteria, and relevant library documents ([], 0 in total) have been added as comments.
Author:github-actions[bot], Created:2025-05-18T22:40:19Z, Comment: Workflow name: flow-maintenance-activity-to-issue
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100749277
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:41:24Z, Comment: Workflow name: flow-maintenance-activity-to-issue
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100749277
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:43:56Z, Comment: Workflow name: transformation-06-issue-to-code
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100789075
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:46:23Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100805348
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:46:40Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100805348
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:47:37Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100805348
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:49:26Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100834451
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:50:37Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100841498
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:56:50Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100880760
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/44e01fc81b031e6c4039bf48792414fcb144ea57
Author:github-actions[bot], Created:2025-05-18T22:58:52Z, Comment: Workflow name: flow-feature-maintenance
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15100881329
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
Author:github-actions[bot], Created:2025-05-18T22:59:31Z, Comment: This issue has been reviewed and marked as 'ready'. The description has been updated with testable acceptance criteria, and relevant library documents ([], 0 in total) have been added as comments.
Author:github-actions[bot], Created:2025-05-18T23:20:26Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15101051803
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
Author:github-actions[bot], Created:2025-05-18T23:20:42Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15101051803
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
Author:github-actions[bot], Created:2025-05-18T23:20:43Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15101062461
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
Author:github-actions[bot], Created:2025-05-18T23:21:44Z, Comment: Workflow name: flow-feature-development
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15101051803
Workflow event: schedule
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
Author:github-actions[bot], Created:2025-05-18T23:23:33Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15101086209
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
Author:github-actions[bot], Created:2025-05-18T23:25:11Z, Comment: Workflow name: flow-publish-stats
Workflow run URL: https://github.com/xn-intenton-z2a/agentic-lib/actions/runs/15101098180
Workflow event: workflow_run
Workflow inputs: null
HEAD of main URL: https://github.com/xn-intenton-z2a/agentic-lib/commit/7a5ecc08686b2e8f8b4effa5e9ae598c079c0fb1
ISSUE_END            

Dependencies list from command: npm list
DEPENDENCIES_LIST_START
@xn-intenton-z2a/agentic-lib@6.7.1-0 /home/runner/work/agentic-lib/agentic-lib
├── @aws-sdk/client-lambda@3.812.0
├── @microsoft/eslint-formatter-sarif@3.1.0
├── @vitest/coverage-v8@3.1.3
├── @xn-intenton-z2a/s3-sqs-bridge@0.24.0
├── aws-cdk@2.1016.0
├── chalk@5.4.1
├── change-case@5.4.4
├── dayjs@1.11.13
├── dotenv@16.5.0
├── ejs@3.1.10
├── eslint-config-google@0.14.0
├── eslint-config-prettier@8.10.0
├── eslint-plugin-import@2.31.0
├── eslint-plugin-prettier@5.4.0
├── eslint-plugin-promise@7.2.1
├── eslint-plugin-react@7.37.5
├── eslint-plugin-security@3.0.1
├── eslint-plugin-sonarjs@3.0.2
├── eslint@9.27.0
├── figlet@1.8.1
├── js-yaml@4.1.0
├── lodash@4.17.21
├── markdown-it-github@0.5.0
├── markdown-it@14.1.0
├── minimatch@10.0.1
├── npm-check-updates@18.0.1
├── openai@4.100.0
├── prettier@3.5.3
├── seedrandom@3.0.5
├── vitest@3.1.3
└── zod@3.24.4
DEPENDENCIES_LIST_END    

Build output from command: npm run build
BUILD_OUTPUT_START

> @xn-intenton-z2a/agentic-lib@6.7.1-0 build
> echo "Nothing to build"

Nothing to build
BUILD_OUTPUT_END      

Test output from command: npm test
TEST_OUTPUT_START

> @xn-intenton-z2a/agentic-lib@6.7.1-0 test
> vitest tests/unit/*.test.js sandbox/tests/*.test.js


[1m[46m RUN [49m[22m [36mv3.1.3 [39m[90m/home/runner/work/agentic-lib/agentic-lib[39m

 [32m✓[39m tests/unit/module-index.test.js [2m([22m[2m1 test[22m[2m)[22m[32m 3[2mms[22m[39m
[90mstdout[2m | sandbox/tests/main.mission.test.js
[22m[39m{"level":"info","timestamp":"2025-05-19T03:11:38.960Z","message":"Configuration loaded","config":{"GITHUB_API_BASE_URL":"https://api.github.com.test/","OPENAI_API_KEY":"key-test"}}

[90mstdout[2m | tests/unit/main.test.js
[22m[39m{"level":"info","timestamp":"2025-05-19T03:11:38.966Z","message":"Configuration loaded","config":{"GITHUB_API_BASE_URL":"https://api.github.com.test/","OPENAI_API_KEY":"key-test"}}

 [32m✓[39m sandbox/tests/main.mission.test.js [2m([22m[2m1 test[22m[2m)[22m[32m 5[2mms[22m[39m
 [32m✓[39m tests/unit/main.test.js [2m([22m[2m1 test[22m[2m)[22m[32m 93[2mms[22m[39m

[2m Test Files [22m [1m[32m3 passed[39m[22m[90m (3)[39m
[2m      Tests [22m [1m[32m3 passed[39m[22m[90m (3)[39m
[2m   Start at [22m 03:11:38
[2m   Duration [22m 400ms[2m (transform 165ms, setup 0ms, collect 222ms, tests 102ms, environment 1ms, prepare 312ms)[22m
TEST_OUTPUT_END            

Main execution output from command: npm run start
MAIN_OUTPUT_START

> @xn-intenton-z2a/agentic-lib@6.7.1-0 start
> node src/lib/main.js

{"level":"info","timestamp":"2025-05-19T03:11:39.194Z","message":"Configuration loaded","config":{}}
No command argument supplied.

Usage:
  --help                     Show this help message and usage instructions.
  --digest                   Run a full bucket replay simulating an SQS event.
  --version                  Show version information with current timestamp.
MAIN_OUTPUT_END    

Please produce updated versions of the files that resolve the issue.
Note that the README.md file is provided for context only - any documentation changes should be written to the documentation files.
The source files, test files, and documentation files can be individual files or directories containing multiple files.
Never truncate the files, when returning a file, always return the entire file content.

Paths in (updatedFile01Filepath, updatedFile02Filepath, etc...) must begin with one of: sandbox/SOURCES.md;sandbox/library/;sandbox/features/;sandbox/tests/;sandbox/source/;sandbox/docs/;sandbox/README.md

Answer strictly with a JSON object following this schema:
{
  "message": "A short sentence explaining the change applied (or why no changes were applied) suitable for a commit message or PR text.",
  "updatedFile01Filepath": "sandbox/source/orderParser.js",
  "updatedFile01Contents": "The entire new content of the source file, with all necessary changes applied, if any.",
  "updatedFile02Filepath":  "sandbox/tests/orderParser.test.js",
  "updatedFile02Contents": "The entire new content of the test file, with all necessary changes applied, if any.",
  "updatedFile03Filepath": "sandbox/docs/USAGE.md",
  "updatedFile03Contents": "The entire new content of the documentation file, with all necessary changes applied, if any.",
  "updatedFile04Filepath": "sandbox/docs/A_FILE_WE_DONT_WANT.md",
  "updatedFile04Contents": "delete",
  "updatedFile05Filepath": "unused",
  "updatedFile05Contents": "unused",
  "updatedFile06Filepath": "unused",
  "updatedFile06Contents": "unused",
  "updatedFile07Filepath": "unused",
  "updatedFile07Contents": "unused",
  "updatedFile08Filepath": "unused",
  "updatedFile08Contents": "unused",
  "updatedFile09Filepath": "unused",
  "updatedFile09Contents": "unused",
  "updatedFile10Filepath": "unused",
  "updatedFile10Contents": "unused",
  "updatedFile11Filepath": "unused",
  "updatedFile11Contents": "unused",
  "updatedFile12Filepath": "unused",
  "updatedFile12Contents": "unused",
  "updatedFile13Filepath": "unused",
  "updatedFile13Contents": "unused",
  "updatedFile14Filepath": "unused",
  "updatedFile14Contents": "unused",
  "updatedFile15Filepath": "unused",
  "updatedFile15Contents": "unused",
  "updatedFile16Filepath": "unused",
  "updatedFile16Contents": "unused"
}

You can include up to 16 files using the updatedFileXXName and updatedFileXXContents pairs (where XX is a number from 01 to 16)
Where a file name and contents slot is not used, populate tha name with "unused" and the contents with "unused".
Where a file is to be deleted, set the name to the file path and the contents to "delete".
Never truncate the files, when returning a file, always return the entire file content.

Ensure valid JSON.
