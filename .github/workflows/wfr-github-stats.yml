# .github/workflows/wfr-github-stats.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ stats

on:
  workflow_call:
    inputs:
      public:
        description: 'The public directory to use. e.g. "public"'
        type: string
        required: false
        default: 'public'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      npmAuthOrganisation:
        description: 'The npm auth organisation to use. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
      lastActivityName:
        description: 'The name of the last activity. e.g. "stats"'
        type: string
        required: false
      lastActivityBranchName:
        description: 'The name of the last activity branch. e.g. "main"'
        type: string
        required: false
      lastActivityTimestamp:
        description: 'The timestamp of the last activity. e.g. "2023-01-01T00:00:00Z"'
        type: string
        required: false
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      s3WebsiteBucketUrl:
        description: 'The S3 website bucket URL with prefix to use. e.g. "s3://my-website-bucket/"'
        type: string
        required: false
        default: ''
      iamActionsRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      iamStatsBucketWriterRoleArn:
        description: 'The ARN of the IAM role to assume when writing to the stats bucket. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      iamPublicWebsiteStatsBucketWriterRoleArn:
        description: 'The ARN of the IAM role to assume when writing to the public website stats bucket. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      thisRepositoryStatsUrl:
        description: 'The URL of the latest stats page. e.g. "https://xn-intenton-z2a.github.io/agentic-lib/latest.html"'
        value: ${{ jobs.stats.outputs.thisRepositoryStatsUrl }}

jobs:
  stats:
    runs-on: ubuntu-latest

    env:
      public: ${{ inputs.public || 'public' }}
      cache: ${{ inputs.cache || 'npm' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      s3WebsiteBucketUrl: ${{ inputs.s3WebsiteBucketUrl || '' }}
      iamActionsRoleArn: ${{ inputs.iamActionsRoleArn || '' }}
      iamStatsBucketWriterRoleArn: ${{ inputs.iamStatsBucketWriterRoleArn || '' }}
      iamPublicWebsiteStatsBucketWriterRoleArn: ${{ inputs.iamPublicWebsiteStatsBucketWriterRoleArn || '' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || github.workflow }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || github.ref_name }}
      lastActivityTimestamp: ${{ inputs.lastActivityTimestamp || github.run_started_at }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm install

      - name: engine
        id: engine
        shell: bash
        run: |
          engine=$(grep '^schedule:' .github/agentic-lib.yml | awk '{print $2}')
          echo "engine=${engine}"
          echo "engine=${engine}" >> $GITHUB_OUTPUT

      - name: Generate raw JSON statistics file
        id: generate-json
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const now = new Date();
            
            const { owner, repo } = context.repo;
            const engine = "${{ steps.engine.outputs.engine }}";
            const lastActivityName = "${{ env.lastActivityName }}";
            const lastActivityBranchName = "${{ env.lastActivityBranchName }}";
            const lastActivityTimestamp = "${{ env.lastActivityTimestamp }}";
            
            // Open issues count
            const issuesResp = await github.rest.issues.listForRepo({ owner, repo, state: "open", per_page: 256 });
            
            // Issues closed in last hour and day
            const sinceOneHour = new Date(now.getTime() - (60 * 60 * 1000)).toISOString();
            const closedHourResp = await github.rest.issues.listForRepo({ owner, repo, state: "closed", since: sinceOneHour, per_page: 256 });
            const sinceOneDay = new Date(now.getTime() - (24 * 60 * 60 * 1000)).toISOString();
            const closedDayResp = await github.rest.issues.listForRepo({ owner, repo, state: "closed", since: sinceOneDay, per_page: 256 });
            
            // Open pull requests with age in minutes
            const pullsResp = await github.rest.pulls.list({ owner, repo, state: "open", per_page: 256 });
            const prDetails = pullsResp.data.map(pr => {
              const createdAt = new Date(pr.created_at);
              const ageMinutes = Math.floor((now - createdAt) / (1000 * 60));
              return { title: pr.title, ageMinutes };
            });
            const averagePRAge = prDetails.length > 0 ? Math.floor(prDetails.reduce((sum, pr) => sum + pr.ageMinutes, 0) / prDetails.length) : 0;
            
            // Repository push details
            const repoResp = await github.rest.repos.get({ owner, repo });
            const pushedAt = new Date(repoResp.data.pushed_at);
            const mainBranchResp = await github.rest.repos.getBranch({ owner, repo, branch: "main" });
            const mainPushedAt = new Date(mainBranchResp.data.commit.commit.author.date);
            
            // Commits in the last hour and day
            const commitsLastHourResp = await github.rest.repos.listCommits({ owner, repo, since: sinceOneHour, per_page: 256 });
            const commitsLastDayResp = await github.rest.repos.listCommits({ owner, repo, since: sinceOneDay, per_page: 256 });
            
            // Last 5 commits on main
            const lastFiveCommitsResp = await github.rest.repos.listCommits({ owner, repo, sha: "main", per_page: 5 });
            const lastFiveCommitMessages = lastFiveCommitsResp.data.map(commit => {
              const commitDate = new Date(commit.commit.author.date);
              const hh = commitDate.getHours().toString().padStart(2, '0');
              const mm = commitDate.getMinutes().toString().padStart(2, '0');
              const message = commit.commit.message.length > 64 ? commit.commit.message.substring(0, 64) + "..." : commit.commit.message;
              return { time: `${hh}:${mm}`, message };
            });

            // Branches excluding "main" and "github-pages"
            const branchesResp = await github.rest.repos.listBranches({ owner, repo, per_page: 256 });
            const branchData = branchesResp.data.filter(branch => branch.name !== "main" && branch.name !== "github-pages");
            const branchDetails = await Promise.all(branchData.map(async branch => {
              const branchResp = await github.rest.repos.getBranch({ owner, repo, branch: branch.name });
              const lastCommitDate = new Date(branchResp.data.commit.commit.author.date);
              const minutesSinceLastCommit = Math.floor((now - lastCommitDate) / (1000 * 60));
              return { branch: branch.name, minutesSinceLastCommit };
            }));
            const averageBranchAge = branchDetails.length > 0 ? Math.floor(branchDetails.reduce((sum, branch) => sum + branch.minutesSinceLastCommit, 0) / branchDetails.length) : 0;

            const jsonData = { 
              owner, 
              repo,
              engine,
              lastActivityName,
              lastActivityBranchName,
              lastActivityTimestamp,
              openIssues: issuesResp.data.length,
              issuesClosedLastHour: closedHourResp.data.length,
              issuesClosedLastDay: closedDayResp.data.length,
              openPRs: prDetails.length,
              averagePRAge: averagePRAge,
              prDetails: prDetails.map(pr => `[${pr.ageMinutes}m] ${pr.title}`),
              diffMinutes: Math.floor((now - pushedAt) / (1000 * 60)),
              diffMinutesMain: Math.floor((now - mainPushedAt) / (1000 * 60)),
              commitsLastHour: commitsLastHourResp.data.length,
              commitsLastDay: commitsLastDayResp.data.length,
              lastFiveCommitMessages: lastFiveCommitMessages.map(commit => `[${commit.time}] - ${commit.message}`),
              branches: { 
                count: branchDetails.length, 
                details: branchDetails.map(branch => `[${branch.minutesSinceLastCommit}m] ${branch.branch}`),
                averageBranchAge
              },
              testStatusOnBranch: "PASS", // Placeholder
              testsLastPassedMinutes: 15, // Placeholder
              generatedAt: now.toISOString()
            };

            // Write JSON file
            const outputDir = "${{ env.public }}";
            if (!fs.existsSync(outputDir)) { fs.mkdirSync(outputDir); }
            const outputPath = path.join(outputDir, "${{ github.event.repository.name }}-stats.json");
            fs.writeFileSync(outputPath, JSON.stringify(jsonData, null, 2), "utf8");

            core.info(`JSON stats generated at ${outputPath}.`);
            core.setOutput("jsonStatsPath", outputPath);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamActionsRoleArn }}
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamStatsBucketWriterRoleArn }}
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Upload JSON stats artifact to S3
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }} \
              ${{ env.s3BucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - run: aws s3 ls ${{ env.s3BucketUrl }} --summarize

      - name: Configure AWS Credentials (resetting back from the stats bucket writer role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamActionsRoleArn }}
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamPublicWebsiteStatsBucketWriterRoleArn }}
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Upload JSON stats artifact to S3 website bucket
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }} \
              ${{ env.s3WebsiteBucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - name: Upload website artefacts to S3 website bucket
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }}  \
              ${{ env.s3WebsiteBucketUrl }}}${{ github.event.repository.name }}-stats.json \
          ;
          aws s3 cp \
              ${{ env.public }}/stats.html \
              ${{ env.s3WebsiteBucketUrl }}stats.html \
          ;
          aws s3 cp \
              ${{ env.public }}/all.html \
              ${{ env.s3WebsiteBucketUrl }}index.html \
          ;

      - run: aws s3 ls ${{ env.s3WebsiteBucketUrl }} --summarize

      - name: Output published website bucket pages URLs
        id: output-website-bucket-urls
        shell: bash
        run: |
          s3WebsiteBucketUrl='${{ env.s3WebsiteBucketUrl }}'
          bucket=$(echo "${s3WebsiteBucketUrl?}" | sed -e 's|s3://||' -e 's|/$||')
          baseUrl="http://${bucket?}.s3-website.eu-west-2.amazonaws.com/"
          allRespositoryStatsUrl="${baseUrl?}"
          echo "${allRespositoryStatsUrl?}"
          echo "::notice:: allRespositoryStatsUrl: ${allRespositoryStatsUrl?}"
          echo "allRespositoryStatsUrl=${allRespositoryStatsUrl?}" >> $GITHUB_OUTPUT

      - name: Upload JSON stats artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: stats-json
          path: ${{ steps.generate-json.outputs.jsonStatsPath }}

      # TODO: Generate HTML page from JSON stats instead of including the inline HTML.
      - name: Generate HTML page for statistics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const ejs = require('ejs');

            // Generate HTML contents from ${{ env.public }}/stats.html and the JSON file at ${{ steps.generate-json.outputs.jsonStatsPath }}
            const jsonFilePath = "${{ steps.generate-json.outputs.jsonStatsPath }}";
            const jsonData = JSON.parse(fs.readFileSync(jsonFilePath, "utf8"));
            const htmlEJSTemlatePath = "${{ env.public }}/stats.html";
            const template = fs.readFileSync(htmlEJSTemlatePath, "utf8");
            const html = ejs.render(template, statsData);
              
            // Ensure the output directory exists.
            const outputDir = "${{ env.public }}";
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir);
            }
            const outputPath = path.join(outputDir, "latest.html");
            fs.writeFileSync(outputPath, html, "utf8");
            core.info(`Static site generated at ${outputPath}.`);
            core.setOutput("sitePath", outputPath);

      - name: Generate index page
        shell: bash
        run: |
          ./scripts/md-to-html.js < README.md > ${{ env.public }}/index.agentic-lib.html
          cat ${{ env.public }}/index.agentic-lib.html | sed 's/agentic-lib/${{ github.event.repository.name }}/g' > ${{ env.public }}/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.public }}
          publish_branch: github-pages
          keep_files: true
          enable_jekyll: 'true'

      - name: Upload generated site as artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: ${{ env.public }}

      - name: Output published github pages URLs
        id: output-pages-urls
        run: |
          echo "[INFO] Determining GitHub Pages URL..."
          # GitHub Pages URL typically: https://<owner>.github.io/<repo>/
          repoName=${{ github.event.repository.name }}
          owner=${{ github.repository_owner }}
          baseUrl="https://${owner}.github.io/${repoName}"
          thisRepositoryStatsUrl="${baseUrl}/latest.html"
          thisHomePageUrl="${baseUrl}/index.html"
          pwd
          echo "${{ env.public }}:"
          ls -larth "${{ env.public }}"
          echo "${{ env.public }}/latest.html:"
          ls -larth "${{ env.public }}/latest.html"
          echo "::notice:: thisRepositoryStatsUrl: ${thisRepositoryStatsUrl}"
          echo "thisRepositoryStatsUrl=${thisRepositoryStatsUrl}" >> $GITHUB_OUTPUT
          echo "::notice:: thisHomePageUrl: ${thisHomePageUrl}"
          echo "thisHomePageUrl=${thisHomePageUrl}" >> $GITHUB_OUTPUT

    outputs:
      thisRepositoryStatsUrl: ${{ steps.output-pages-urls.outputs.thisRepositoryStatsUrl }}
      websiteBucketUrl: ${{ steps.output-website-bucket-urls.outputs.allStatsUrl }}

