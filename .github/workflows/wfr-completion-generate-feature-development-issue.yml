# .github/workflows/wfr-completion-generate-feature-development-issue.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ generate-feature-development-issue

on:
  workflow_call:
    inputs:
      featureName:
        description: 'name of the feature to create an issue for. e.g. "WEBSITE"'
        type: string
        required: true
      featuresPath:
        description: 'The directory to create/update the features in. e.g. "features/"'
        type: string
        required: false
        default: 'features/'
      libraryDocumentsPath:
        description: 'The directory containing library documents. e.g. "library/"'
        type: string
        required: false
        default: 'library/'
      featureDevelopmentIssuesWipLimit:
        description: 'The WIP limit for the feature development issues. e.g. "5"'
        type: string
        required: false
        default: '5'
      allSourcePaths:
        description: 'The source file(s) to create the issue to change. e.g. "src/lib/main.js" or multiple files separated by semicolons "src/lib/main.js;src/lib/utils.js"'
        type: string
        required: false
        default: 'src/lib/'
      allTestsPaths:
        description: 'The test file(s). e.g. "tests/unit/main.test.js" or multiple files separated by semicolons "tests/unit/main.test.js;tests/unit/utils.test.js"'
        type: string
        required: false
        default: 'tests/unit/'
      documentationPath:
        description: 'The documentation file(s) to write to. e.g. "docs/" or multiple files separated by semicolons "docs/api;docs/API.md"'
        type: string
        required: false
        default: 'docs/'
      readmeFilepath:
        description: 'The README file. e.g. "README.md"'
        type: string
        required: false
        default: 'README.md'
      missionFilepath:
        description: 'The MISSION statement file. e.g. "MISSION.md"'
        type: string
        required: false
        default: 'MISSION.md'
      contributingFilepath:
        description: 'The CONTRIBUTING file. e.g. "CONTRIBUTING.md"'
        type: string
        required: false
        default: 'CONTRIBUTING.md'
      dependenciesFilepath:
        description: 'The dependencies file. e.g. "package.json"'
        type: string
        required: false
        default: 'package.json'
      intentionFilepath:
        description: 'The intention file to review. e.g. "intentïon.md"'
        type: string
        required: false
        default: 'intentïon.md'
      buildScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm run build`'
        type: string
        required: false
        default: 'echo "No build script specified."'
      testScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm test`'
        type: string
        required: false
        default: 'npm test'
      issueSelectionLabel:
        description: 'Label used to filter issues for review. e.g. "feature"'
        required: false
        type: string
        default: 'feature'
      mainScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm run start`'
        type: string
        required: false
        default: 'npm run start'
      model:
        description: 'The OpenAI model to use. e.g. "o3-mini"'
        type: string
        required: false
        default: ${{ vars.CHATGPT_API_MODEL || 'o4-mini' }}
      promptFilepath:
        description: 'The file containing the prompt text. e.g. ".github/agents/agent-ready-issue.md"'
        type: string
        required: true
      npmAuthOrganisation:
        description: 'The GitHub organisation to authenticate with for npm. e.g. "xn-intenton-z2a"'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      iamRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      agentConfigContent:
        description: 'The content of the agent config file. e.g. Yaml read from "./github/agents/agent-config.yaml"'
        type: string
        required: false
        default: ''
      writeableFilepaths:
        description: 'Semicolon-separated list of file paths that can be written by the workflow. e.g. "elaborator-sandbox/SOURCES.md;elaborator-sandbox/library/;engineer-sandbox/features/;engineer-sandbox/source/;engineer-sandbox/tests/;engineer-sandbox/docs/"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
    outputs:
      issueTitle:
        value: ${{ jobs.generate-feature-development-issue.outputs.issueTitle }}
      issueDescription:
        value: ${{ jobs.generate-feature-development-issue.outputs.issueDescription }}
      featureLabel:
        value: ${{ jobs.generate-feature-development-issue.outputs.featureLabel }}
      usage:
        description: 'The LLM API usage of the action'
        value: ${{ jobs.generate-feature-development-issue.outputs.usage }}

jobs:
  generate-feature-development-issue:
    runs-on: ubuntu-latest

    env:
      featureName: ${{ inputs.featureName || '(No features refer to mission)' }}
      featuresPath: ${{ inputs.featuresPath || 'features/' }}
      libraryDocumentsPath: ${{ inputs.libraryDocumentsPath || 'library/' }}
      featureDevelopmentIssuesWipLimit: ${{ inputs.featureDevelopmentIssuesWipLimit || '5' }}
      allSourcePaths: ${{ inputs.allSourcePaths || '' }}
      allTestsPaths: ${{ inputs.allTestsPaths || '' }}
      documentationPath: ${{ inputs.documentationPath || '' }}
      readmeFilepath: ${{ inputs.readmeFilepath || 'README.md' }}
      missionFilepath: ${{ inputs.missionFilepath || 'MISSION.md' }}
      contributingFilepath: ${{ inputs.contributingFilepath || 'CONTRIBUTING.md' }}
      dependenciesFilepath: ${{ inputs.dependenciesFilepath || 'package.json' }}
      intentionFilepath: ${{ inputs.intentionFilepath || 'intentïon.md' }}
      buildScript: ${{ inputs.buildScript || 'npm run build' }}
      testScript: ${{ inputs.testScript || 'npm test' }}
      testScriptTimeout: '5m'
      mainScript: ${{ inputs.mainScript || 'npm run start' }}
      issueSelectionLabel: ${{ inputs.issueSelectionLabel || 'feature' }}
      mainScriptTimeout: '5m'
      model: ${{ inputs.model || vars.CHATGPT_API_MODEL || 'o4-mini' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      chatgptApiSecretKey: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      promptFilepath: ${{ inputs.promptFilepath || '.github/agents/agent-feature-issue.md' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      iamRoleArn: ${{ inputs.iamRoleArn || '' }}
      agentConfigContent: ${{ inputs.agentConfigContent || '' }}
      writeableFilepaths: ${{ inputs.writeableFilepaths || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit
          git push -v origin ${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check GitHub authentication
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm ci || npm install

      - name: List current features
        id: features
        shell: bash
        run: |
          output=$(find "${{ env.featuresPath }}" -maxdepth 1 -type f -name '*.md' -print -exec echo "# {}" \; -exec cat {} \; 2>&1 || echo 'none')
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: List dependencies
        id: list
        shell: bash
        run: |
          output=$(npm list 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Build project
        id: build
        shell: bash
        run: |
          output=$(${{ env.buildScript }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Tear down .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: rm -f .npmrc

      - name: Run tests
        id: test
        shell: bash
        run: |
          output=$(timeout ${{ env.testScriptTimeout }} ${{ env.testScript }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Run main
        id: main
        shell: bash
        run: |
          output=$(timeout ${{ env.mainScriptTimeout }} ${{ env.mainScript }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: generate-feature-development-issue
        id: generate-feature-development-issue
        uses: actions/github-script@v7
        env:
          dependenciesListOutput: ${{ steps.list.outputs.output }}
          buildOutput: ${{ steps.build.outputs.output }}
          testOutput: ${{ steps.test.outputs.output }}
          mainOutput: ${{ steps.main.outputs.output }}
          currentFeatures: ${{ steps.features.outputs.output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const featureName = process.env.featureName;
            const currentFeatures = process.env.currentFeatures;
            const featureDevelopmentIssuesWipLimit = process.env.featureDevelopmentIssuesWipLimit;
            const allSourcePaths = process.env.allSourcePaths;
            const allTestsPaths = process.env.allTestsPaths;
            const documentationPath = process.env.documentationPath.replace(/\/+$/, '');
            const readmeFilepath = process.env.readmeFilepath;
            const missionFilepath = process.env.missionFilepath;
            const contributingFilepath = process.env.contributingFilepath;
            const dependenciesFilepath = process.env.dependenciesFilepath;
            const libraryDocumentsPath = process.env.libraryDocumentsPath.replace(/\/+$/, '');
            const model = process.env.model;
            const apiKey = process.env.chatgptApiSecretKey;
            const promptFilepath = process.env.promptFilepath;
            const dependenciesListOutput = process.env.dependenciesListOutput;
            const intentionFilepath = process.env.intentionFilepath || '';
            const buildScript = process.env.buildScript;
            const buildOutput = process.env.buildOutput;
            const testScript = process.env.testScript;
            const testOutput = process.env.testOutput;
            const mainScript = process.env.mainScript;
            const mainOutput = process.env.mainOutput;
            const issueSelectionLabel = process.env.issueSelectionLabel;
            const agentConfigContent = process.env.agentConfigContent;
            const writeableFilepaths = process.env.writeableFilepaths;

            const fs = require('fs');
            const path = require('path');
            const OpenAI = require('openai').default;
            const { z } = require('zod');
            require('dotenv').config();

            // Gather the titles of all open issues
            const openIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: issueSelectionLabel
            });
            core.info(`Open issues: ${JSON.stringify(openIssues)}`);
            const openIssueTitles = openIssues.data.map(issue => issue.title).join(', ');
            core.info(`Open issue titles: ${openIssueTitles}`);
            if (openIssues.data.length >= featureDevelopmentIssuesWipLimit) {
              core.setFailed(`There are already ${featureDevelopmentIssuesWipLimit} open issues with the label '${issueSelectionLabel}'.`);
              return;
            }

            if (!apiKey) { 
              core.setFailed("Missing CHATGPT_API_SECRET_KEY"); 
              return;
            }
            const openai = new OpenAI({ apiKey });

            core.info(`featureName: "${featureName}"`); 
            core.info(`currentFeatures: "${currentFeatures}"`);
            core.info(`featureDevelopmentIssuesWipLimit: "${featureDevelopmentIssuesWipLimit}"`);
            core.info(`allSourcePaths: "${allSourcePaths}"`);
            core.info(`allTestsPaths: "${allTestsPaths}"`);
            core.info(`readmeFilepath: "${readmeFilepath}"`);
            core.info(`missionFilepath: "${missionFilepath}"`);
            core.info(`contributingFilepath: "${contributingFilepath}"`);
            core.info(`dependenciesFilepath: "${dependenciesFilepath}"`);
            core.info(`libraryDocumentsPath: "${libraryDocumentsPath}"`);
            core.info(`agentConfigContent: "${agentConfigContent}"`);
            core.info(`writeableFilepaths: "${writeableFilepaths}"`);

            // Handle multiple source files
            const srcFiles = allSourcePaths.split(';');
            let sourceFileContents = {};
            for (const file of srcFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        sourceFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Source file '${fullPath}' from directory has been loaded (length ${sourceFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    sourceFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Source file '${trimmedFile}' has been loaded (length ${sourceFileContents[trimmedFile].length}).`);
                  }
                } else {
                  core.warning(`Source file '${trimmedFile}' does not exist.`);
                }
              } catch (e) {
                core.warning(`Error reading source file '${file}': ${e.message}`);
              }
            }

            // Handle multiple test files
            const testFiles = allTestsPaths.split(';');
            let testsFileContents = {};
            for (const file of testFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        testsFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Test file '${fullPath}' from directory has been loaded (length ${testsFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    testsFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Test file '${trimmedFile}' has been loaded (length ${testsFileContents[trimmedFile].length}).`);
                  }
                } else {
                  core.warning(`Test file '${trimmedFile}' does not exist.`);
                }
              } catch (e) {
                core.warning(`Error reading test file '${file}': ${e.message}`);
              }
            }

            // Handle documents path to file or directory
            let docsFileContents = {};
            try {
              const trimmedFile = documentationPath.trim();
              if (fs.existsSync(trimmedFile)) {
                const stats = fs.statSync(trimmedFile);
                if (stats.isDirectory()) {
                  // If it's a directory, read all files in the directory
                  const files = fs.readdirSync(trimmedFile);
                  for (const subFile of files) {
                    const fullPath = path.join(trimmedFile, subFile);
                    if (fs.statSync(fullPath).isFile()) {
                      docsFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                      core.info(`Docs file '${fullPath}' from directory has been loaded (length ${docsFileContents[fullPath].length}).`);
                    }
                  }
                } else {
                  // It's a file, read it directly
                  docsFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                  core.info(`Docs file '${trimmedFile}' has been loaded (length ${docsFileContents[trimmedFile].length}).`);
                }
              } else {
                // Create directory if it doesn't exist
                const docsDir = path.dirname(trimmedFile);
                if (!fs.existsSync(docsDir)) {
                  fs.mkdirSync(docsDir, { recursive: true });
                }
                docsFileContents[trimmedFile] = '';
                core.info(`Docs file '${trimmedFile}' does not exist and will be created.`);
              }
            } catch (e) {
              core.warning(`Error reading docs file '${file}': ${e.message}`);
            }

            let readmeFilepathContent;
            try {
              readmeFilepathContent = fs.readFileSync(readmeFilepath, 'utf8');
            } catch (e) {
              core.warning(`Error reading README file '${readmeFilepath}': ${e.message}`);
              readmeFilepathContent = '';
            }
            let missionFilepathContent;
            try {
              missionFilepathContent = fs.readFileSync(missionFilepath, 'utf8');
            } catch (e) {
                core.warning(`Error reading MISSION file '${missionFilepath}': ${e.message}`);
                missionFilepathContent = '';
            }
            let contributingFilepathContent;
            try {
              contributingFilepathContent = fs.readFileSync(contributingFilepath, 'utf8');
            } catch (e) {
              core.warning(`Error reading CONTRIBUTING file '${contributingFilepath}': ${e.message}`);
              contributingFilepathContent = '';
            }
            let dependenciesFilepathContent;
            try {
              dependenciesFilepathContent = fs.readFileSync(dependenciesFilepath, 'utf8');
            } catch (e) {
              core.warning(`Error reading dependencies file '${dependenciesFilepath}': ${e.message}`);
              dependenciesFilepathContent = '';
            }
            let promptContent;
            try {
              promptContent = fs.readFileSync(promptFilepath, 'utf8');
            } catch (e) {
              core.warning(`Error reading prompt file '${promptFilepath}': ${e.message}`);
              promptContent = '';
            }

            core.info(`Readme file '${readmeFilepath}' has been loaded (length ${readmeFilepathContent.length}).`);
            core.info(`Mission file '${missionFilepath}' has been loaded (length ${missionFilepathContent.length}).`);
            core.info(`Contributing file '${contributingFilepath}' has been loaded (length ${contributingFilepathContent.length}).`);
            core.info(`Dependencies file '${dependenciesFilepath}' has been loaded (length ${dependenciesFilepathContent.length}).`);
            core.info(`Prompt file '${promptFilepath}' has been loaded (length ${promptContent.length}).`);

            // Get list of library documents
            let libraryFiles = [];
            let libraryContent = '';
            try {
              if (fs.existsSync(libraryDocumentsPath)) {
                libraryFiles = fs.readdirSync(libraryDocumentsPath)
                  .filter(file => file.endsWith('.md'))
                  .map(file => {
                    const filePath = path.join(libraryDocumentsPath, file);
                    const content = fs.readFileSync(filePath, 'utf8');

                    // Extract the Sanitised Extract section if it exists
                    let sanitisedExtract = '';
                    let sanitisedMatch = content.match(/## Sanitised Extract\n([\s\S]*?)(?=\n##|$)/);

                    // If Sanitised Extract is not found, try to find Escaped Extract (for older documents)
                    if (!sanitisedMatch || !sanitisedMatch[1] || !sanitisedMatch[1].trim()) {
                      const escapedMatch = content.match(/## Escaped Extract\n([\s\S]*?)(?=\n##|$)/);
                      if (escapedMatch && escapedMatch[1] && escapedMatch[1].trim()) {
                        sanitisedExtract = escapedMatch[1].trim();
                        core.info(`Using Escaped Extract for ${file} as fallback`);
                      }
                    } else {
                      sanitisedExtract = sanitisedMatch[1].trim();
                    }

                    // If neither Sanitised Extract nor Escaped Extract is found, use the full content
                    if (!sanitisedExtract) {
                      libraryContent += `# ${file}\n${content}\n\n`;
                    } else {
                      libraryContent += `# ${file}\n${sanitisedExtract}\n\n`;
                    }

                    return file;
                  });
              } else {
                core.warning(`Library directory '${libraryDocumentsPath}' does not exist.`);
              }
            } catch (e) {
              core.warning(`Error reading library directory: ${e.message}`);
            }

            core.info(`Found ${libraryFiles.length} library documents in directory "${libraryDocumentsPath}"`);

            // intention Filepath contents 
            let intentionContent = '';
            try {
              const intentionFilepath = process.env.intentionFilepath;
              if (fs.existsSync(intentionFilepath)) {
                intentionContent = fs.readFileSync(intentionFilepath, 'utf8');
                core.info(`Intention file content: ${intentionContent}`);
              } else {
                core.warning(`Intention file '${intentionFilepath}' does not exist.`);
              }
            } catch (error) {
              core.warning(`Error reading intention file: ${error.message}`);
            }

            const chatGptPrompt = `
            Please generate the title and description of a GitHub issue to which will be used to further the development
            of the feature named "${featureName}". Examine the details of the feature named "${featureName}" in the list
            of "Current feature names and specifications" for more details on the feature if it is in that list and then 
            create an issue that will deliver the feature. If the named feature is blank, create an issue that will partly 
            or completely fulfill the mission. If the named feature is not in the list of "Current feature names and 
            specifications" then imply the feature from the from the name.
            
            Evaluate the current state of the repository code, tests, open issues and create an issue which makes 
            district and useful progress towards delivering the features and complete the mission.

            In your response, please include, the title of the GitHub issue summarising the change and the body of the 
            GitHub issue detailing the change and how to apply and verify it. Also create a feature label from the name 
            of the feature that this issue is working towards by making a kebab-case name of the feature name.

            ${promptContent}

            The intentïon file contents is a log of both taken in the repository since the last repository seed and you
            should see an alignment between the intentïon file entries and commits in the repository (where a commit is required).
            Use this log to determine the current direction of the repository towards its mission. The combination of the
            repository code, tests, dependencies and supporting documentation show the current state of the repository.

            The maximum number of feature development issues that should be open at any one time is ${featureDevelopmentIssuesWipLimit},
            if there are already ${featureDevelopmentIssuesWipLimit} open issues fail this request.

            Consider the following when refining your response:
              * Current feature names and specifications in the repository
              * intentïon file contents
              * Source file content
              * Test file content
              * Documentation file content
              * README file content
              * MISSION file content
              * Contributing file content
              * Dependencies file content
              * Library documents
              * Dependency list
              * Build output
              * Test output
              * Main execution output
              * Open issue titles
              * Agent configuration file content

            Current feature names and specifications:
            CURRENT_FEATURES_START
            ${currentFeatures}
            CURRENT_FEATURES_END

            intentïon file contents:
            INTENTION_FILE_START
            ${intentionContent}
            INTENTION_FILE_END

            Source files:
            SOURCE_FILES_START
            ${Object.entries(sourceFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            SOURCE_FILES_END

            Test files:
            TEST_FILES_START
            ${Object.entries(testsFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            TEST_FILES_END

            Documentation files (to be updated if necessary):
            DOCS_FILES_START
            ${Object.entries(docsFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            DOCS_FILES_END

            README file: ${readmeFilepath}
            README_FILE_START
            ${readmeFilepathContent}
            README_FILE_END

            MISSION file: ${missionFilepath}
            MISSION_FILE_START
            ${missionFilepathContent}
            MISSION_FILE_END

            Contributing file: ${contributingFilepath}
            CONTRIBUTING_FILE_START
            ${contributingFilepathContent}
            CONTRIBUTING_FILE_END

            Dependencies file: ${dependenciesFilepath}
            DEPENDENCIES_FILE_START
            ${dependenciesFilepathContent}
            DEPENDENCIES_FILE_END

            Library documents from directory: ${libraryDocumentsPath}
            LIBRARY_DOCUMENTS_START
            ${libraryContent}
            LIBRARY_DOCUMENTS_END

            Dependencies list from command: npm list
            DEPENDENCIES_LIST_START
            ${dependenciesListOutput}
            DEPENDENCIES_LIST_END    

            Build output from command: ${buildScript}
            TEST_OUTPUT_START
            ${buildOutput}
            TEST_OUTPUT_END      

            Test output from command: ${testScript}
            TEST_OUTPUT_START
            ${testOutput}
            TEST_OUTPUT_END            

            Main output from command: ${mainScript}
            MAIN_OUTPUT_START
            ${mainOutput}
            MAIN_OUTPUT_END    

            Open issue titles:
            OPEN_ISSUE_TITLES_START
            ${openIssueTitles}
            OPEN_ISSUE_TITLES_END

            Agent configuration file:
            AGENT_CONFIG_FILE_START
            ${agentConfigContent}
            AGENT_CONFIG_FILE_END

            Answer strictly with a JSON object following this schema:
            {
              "issueTitle": "The title of the GitHub issue summarising the change.",
              "issueDescription": "The description of the GitHub issue detailing the change and how to apply and verify it.",
              "featureLabel": "The label for the GitHub issue representing the feature name in kebab-case."
            }
            Ensure valid JSON.
            `;

            const promptFilePath = 'prompt.txt';
            fs.writeFileSync(promptFilePath, chatGptPrompt);
            core.setOutput("promptFilePath", promptFilePath);
            core.info("promptFilePath: " + promptFilePath);

            const ResponseSchema = z.object({ issueTitle: z.string(), issueDescription: z.string(), featureLabel: z.string() });

            // Define the function schema for function calling
            const tools = [{
              type: "function",
              function: {
                name: "generate_issue",
                description: "Further development of the named feature through changes to the project files captured in the issueTitle and issueDescription of a GitHub Issue. Return an object with issueTitle (string), and issueDescription (string) and the featureLabel (string).",
                parameters: {
                  type: "object",
                  properties: {
                    issueTitle: { type: "string", description: "A summary of the change to make as a title." },
                    issueDescription: { type: "string", description: "Detail about the change, how to apply and verify it." },
                    featureLabel: { type: "string", description: "The label for the GitHub issue representing the feature name in kebab-case." }
                  },
                  required: ["issueTitle", "issueDescription", "featureLabel"],
                  additionalProperties: false
                },
                strict: true
              }
            }];

            // Call OpenAI using function calling format
            const request = {
              model,
              messages: [
                { role: "system", content: "You are raising a GitHub issue which will be processed by an LLM with a token limit of 200,000 tokens in order to manifest a specific named feature as code, tests or documentation. You will respond to the intention of the prompt using a detailed assessment of the current state of the repository, the current feature set and the mission statement. Answer strictly with a JSON object following the provided function schema." },
                { role: "user", content: chatGptPrompt }
              ],
              tools: tools
            };
            
            const requestFilePath = 'request.json';
            fs.writeFileSync(requestFilePath, JSON.stringify(request, null, 2));
            core.setOutput("requestFilePath", requestFilePath);
            core.info("requestFilePath: " + requestFilePath);
            const response = await openai.chat.completions.create(request);
            
            const responseFilePath = 'response.json';
            fs.writeFileSync(responseFilePath, JSON.stringify(response, null, 2));
            core.setOutput("responseFilePath", responseFilePath);
            core.info("responseFilePath: " + responseFilePath);

            let result;
            if (response.choices[0].message.tool_calls && response.choices[0].message.tool_calls.length > 0) {
              try {
                result = JSON.parse(response.choices[0].message.tool_calls[0].function.arguments);
              } catch (e) {
                core.setFailed(`Failed to parse function call arguments: ${e.message}`);
                return;
              }
            } else if (response.choices[0].message.content) {
              try {
                result = JSON.parse(response.choices[0].message.content);
              } catch (e) {
                core.setFailed(`Failed to parse response content: ${e.message}`);
                return;
              }
            } else {
              core.setFailed("No valid response received from OpenAI.");
              return;
            }

            try {
              let parsed;
              try {
                parsed = ResponseSchema.parse(result);
                const resultFilePath = 'result.json';
                fs.writeFileSync(resultFilePath, JSON.stringify(parsed, null, 2));
                core.setOutput("resultFilePath", resultFilePath);
                core.info("resultFilePath: " + resultFilePath);
              } catch (e) {
                core.setFailed(`Failed to parse ChatGPT response: ${e.message}`);
                return;
              }
            
              core.setOutput("issueTitle", parsed.issueTitle);
              core.setOutput("issueDescription", parsed.issueDescription);
              core.setOutput("featureLabel", parsed.featureLabel);
              core.info(`issueTitle: "${parsed.issueTitle}"`);
              core.info(`issueDescription: "${parsed.issueDescription}"`);
              core.info(`featureLabel: "${parsed.featureLabel}"`);

            } catch (e) {
              core.setFailed(`Failed to parse ChatGPT response: ${e.message}`);
              return;
            }

            core.setOutput("usage", JSON.stringify(response.usage));
            core.info(`usage: "${JSON.stringify(response.usage)}"`);

      - id: uuid
        name: uuid
        shell: bash
        run: |
          uuid=$(uuidgen)
          echo "uuid: ${uuid}"
          echo "uuid=${uuid}" >> $GITHUB_OUTPUT

      - name: Upload prompt file as an artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: "generate-feature-development-issue-prompt-${{ steps.uuid.outputs.uuid }}.txt"
          path: ${{ steps.generate-feature-development-issue.outputs.promptFilePath }}
          retention-days: 7

      - name: Upload request file as an artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: "generate-feature-development-issue-request-${{ steps.uuid.outputs.uuid }}.json"
          path: ${{ steps.generate-feature-development-issue.outputs.requestFilePath }}
          retention-days: 7

      - name: Upload response file as an artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: "generate-feature-development-issue-response-${{ steps.uuid.outputs.uuid }}.json"
          path: ${{ steps.generate-feature-development-issue.outputs.responseFilePath }}
          retention-days: 7

      - name: Upload result file as an artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: "generate-feature-development-issue-result-${{ steps.uuid.outputs.uuid }}.json"
          path: ${{ steps.generate-feature-development-issue.outputs.resultFilePath }}

    outputs:
      issueTitle: ${{ steps.generate-feature-development-issue.outputs.issueTitle }}
      issueDescription: ${{ steps.generate-feature-development-issue.outputs.issueDescription }}
      featureLabel: ${{ steps.generate-feature-development-issue.outputs.featureLabel }}
      usage: ${{ steps.generate-feature-development-issue.outputs.usage }}
