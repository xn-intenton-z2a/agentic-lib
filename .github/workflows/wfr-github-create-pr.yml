# .github/workflows/wfr-github-create-pr.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ create-pr

on:
  workflow_call:
    inputs:
      branch:
        description: 'The branch to create a PR from. e.g. "agentic-lib-issue-123"'
        type: string
        required: true
      baseBranch:
        description: 'The base branch to compare the PRs against. e.g. "main"'
        type: string
        required: false
        default: 'main'
      pulls:
        description: 'The maximum number of PRs to process. e.g. "100"'
        type: string
        required: false
        default: '100'
      gitCommitMessage:
        description: 'The commit message to use for the PR. e.g. "Ready for pull"'
        type: string
        required: false
        default: 'Ready for pull'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      label:
        description: 'The labels to apply to the PR. e.g. "automerge"'
        type: string
        required: false
        default: 'automerge'
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      iamRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false

jobs:
  create-pr:
    runs-on: ubuntu-latest

    env:
      branch: ${{ inputs.branch }}
      baseBranch: ${{ inputs.baseBranch || 'main' }}
      pulls: ${{ inputs.pulls || '100' }}
      gitCommitMessage: ${{ inputs.gitCommitMessage || 'Change complete ready for review' }}
      label: 'automerge'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ inputs.cache || 'npm' }}

      - name: Create pull request, if fixed after re-checking linting
        uses: actions/github-script@v7
        env:
          branch: ${{ env.branch }}
          baseBranch: ${{ env.baseBranch }}
          gitCommitMessage: ${{ env.gitCommitMessage }}
          label: ${{ env.label }}
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const { data: existingPulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${process.env.branch}`,
              base: process.env.baseBranch,
              state: 'open',
            });
            if (!existingPulls || existingPulls.length === 0) {
              const comparison = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: process.env.baseBranch,
                  head: process.env.branch,
              });
              // Delete the branch if there is no addition to the base branch (and this branch isn't main)
              if(process.env.branch != 'main' && comparison.data.ahead_by === 0){
                core.info(`No additions detected in ${process.env.branch} compared to ${process.env.baseBranch}. Deleting branch: ${process.env.branch}`);
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${process.env.branch}`,
                });
              } else {
                const { data: pr } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: process.env.gitCommitMessage,
                  head: process.env.branch,
                  base: process.env.baseBranch,
                  body: process.env.gitCommitMessage,
                  maintainer_can_modify: true,
                });
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: [process.env.label],
                });
                core.info(`Pull request created: ${pr.html_url}`);

                // Initiate Check Suites
                const { data: checkSuites } = await github.rest.checks.listForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: pr.head.sha,
                });
                if (checkSuites.check_suites && checkSuites.check_suites.length > 0) {
                  for (const suite of checkSuites.check_suites) {
                    await github.rest.checks.rerequestSuite({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      check_suite_id: suite.id,
                    });
                    core.info(`Re-ran check suite ${suite.id} for commit ${pr.head.sha}`);
                  }
                } else {
                  core.info('No check suites found for the new commit.');
                }
              }
            } else {
              core.info(`Pull request already exists for this branch: ${JSON.stringify(existingPulls)}`);
            }
