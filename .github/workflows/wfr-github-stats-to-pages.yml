# .github/workflows/wfr-github-stats-to-pages.yml
#
#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ stats to GitHub Pages

on:
  workflow_call:
    inputs:
      public:
        description: 'The public directory to use. e.g. "public"'
        type: string
        required: false
        default: 'public'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      npmAuthOrganisation:
        description: 'The npm auth organisation to use. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
      lastActivityName:
        description: 'The name of the last activity. e.g. "stats"'
        type: string
        required: false
      lastActivityBranchName:
        description: 'The name of the last activity branch. e.g. "main"'
        type: string
        required: false
      branchPrefix:
        description: 'The prefix for the issue branch. e.g. "agentic-lib-issue-"'
        type: string
        required: false
        default: 'agentic-lib-issue-'
      nextIssue:
        description: 'The next issue to review. e.g. "123 My issue automated"'
        type: string
        required: false
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      thisRepositoryStatsUrl:
        description: 'The URL of the latest stats page. e.g. "https://xn-intenton-z2a.github.io/agentic-lib/latest.html"'
        value: ${{ jobs.stats.outputs.thisRepositoryStatsUrl }}

jobs:
  generate-stats-json:
    uses: xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-stats-json.yml@main
    with:
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || '' }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || '' }}
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}
      nextIssue: ${{ inputs.nextIssue || '' }}
      cache: ${{ inputs.cache || 'npm' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  stats:
    needs:
      - generate-stats-json
    runs-on: ubuntu-latest

    env:
      public: ${{ inputs.public || 'public' }}
      cache: ${{ inputs.cache || 'npm' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || '' }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || '' }}
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}
      nextIssue: ${{ inputs.nextIssue || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: engine
        id: engine
        shell: bash
        run: |
          engine=$(grep '^schedule:' .github/agents/agentic-lib.yml | awk '{print $2}')
          echo "engine=${engine}"
          echo "engine=${engine}" >> $GITHUB_OUTPUT

      - name: Write JSON statistics to file
        id: generate-json
        uses: actions/github-script@v7
        env:
          public: ${{ env.public }}
          repositoryName: ${{ github.event.repository.name }}
          statsJson: ${{ needs.generate-stats-json.outputs.statsJson }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Parse the JSON data from the reusable workflow output
            const jsonData = JSON.parse(process.env.statsJson);

            // Write JSON file
            const outputDir = process.env.public;
            if (!fs.existsSync(outputDir)) { fs.mkdirSync(outputDir); }
            const outputPath = path.join(outputDir, process.env.repositoryName + "-stats.json");
            fs.writeFileSync(outputPath, JSON.stringify(jsonData, null, 2), "utf8");

            core.info(`JSON stats written to ${outputPath}.`);
            core.setOutput("jsonStatsPath", outputPath);

      - name: Generate random suffix
        id: random
        run: echo "suffix=$(date +%s%N)" >> $GITHUB_OUTPUT

      - name: Upload JSON stats artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: stats-json-${{ steps.random.outputs.suffix }}
          path: ${{ steps.generate-json.outputs.jsonStatsPath }}

      - run: npm install

      - name: Generate HTML page for statistics
        id: generate-html
        uses: actions/github-script@v7
        env:
          public: ${{ env.public }}
          jsonStatsPath: ${{ steps.generate-json.outputs.jsonStatsPath }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const ejs = require('ejs');

            // Generate HTML contents from public/stats.html and the JSON file
            const statsDataFilePath = process.env.jsonStatsPath;
            const statsData = JSON.parse(fs.readFileSync(statsDataFilePath, "utf8"));
            const htmlEJSTemlatePath = process.env.public + "/stats.html";
            const template = fs.readFileSync(htmlEJSTemlatePath, "utf8");
            const html = ejs.render(template, statsData);

            // Ensure the output directory exists.
            const outputDir = process.env.public;
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir);
            }
            const outputPath = path.join(outputDir, "latest.html");
            fs.writeFileSync(outputPath, html, "utf8");
            core.info(`Static site generated at ${outputPath}.`);
            core.setOutput("sitePath", outputPath);

      - name: Generate index page
        shell: bash
        run: |
          ./scripts/md-to-html.js < README.md > ${{ env.public }}/index.agentic-lib.html
          cat ${{ env.public }}/index.agentic-lib.html | sed 's/agentic-lib/${{ github.event.repository.name }}/g' > ${{ env.public }}/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.public }}
          publish_branch: github-pages
          keep_files: true
          enable_jekyll: 'true'

      - name: Generate random suffix
        id: random
        run: echo "suffix=$(date +%s%N)" >> $GITHUB_OUTPUT

      - name: Upload generated site as artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-${{ steps.random.outputs.suffix }}
          path: ${{ env.public }}

      - name: Output published github pages URLs
        id: output-pages-urls
        run: |
          echo "[INFO] Determining GitHub Pages URL..."
          # GitHub Pages URL typically: https://<owner>.github.io/<repo>/
          repoName=${{ github.event.repository.name }}
          owner=${{ github.repository_owner }}
          baseUrl="https://${owner}.github.io/${repoName}"
          thisRepositoryStatsUrl="${baseUrl}/latest.html"
          thisHomePageUrl="${baseUrl}/index.html"
          pwd
          echo "${{ env.public }}:"
          ls -larth "${{ env.public }}"
          echo "${{ env.public }}/latest.html:"
          ls -larth "${{ env.public }}/latest.html"
          echo "::notice:: thisRepositoryStatsUrl: ${thisRepositoryStatsUrl}"
          echo "thisRepositoryStatsUrl=${thisRepositoryStatsUrl}" >> $GITHUB_OUTPUT
          echo "::notice:: thisHomePageUrl: ${thisHomePageUrl}"
          echo "thisHomePageUrl=${thisHomePageUrl}" >> $GITHUB_OUTPUT

    outputs:
      thisRepositoryStatsUrl: ${{ steps.output-pages-urls.outputs.thisRepositoryStatsUrl }}
