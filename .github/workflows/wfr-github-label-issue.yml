# .github/workflows/wfr-github-label-issue.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ automerge-label-issue

on:
  workflow_call:
    inputs:
      pullNumber:
        description: 'The pull request number. e.g. "123"'
        type: string
        required: true
      issueNumber:
        description: 'The issue number to review. e.g. "123"'
        type: string
        required: true
      removeAllLabels:
        description: 'Whether to remove all labels from the issue. e.g. "true"'
        type: string
        required: false
        default: 'false'
      commentPrefix:
        description: 'The prefix for the comment. e.g. "The feature branch ".'
        type: string
        required: false
        default: 'The feature branch has been merged: '
      npmAuthOrganisation:
        description: 'The organisation for npm authentication. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
        default: '@xn-intenton-z2a'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      iamRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      issueNumber:
        description: 'The issue number just merged. e.g. "123"'
        value: ${{ jobs.check-pr.outputs.issueNumber }}
jobs:
  label-issue:
    runs-on: ubuntu-latest

    env:
      pullNumber: ${{ inputs.pullNumber || ''}}
      branchPrefix: ${{ inputs.branchPrefix || '' }}
      issueNumber: ${{ inputs.issueNumber || '' }}
      commentPrefix: ${{ inputs.commentPrefix || '' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '@xn-intenton-z2a' }}
      cache: ${{ inputs.cache || 'npm' }}
      removeAllLabels: ${{ inputs.removeAllLabels || 'false' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      iamRoleArn: ${{ inputs.iamRoleArn || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - id: validate-issue-number
        run: |
          issueNumber="${{ env.issueNumber }}"
          if [[ -n "$issueNumber" && "$issueNumber" =~ [0-9] ]]; then
            echo "[$issueNumber] is a valid issue number."
            echo "isValid=true" >> $GITHUB_OUTPUT
          else
            echo "[$issueNumber] is not a valid issue number."
            echo "isValid=false" >> $GITHUB_OUTPUT
          fi

      - name: Add "merged" label and comment on issue
        if: ${{ steps.validate-issue-number.outputs.isValid == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const pullNumberStr = process.env.pullNumber;
            const issueNumber = process.env.issueNumber;
            const pullNumber = (parseInt(pullNumberStr) ? parseInt(pullNumberStr) : "");
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const removeAllLabels = process.env.removeAllLabels === 'true';
            
            const { data: pullRequest } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pullNumber,
            });
            const branchName = pullRequest.head.ref;
            const commentBody = `The feature branch has been merged: ${branchName}`;
            if(removeAllLabels){
              core.info(`Removing all labels from issue #${issueNumber}`);
              await github.rest.issues.removeAllLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
            }
            
            // Get current issue labels
            core.info(`Retrieving issue ${issueNumber} details...`);
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            core.info(`Issue title: ${issue.title}`);
            const hasMergedLabel = issue.labels.some(label => label.name === 'merged');
            const hasInProgressLabel = issue.labels.some(label => label.name === 'in-progress');
            
            if (hasMergedLabel) {
              core.info(`Issue #${issueNumber} already has the "merged" label.`);
            } else {
              core.info(`Adding "merged" label to issue #${issueNumber}.`);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['merged']
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: commentBody
              });
            }
            
            if (hasInProgressLabel) {
              core.info(`Removing "in-progress" label from issue #${issueNumber}.`);
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                name: 'in-progress'
              });
            } else {
              core.info(`Issue #${issueNumber} does not have the "in-progress" label.`);
            }
