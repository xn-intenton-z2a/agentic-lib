# .github/workflows/wfr-completion-maintain-sources.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ maintain-sources

on:
  workflow_call:
    inputs:
      source:
        description: 'Text to drive the source creation (if "house choice", the repository will be assessed and an action chosen). e.g. "Add a source about agents."'
        type: string
        required: false
        default: 'house choice'
      sourcesFile:
        description: 'The file to create/update the sources in. Can include wildcards for multiple files. e.g. "SOURCES.md" or "SOURCES*.md"'
        type: string
        required: false
        default: 'SOURCES.md'
      sourcesLimit:
        description: 'The maximum number of sources to create. e.g. "3"'
        type: string
        required: false
        default: '32'
      featuresDir:
        description: 'The directory to read the features from. e.g. "features/"'
        type: string
        required: false
        default: 'features/'
      target:
        description: 'The target file to create the issue to change. e.g. "src/lib/main.js"'
        type: string
        required: false
        default: 'src/lib/main.js'
      testFile:
        description: 'The test file. e.g. "tests/unit/main.test.js"'
        type: string
        required: false
        default: 'tests/unit/main.test.js'
      readmeFile:
        description: 'The README file. e.g. "README.md"'
        type: string
        required: false
        default: 'README.md'
      missionFile:
        description: 'The MISSION statement file. e.g. "MISSION.md"'
        type: string
        required: false
        default: 'MISSION.md'
      contributingFile:
        description: 'The CONTRIBUTING file. e.g. "CONTRIBUTING.md"'
        type: string
        required: false
        default: 'CONTRIBUTING.md'
      dependenciesFile:
        description: 'The dependencies file. e.g. "package.json"'
        type: string
        required: false
        default: 'package.json'
      model:
        description: 'The OpenAI model to use. e.g. "o3-mini"'
        type: string
        required: false
        default: ${{ vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation:
        description: 'The GitHub organisation to authenticate with for npm. e.g. "xn-intenton-z2a"'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      iamRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
    outputs:
      sourcesDirectoryFileContent:
        value: ${{ jobs.maintain-sources.outputs.sourcesDirectoryFileContent }}

jobs:
  maintain-sources:
    runs-on: ubuntu-latest

    env:
      source: ${{ inputs.source || '' }}
      sourcesFile: ${{ inputs.sourcesFile || 'SOURCES.md' }}
      sourcesLimit: ${{ inputs.sourcesLimit || '32' }}
      featuresDir: ${{ inputs.featuresDir || 'features/' }}
      target: ${{ inputs.target || 'src/lib/main.js' }}
      testFile: ${{ inputs.testFile || 'tests/unit/main.test.js' }}
      readmeFile: ${{ inputs.readmeFile || 'README.md' }}
      missionFile: ${{ inputs.missionFile || 'MISSION.md' }}
      contributingFile: ${{ inputs.contributingFile || 'CONTRIBUTING.md' }}
      dependenciesFile: ${{ inputs.dependenciesFile || 'package.json' }}
      model: ${{ inputs.model || vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      chatgptApiSecretKey: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      iamRoleArn: ${{ inputs.iamRoleArn || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check GitHub authentication
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm ci

      - name: List current features
        id: features
        shell: bash
        run: |
          output=$(find "${{ env.featuresDir }}" -maxdepth 1 -type f -name '*.md' -print -exec echo "# {}" \; -exec cat {} \; 2>&1 || echo 'none')
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: List dependencies
        id: list
        shell: bash
        run: |
          output=$(npm list 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Tear down .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: rm -f .npmrc

      - name: Touch or create sources file
        id: touch
        shell: bash
        run: |
          # Check if sourcesFile contains a wildcard
          if [[ "${{ env.sourcesFile }}" == *"*"* ]]; then
            # Get the pattern and create the main file if it doesn't exist
            # For example, if pattern is SOURCES*.md, create SOURCES.md if it doesn't exist
            mainFile=$(echo "${{ env.sourcesFile }}" | sed 's/\*//g')
            if [ ! -f "$mainFile" ]; then
              echo "Creating main sources file ${GITHUB_WORKSPACE}/$mainFile"
              touch "$mainFile"
              ls -lrt "$mainFile"
              cat "$mainFile"
            else
              echo "Touching main sources file ${GITHUB_WORKSPACE}/$mainFile"
              touch "$mainFile"
              ls -lrt "$mainFile"
              cat "$mainFile"
            fi

            # List all files matching the pattern
            echo "Files matching pattern ${{ env.sourcesFile }}:"
            ls -la ${{ env.sourcesFile }} 2>/dev/null || echo "No files found matching ${{ env.sourcesFile }}"
          else
            # Handle single file case
            if [ ! -f "${{ env.sourcesFile }}" ]; then
              echo "Creating sources file ${GITHUB_WORKSPACE}/${{ env.sourcesFile }}"
              touch "${{ env.sourcesFile }}"
              ls -lrt "${{ env.sourcesFile }}"
              cat "${{ env.sourcesFile }}"
            else
              echo "Touching sources file ${GITHUB_WORKSPACE}/${{ env.sourcesFile }}"
              touch "${{ env.sourcesFile }}"
              ls -lrt "${{ env.sourcesFile }}"
              cat "${{ env.sourcesFile }}"
            fi
          fi

      - name: maintain-sources
        id: maintain-sources
        uses: actions/github-script@v7
        env:
          currentFeatures: ${{ steps.features.outputs.output }}
          dependenciesListOutput: ${{ steps.list.outputs.output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const source = process.env.source;
            const sourcesFile = process.env.sourcesFile;
            const sourcesLimit = process.env.sourcesLimit;
            const currentFeatures = process.env.currentFeatures;
            const target = process.env.target;
            const testFile = process.env.testFile;
            const readmeFile = process.env.readmeFile;
            const missionFile = process.env.missionFile;
            const contributingFile = process.env.contributingFile;
            const dependenciesFile = process.env.dependenciesFile;
            const model = process.env.model;
            const apiKey = process.env.chatgptApiSecretKey;
            const dependenciesListOutput = process.env.dependenciesListOutput;

            const fs = require('fs');
            const path = require('path');
            const OpenAI = require('openai').default;
            const { z } = require('zod');
            require('dotenv').config();

            if (!apiKey) { 
              core.setFailed("Missing CHATGPT_API_SECRET_KEY"); 
            }
            const openai = new OpenAI({ apiKey });

            core.info(`source: "${source}"`);
            core.info(`sourcesFile: "${sourcesFile}"`);
            core.info(`currentFeatures: "${currentFeatures}"`);
            core.info(`target: "${target}"`);
            core.info(`testFile: "${testFile}"`);
            core.info(`readmeFile: "${readmeFile}"`);
            core.info(`missionFile: "${missionFile}"`);
            core.info(`contributingFile: "${contributingFile}"`);
            core.info(`dependenciesFile: "${dependenciesFile}"`);

            core.info(`Loading sources directory file(s) '${sourcesFile}'...`);

            let sourcesFileContent = '';

            // If sourcesFile contains a wildcard, find all matching files
            if (sourcesFile.includes('*')) {
              const sourcesPattern = sourcesFile;
              const sourcesDir = path.dirname(sourcesPattern);
              const sourcesBasename = path.basename(sourcesPattern);
              const sourcesRegex = new RegExp('^' + sourcesBasename.replace(/\*/g, '.*') + '$');

              // Get all files in the directory
              const files = fs.readdirSync(sourcesDir || '.');

              // Filter files that match the pattern
              const matchingFiles = files.filter(file => sourcesRegex.test(file))
                .map(file => path.join(sourcesDir || '.', file));

              core.info(`Found ${matchingFiles.length} sources files matching pattern '${sourcesPattern}': ${matchingFiles.join(', ')}`);

              // Read content from all matching files
              for (const file of matchingFiles) {
                try {
                  const content = fs.readFileSync(file, 'utf8');
                  core.info(`Sources file '${file}' has been loaded (length ${content.length}).`);
                  sourcesFileContent += content + '\n\n';
                } catch (e) {
                  core.warning(`Error reading sources file '${file}': ${e.message}`);
                }
              }
            } else {
              // Load a single sources file
              sourcesFileContent = fs.readFileSync(sourcesFile, 'utf8');
              core.info(`Sources directory file '${sourcesFile}' has been loaded (length ${sourcesFileContent.length}).`);
            }

            const targetFileContent = fs.readFileSync(target, 'utf8');
            const testFileContent = fs.readFileSync(testFile, 'utf8');
            const readmeFileContent = fs.readFileSync(readmeFile, 'utf8');
            const missionFileContent = fs.readFileSync(missionFile, 'utf8');
            const contributingFileContent = fs.readFileSync(contributingFile, 'utf8');
            const dependenciesFileContent = fs.readFileSync(dependenciesFile, 'utf8');
            core.info(`Target file '${target}' has been loaded (length ${targetFileContent.length}).`);
            core.info(`Test file '${testFile}' has been loaded (length ${testFileContent.length}).`);
            core.info(`Readme file '${readmeFile}' has been loaded (length ${readmeFileContent.length}).`);
            core.info(`Dependencies file '${dependenciesFile}' has been loaded (length ${dependenciesFileContent.length}).`);

            // generate the source prompt either by using the supplied source prompt or by reviewing the current sources and full context
            let prompt = source;
            if (source === 'house choice') {
              prompt = `Please review the current sources in the directory and either;
                * add a new source to the repository, or
                * extend an existing source to add a new aspect to it, or
                * update an existing source to bring it to a high standard matching other sources in the repository.
                The source name should either be a current source name or be supplied with a source specification which is distinct from any other feature in the repository.
              `;
            }

            const chatGptPrompt = `
            Please create, extend or update the document sources in the sourcesFile based the supplied source prompt.
            Add or update as many as you can, review and refine the summaries to match the latest information you have.
            If there is nothing to add consider pruning some overlapping topics.
            If you can request some content from the URL do so and summarise it.
            The sources should be URLs which can be accessed without authentication for content which is publicly available.
            The URLs should be public URLS on the internet external to this repository. e.g. https://docs.github.com/en/rest
            Pick subjects which are relevant to the repository and which are not already covered by the current sources.
            Locate competitors and similar projects to the repository and find their documentation providing that it is permissible to do so.
            Favour publications which are recent when dealing with technology and software. Increase your temperature if his model supports it.
            You are maintaining a file which should contain name, descriptions, licenses and URLS of document sources to be used in the repository.
            The file is in markdown format and should be a list of sources with repeated sections of the following format:
            START_OF_FORMAT
            # Source Name
            ## https://docs.github.com/en/rest
            Source description. This can be several sentences long and should be a summary of the content of the source.
            Include last known publication dates if you can and view you have on how authoritative the source is (and how you know this).
            ## License if known
            END_OF_FORMAT
            If there are more than the maximum number of ${sourcesLimit} sources in the repository, you must merge similar sources into a single source.
            Always return the whole modified sources file content (not just the changed parts).
            The source directory should be a multiline markdown with a few level 1 (#) headings for a source name then level 2 (##) with the url of a document source 
            followed by a description and license.
            Consider the following when refining your response:
            * Source prompt details
            * Current sources file content
            * Current feature names and specifications in the repository
            * Target file content
            * Test file content
            * README file content
            * MISSION file content
            * Contributing file content
            * Dependencies file content
            * Dependency list

            Source prompt:
            SOURCE_PROMPT_START
            ${prompt}
            SOURCE_PROMPT_END            

            Current sources file content:
            SOURCES_FILE_START
            ${sourcesFileContent}
            SOURCES_FILE_END

            Current feature names and specifications:
            CURRENT_FEATURES_START
            ${currentFeatures}
            CURRENT_FEATURES_END

            Target file: ${target}
            TARGET_FILE_START
            ${targetFileContent}
            TARGET_FILE_END

            Test file: ${testFile}
            TEST_FILE_START
            ${testFileContent}
            TEST_FILE_END

            README file: ${readmeFile}
            README_FILE_START
            ${readmeFileContent}
            README_FILE_END

            MISSION file: ${missionFile}
            MISSION_FILE_START
            ${missionFileContent}
            MISSION_FILE_END

            Contributing file: ${contributingFile}
            CONTRIBUTING_FILE_START
            ${contributingFileContent}
            CONTRIBUTING_FILE_END

            Dependencies file: ${dependenciesFile}
            DEPENDENCIES_FILE_START
            ${dependenciesFileContent}
            DEPENDENCIES_FILE_END

            Dependencies list from command: npm list
            DEPENDENCIES_LIST_START
            ${dependenciesListOutput}
            DEPENDENCIES_LIST_END    

            Answer strictly with a JSON object following this schema:
            {
              "sourcesDirectoryFileContent": "The source directory should be a multiline markdown with a few level 1 (#) headings a source name preceding level 2 (##) with the url of a document source."
            }
            Ensure valid JSON.
            `;

            const ResponseSchema = z.object({ sourcesDirectoryFileContent: z.string() });

            // Define the function schema for function calling
            const tools = [{
              type: "function",
              function: {
                name: "generate_sources",
                description: "Elaborate on the supplied prompt and project files to create the sourcesDirectoryFileContent of a repository source. Return an object with sourcesDirectoryFileContent (string).",
                parameters: {
                  type: "object",
                  properties: {
                    sourcesDirectoryFileContent: { type: "string", description: "The source directory should be a multiline markdown with a few level 1 (#) headings a source name preceding level 2 (##) with the url of a document source." }
                  },
                  required: ["sourcesDirectoryFileContent"],
                  additionalProperties: false
                },
                strict: true
              }
            }];

            // Call OpenAI using function calling format
            const response = await openai.chat.completions.create({
              model,
              messages: [
                { role: "system", content: "You are maintaining a library of repository context providing expert contemporary insight into both the product market and you will perform a detailed analysis of the current state of the repository and current feature set in search of ideas for find useful information sources. Answer strictly with a JSON object following the provided function schema." },
                { role: "user", content: chatGptPrompt }
              ],
              tools: tools
            });

            let result;
            if (response.choices[0].message.tool_calls && response.choices[0].message.tool_calls.length > 0) {
              try {
                result = JSON.parse(response.choices[0].message.tool_calls[0].function.arguments);
              } catch (e) {
                core.setFailed(`Failed to parse function call arguments: ${e.message}`);
              }
            } else if (response.choices[0].message.content) {
              try {
                result = JSON.parse(response.choices[0].message.content);
              } catch (e) {
                core.setFailed(`Failed to parse response content: ${e.message}`);
              }
            } else {
              core.setFailed("No valid response received from OpenAI.");
            }

            try {
              const parsed = ResponseSchema.parse(result);
              core.setOutput("sourcesDirectoryFileContent", parsed.sourcesDirectoryFileContent);
              core.info(`sourcesDirectoryFileContent: "${parsed.sourcesDirectoryFileContent}"`);

              const sourcesDirectoryFileContent = parsed.sourcesDirectoryFileContent;
              let sourcesDirectoryFilePath = process.env.sourcesFile || 'SOURCES.md';

              // If sourcesFile contains a wildcard, write to the main file (with the wildcard removed)
              if (sourcesDirectoryFilePath.includes('*')) {
                sourcesDirectoryFilePath = sourcesDirectoryFilePath.replace(/\*/g, '');
                core.info(`Writing to main sources file: ${sourcesDirectoryFilePath}`);
              }

              try {
                fs.writeFileSync(sourcesDirectoryFilePath, sourcesDirectoryFileContent);
                core.info(`source directory saved to ${sourcesDirectoryFilePath}`);
              } catch (e) {
                core.setFailed(`Failed to save source directory: ${e.message}`);
              }

            } catch (e) {
              core.setFailed(`Failed to parse ChatGPT response: ${e.message}`);
            }

            core.setOutput("response", JSON.stringify(response));
            core.setOutput("usage", JSON.stringify(response.usage));
            core.info(`response: "${JSON.stringify(response)}"`);
            core.info(`usage: "${JSON.stringify(response.usage)}"`);

      - name: Commit changes
        id: commit
        continue-on-error: true
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

          # If sourcesFile contains a wildcard, add all matching files
          if [[ "${{ env.sourcesFile }}" == *"*"* ]]; then
            echo "Adding all files matching pattern ${{ env.sourcesFile }}"
            git add -v --all ${{ env.sourcesFile }}
            # Also add the main file (with the wildcard removed)
            mainFile=$(echo "${{ env.sourcesFile }}" | sed 's/\*//g')
            git add -v --all "$mainFile"
            git commit -m "Maintain sources files matching ${{ env.sourcesFile }}"
          else
            # Add the specific file
            git add -v --all '${{ env.sourcesFile }}'
            git commit -m "Maintain ${{ env.sourcesFile }}"
          fi

          git status -v
          git pull --ff-only origin ${{ github.ref }}
          git push -v origin ${{ github.ref }}
          git status -v
