# .github/workflows/wfr-run-sarif-script-then-post-script-and-push-changes.yml
name: âˆž Run sarif script, post-process, test and push

on:
  workflow_call:
    inputs:
      sarifScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and output in SARIF format. e.g. `npx --silent eslint --fix --format=@microsoft/eslint-formatter-sarif .`'
        type: string
        required: false
        default: 'npx --silent eslint --fix --format=@microsoft/eslint-formatter-sarif .'
      postScript:
        description: 'The script must be runnable as: `npm ci ; <script>`. e.g. `prettier --write .`'
        type: string
        required: false
        default: 'prettier --write .'
      testScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm test`'
        type: string
        required: false
        default: 'npm test'
      baseDir:
        description: 'Relative paths are assumed to be relative to these directories. e.g. "."'
        type: string
        required: false
        default: '.'
      logToFilepath:
        description: 'The path of the log file to upload as an artifact. e.g. `./sarifScript-log.json`'
        type: string
        required: false
        default: ''
      npmAuth:
        description: 'Whether to authenticate with npm. e.g. "true"'
        type: string
        required: false
        default: 'true'
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      gitCommitMessage:
        description: 'The message to use for git commits. e.g. "Updated by sarif script"'
        type: string
        required: false
        default: 'Updated by sarif script'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: true
    outputs:
      fixRequired:
        value: ${{ jobs.check-linting.outputs.fixRequired }}

jobs:
  check-linting:
    runs-on: ubuntu-latest

    env:
      sarifScript: ${{ inputs.sarifScript || 'npx --silent eslint --fix --format=@microsoft/eslint-formatter-sarif ./src/ ./tests/' }}
      testScript: ${{ inputs.testScript || 'npm test' }}
      baseDir: ${{ inputs.baseDir || './src/ ./tests/' }}
      logToFilepath: ${{ inputs.logToFilepath || '' }}
      npmAuth: ${{ inputs.npmAuth || 'true' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      gitCommitMessage: |
        ${{ inputs.gitCommitMessage || 'Updated by sarif script' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - run: git pull

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Check GitHub authentication
        if: ${{ env.npmAuth == 'true' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuth == 'true' }}
        shell: bash
        run: |
          echo "@polycode-projects:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm ci

      - name: Tear down .npmrc
        if: ${{ env.npmAuth == 'true' }}
        run: rm -f .npmrc

      - name: Create logfile
        if: ${{ env.logToFilepath != '' }}
        shell: bash
        run: touch '${{ env.logToFilepath }}'

      - name: check-linting
        id: check-linting
        continue-on-error: true
        shell: bash
        run: |
          savedOptions=$(set +o) \
          && set +e \
          && output1=$(${{ env.sarifScript }}) \
          ; output2=$(${{ env.sarifScript }}) \
          ; exitCode="$?" \
          && eval "${savedOptions?}" \
          && echo "exitCode=${exitCode}" \
          && echo "${output2}" | jq -e '.runs[0].results | length > 0' > /dev/null \
          && fixRequired=$([ $? -eq 0 ] && echo 'true' || echo 'false') \
          && echo "fixRequired=${fixRequired?}" \
          | tee -a "${GITHUB_OUTPUT?}" \
          && resultsBefore=$(echo "${output1}" | jq '.runs[0].results | length' 2>/dev/null || echo "unknown") \
          && resultsAfter=$(echo "${output2}" | jq '.runs[0].results | length' 2>/dev/null || echo "unknown") \
          && fixApplied=$([ "${resultsAfter}" -lt "${resultsBefore}" ] && echo 'true' || echo 'false') \
          && echo "fixApplied=${fixApplied?}" \
          | tee -a "${GITHUB_OUTPUT?}" \
          ; echo "output2=${output2}" \
          ;

      - name: post-process-and-commit
        id: post-process-and-commit
        if: ${{ steps.check-linting.outputs.fixApplied == 'true' }}
        continue-on-error: true
        shell: bash
        run: |
          savedOptions=$(set +o) \
          && set +e \
          && ${{ env.postScript }} || echo 'May be a partial formatting fix attempting to commit changes' \
          ; eval "${savedOptions?}" \
          && git config --local user.email '${{ env.gitUserEmail }}' \
          && git config --local user.name '${{ env.gitUserName }}' \
          && git status -v \
          && git add -v --all '${{ env.baseDir }}' \
          && git commit -v -m "${{ env.gitCommitMessage }}" \
          && ${{ env.testScript }} \
          && git push -v \
          && git status -v \
          ;

      - name: Upload Logging Output
        if: ${{ env.logToFilepath != '' }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: intention-log
          path: ${{ env.logToFilepath }}

      - name: Examine the git working copy
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

    outputs:
      fixRequired: ${{ steps.check-linting.outputs.fixRequired }}
