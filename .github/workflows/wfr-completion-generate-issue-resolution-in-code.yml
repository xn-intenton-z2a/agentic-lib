# .github/workflows/wfr-completion-generate-issue-resolution-in-code.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ wfr-apply-issue-resolution

on:
  workflow_call:
    inputs:
      issueNumber:
        description: 'The issue number to review. e.g. "123"'
        type: string
        required: true
      featuresPath:
        description: 'The directory to create/update the features in. e.g. "features/"'
        type: string
        required: false
        default: 'features/'
      srcPath:
        description: 'The source file(s) to review. e.g. "src/lib/" or multiple files or directories separated by semicolons "src/lib/;src/utils/utils.js"'
        type: string
        required: false
        default: 'src/lib/'
      testsPath:
        description: 'The test file(s) to review. e.g. "tests/unit/" or multiple files separated by semicolons "tests/unit/;tests/utils/utils.test.js"'
        type: string
        required: false
        default: 'tests/unit/'
      docsPath:
        description: 'The documentation file(s) to write to. e.g. "docs/" or multiple files separated by semicolons "docs/api;docs/API.md"'
        type: string
        required: false
        default: 'docs/'
      readmeFile:
        description: 'The README file to review (for context only). e.g. "README.md"'
        type: string
        required: false
        default: 'README.md'
      missionFile:
        description: 'The MISSION statement file. e.g. "MISSION.md"'
        type: string
        required: false
        default: 'MISSION.md'
      contributingFile:
        description: 'The CONTRIBUTING file to review. e.g. "CONTRIBUTING.md"'
        type: string
        required: false
        default: 'CONTRIBUTING.md'
      dependenciesFile:
        description: 'The dependencies file to review. e.g. "package.json"'
        type: string
        required: false
        default: 'package.json'
      formattingFile:
        description: 'The formatting file to review. e.g. ".prettierrc"'
        type: string
        required: false
        default: '.prettierrc'
      lintingFile:
        description: 'The linting file to review. e.g. "eslint.config.js"'
        type: string
        required: false
        default: 'eslint.config.js'
      branchPrefix:
        description: 'The prefix for the issue branch. e.g. "agentic-lib-issue-".'
        type: string
        required: true
      buildScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm run build`'
        type: string
        required: false
        default: 'echo "No build script specified."'
      testScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm test`'
        type: string
        required: false
        default: 'npm test'
      mainScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm run start`'
        type: string
        required: false
        default: 'npm run start'
      model:
        description: 'The OpenAI model to use. e.g. "o3-mini"'
        type: string
        required: false
        default: ${{ vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation:
        description: 'The GitHub organisation to authenticate with for npm. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      promptFile:
        description: 'The file containing the prompt text. e.g. "AGENT-ISSUE-RESOLUTION.md"'
        type: string
        required: false
        default: 'AGENT-ISSUE-RESOLUTION.md'
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      iamRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      allowedFilepathPatterns:
        description: 'JSON array of filepath patterns that are allowed to be changed by agents. e.g. ["features/*", "library/*"]'
        type: string
        required: false
        default: '["features/*", "library/*", "src/lib/*", "tests/unit/*", "package.json", "README.md"]'
      agentConfigPath:
        description: 'The path to the agentic-lib.yml configuration file'
        type: string
        required: false
        default: '.github/agentic-lib.yml'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
    outputs:
      fixApplied:
        value: ${{ jobs.apply-issue-resolution.outputs.fixApplied }}
      message:
        value: ${{ jobs.apply-issue-resolution.outputs.message }}
      installAfterUpdateOutcome:
        value: ${{ jobs.apply-issue-resolution.outputs.installAfterUpdateOutcome }}
      ciAfterUpdateOutcome:
        value: ${{ jobs.apply-issue-resolution.outputs.ciAfterUpdateOutcome }}
      testAfterUpdateOutcome:
        value: ${{ jobs.apply-issue-resolution.outputs.testAfterUpdateOutcome }}
      mainAfterUpdateOutcome:
        value: ${{ jobs.apply-issue-resolution.outputs.mainAfterUpdateOutcome }}
      commitOutcome:
        value: ${{ jobs.apply-issue-resolution.outputs.commitOutcome }}
      postResolutionCommentOutcome:
        value: ${{ jobs.apply-issue-resolution.outputs.postResolutionCommentOutcome }}
      allValidationStepsSuccessful:
        value: ${{ jobs.apply-issue-resolution.outputs.allValidationStepsSuccessful }}
      branch:
        value: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}${{ inputs.issueNumber }}

jobs:
  apply-issue-resolution:
    runs-on: ubuntu-latest

    env:
      issueNumber: ${{ inputs.issueNumber || '' }}
      featuresPath: ${{ inputs.featuresPath || 'features/' }}
      srcPath: ${{ inputs.srcPath || '' }}
      testsPath: ${{ inputs.testsPath || '' }}
      docsPath: ${{ inputs.docsPath || '' }}
      readmeFile: ${{ inputs.readmeFile || 'README.md' }}
      missionFile: ${{ inputs.missionFile || 'MISSION.md' }}
      contributingFile: ${{ inputs.contributingFile || 'CONTRIBUTING.md' }}
      dependenciesFile: ${{ inputs.dependenciesFile || 'package.json' }}
      formattingFile: ${{ inputs.formattingFile || '.prettierrc' }}
      lintingFile: ${{ inputs.lintingFile || 'eslint.config.js' }}
      branch: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}${{ inputs.issueNumber }}
      buildScript: ${{ inputs.buildScript || 'npm run build' }}
      testScript: ${{ inputs.testScript || 'npm test' }}
      mainScript: ${{ inputs.mainScript || 'npm run start' }}
      mainScriptTimeout: '5m'
      model: ${{ inputs.model || vars.CHATGPT_API_MODEL || 'o3-mini' }}
      chatgptApiSecretKey: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      cache: ${{ inputs.cache || 'npm' }}
      promptFile: ${{ inputs.promptFile || 'AGENT-ISSUE-RESOLUTION.md' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      iamRoleArn: ${{ inputs.iamRoleArn || '' }}
      allowedFilepathPatterns: ${{ inputs.allowedFilepathPatterns || '["features/*", "library/*", "src/lib/*", "tests/unit/*", "package.json", "README.md"]' }}
      agentConfigPath: ${{ inputs.agentConfigPath || '.github/agentic-lib.yml' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ env.cache }}

      - name: Check GitHub authentication
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ github.ref }}

      - run: npm ci

      - name: List current features
        id: features
        shell: bash
        run: |
          output=$(find "${{ env.featuresPath }}" -maxdepth 1 -type f -name '*.md' -print -exec echo "# {}" \; -exec cat {} \; 2>&1 || echo 'none')
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: List dependencies
        id: list
        shell: bash
        run: |
          output=$(npm list 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Build project
        id: build
        shell: bash
        run: |
          output=$(${{ env.buildScript }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Run tests
        id: test
        shell: bash
        run: |
          output=$(${{ env.testScript }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Run main
        id: main
        shell: bash
        run: |
          output=$(timeout ${{ env.mainScriptTimeout }} ${{ env.mainScript }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: update-target
        id: update-target
        uses: actions/github-script@v7
        env:
          dependenciesListOutput: ${{ steps.list.outputs.output }}
          buildOutput: ${{ steps.build.outputs.output }}
          testOutput: ${{ steps.test.outputs.output }}
          mainOutput: ${{ steps.main.outputs.output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const currentFeatures = process.env.currentFeatures;
            const srcPath = process.env.srcPath;
            const testsPath = process.env.testsPath;
            const readmeFile = process.env.readmeFile;
            const missionFile = process.env.missionFile;
            const contributingFile = process.env.contributingFile;
            const dependenciesFile = process.env.dependenciesFile;
            const formattingFile = process.env.formattingFile;
            const lintingFile = process.env.lintingFile;
            const docsPath = process.env.docsPath;
            const model = process.env.model;
            const apiKey = process.env.chatgptApiSecretKey;
            const promptFile = process.env.promptFile;
            const issueNumberStr = process.env.issueNumber
            const issueNumber = (parseInt(issueNumberStr) ? parseInt(issueNumberStr) : "");;
            const dependenciesListOutput = process.env.dependenciesListOutput;
            const buildScript = process.env.buildScript;
            const buildOutput = process.env.buildOutput;
            const testScript = process.env.testScript;
            const testOutput = process.env.testOutput;
            const mainScript = process.env.mainScript;
            const mainOutput = process.env.mainOutput;
            const allowedFilepathPatterns = JSON.parse(process.env.allowedFilepathPatterns || '["features/*", "library/*", "src/lib/*", "tests/unit/*", "package.json", "README.md"]');
            const agentConfigPath = process.env.agentConfigPath;

            const fs = require('fs');
            const path = require('path');
            const OpenAI = require('openai').default;
            const { z } = require('zod');
            const { minimatch } = require('minimatch');
            require('dotenv').config();

            // Function to check if a file path matches any of the allowed patterns
            function isFilePathAllowed(filePath, writeableFilepaths) {
              // Ensure writeableFilepaths is an array
              const patterns = Array.isArray(writeableFilepaths) ? writeableFilepaths : String(writeableFilepaths).split(',');
              core.info(`Checking if file path '${filePath}' is allowed in writeableFilepaths: ${patterns}`);
              return patterns.some(pattern => (
                minimatch(filePath, pattern.trim()) || 
                minimatch(filePath, `${pattern.trim()}*`) || 
                minimatch(filePath, `${pattern.trim()}**`) || 
                minimatch(filePath, `${pattern.trim()}/**`)
              ));
            }

            if (!apiKey) { 
              core.setFailed("Missing CHATGPT_API_SECRET_KEY"); 
            }
            const openai = new OpenAI({ apiKey });

            core.info(`currentFeatures: "${currentFeatures}"`);
            core.info(`srcPath: "${srcPath}"`);
            core.info(`testsPath: "${testsPath}"`);
            core.info(`readmeFile: "${readmeFile}"`);
            core.info(`missionFile: "${missionFile}"`);
            core.info(`contributingFile: "${contributingFile}"`);
            core.info(`dependenciesFile: "${dependenciesFile}"`);
            core.info(`formattingFile: "${formattingFile}"`);
            core.info(`lintingFile: "${lintingFile}"`);
            core.info(`agentConfigPath: "${agentConfigPath}"`);

            // Handle multiple source files
            const srcFiles = srcPath.split(';');
            let sourceFileContents = {};
            for (const file of srcFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        sourceFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Source file '${fullPath}' from directory has been loaded (length ${sourceFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    sourceFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Source file '${trimmedFile}' has been loaded (length ${sourceFileContents[trimmedFile].length}).`);
                  }
                } else {
                  core.warning(`Source file '${trimmedFile}' does not exist.`);
                }
              } catch (e) {
                core.warning(`Error reading source file '${file}': ${e.message}`);
              }
            }

            // Handle multiple test files
            const testFiles = testsPath.split(';');
            let testFileContents = {};
            for (const file of testFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        testFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Test file '${fullPath}' from directory has been loaded (length ${testFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    testFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Test file '${trimmedFile}' has been loaded (length ${testFileContents[trimmedFile].length}).`);
                  }
                } else {
                  core.warning(`Test file '${trimmedFile}' does not exist.`);
                }
              } catch (e) {
                core.warning(`Error reading test file '${file}': ${e.message}`);
              }
            }

            const readmeFileContent = fs.readFileSync(readmeFile, 'utf8');

            // Handle multiple docs files
            const docsFiles = docsPath.split(';');
            let docsFileContents = {};
            for (const file of docsFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        docsFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Docs file '${fullPath}' from directory has been loaded (length ${docsFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    docsFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Docs file '${trimmedFile}' has been loaded (length ${docsFileContents[trimmedFile].length}).`);
                  }
                } else {
                  // Create directory if it doesn't exist
                  const docsDir = path.dirname(trimmedFile);
                  if (!fs.existsSync(docsDir)) {
                    fs.mkdirSync(docsDir, { recursive: true });
                  }
                  docsFileContents[trimmedFile] = '';
                  core.info(`Docs file '${trimmedFile}' does not exist and will be created.`);
                }
              } catch (e) {
                core.warning(`Error reading docs file '${file}': ${e.message}`);
              }
            }
            const missionFileContent = fs.readFileSync(missionFile, 'utf8');
            const contributingFileContent = fs.readFileSync(contributingFile, 'utf8');
            const dependenciesFileContent = fs.readFileSync(dependenciesFile, 'utf8');
            const formattingFileContent = fs.readFileSync(formattingFile, 'utf8');
            const lintingFileContent = fs.readFileSync(lintingFile, 'utf8');
            const promptContent = fs.readFileSync(promptFile, 'utf8');

            // Read the agent config file
            let agentConfigContent = '';
            try {
              if (fs.existsSync(agentConfigPath)) {
                agentConfigContent = fs.readFileSync(agentConfigPath, 'utf8');
                core.info(`Agent config file '${agentConfigPath}' has been loaded (length ${agentConfigContent.length}).`);
              } else {
                core.warning(`Agent config file '${agentConfigPath}' does not exist.`);
              }
            } catch (e) {
              core.warning(`Error reading agent config file '${agentConfigPath}': ${e.message}`);
            }

            // Log messages for source, test, and docs files are now handled in the file loading loops above
            core.info(`Readme file '${readmeFile}' has been loaded (length ${readmeFileContent.length}).`);
            core.info(`Dependencies file '${dependenciesFile}' has been loaded (length ${dependenciesFileContent.length}).`);
            core.info(`Formatting file '${formattingFile}' has been loaded (length ${formattingFileContent.length}).`);
            core.info(`Linting file '${lintingFile}' has been loaded (length ${lintingFileContent.length}).`);
            core.info(`Prompt file '${promptFile}' has been loaded (length ${promptContent.length}).`);

            core.info(`Retrieving issue ${issueNumber} details...`);
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            core.info(`Issue title: ${issue.data.title}`);
            const issueTitle = issue.data.title;
            const issueDescription = issue.data.body;
            const issueComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const issueCommentsText = issueComments.data
              .map(comment => `Author:${comment.user.login}, Created:${comment.created_at}, Comment: ${comment.body}`)
              .join('\n');

            const prompt = `
            ${promptContent}

            Consider the following when refining your response:
            * Current feature names and specifications in the repository
            * Source file content
            * Test file content
            * Documentation file content
            * README file content
            * MISSION file content
            * Contributing file content
            * Dependencies file content
            * Formatting file content
            * Linting file content
            * Agent configuration file content
            * Issue details
            * Dependency list
            * Build output
            * Test output
            * Main execution output

            Current feature names and specifications (for context, read only):
            CURRENT_FEATURES_START
            ${currentFeatures}
            CURRENT_FEATURES_END

            Source files (to be updated if necessary):
            SOURCE_FILES_START
            ${Object.entries(sourceFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            SOURCE_FILES_END

            Test files (to be updated if necessary):
            TEST_FILES_START
            ${Object.entries(testFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            TEST_FILES_END

            Documentation files (to be updated if necessary):
            DOCS_FILES_START
            ${Object.entries(docsFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            DOCS_FILES_END

            README file (for context, read only): ${readmeFile}
            README_FILE_START
            ${readmeFileContent}
            README_FILE_END

            MISSION file (for context, read only): ${missionFile}
            MISSION_FILE_START
            ${missionFileContent}
            MISSION_FILE_END

            Contributing file (for context, read only): ${contributingFile}
            CONTRIBUTING_FILE_START
            ${contributingFileContent}
            CONTRIBUTING_FILE_END

            Dependencies file (for context, read only): ${dependenciesFile}
            DEPENDENCIES_FILE_START
            ${dependenciesFileContent}
            DEPENDENCIES_FILE_END

            Formatting file (for context, read only): ${formattingFile}
            FORMATTING_FILE_START
            ${formattingFileContent}
            FORMATTING_FILE_END

            Linting file (for context, read only): ${lintingFile}
            LINTING_FILE_START
            ${lintingFileContent}
            LINTING_FILE_END

            Agent configuration file (for context, read only): ${agentConfigPath}
            AGENT_CONFIG_FILE_START
            ${agentConfigContent}
            AGENT_CONFIG_FILE_END

            Issue details:
            ISSUE_START
            title: ${issueTitle}
            description:
            ${issueDescription}
            comments:
            ${issueCommentsText}
            ISSUE_END            

            Dependencies list from command: npm list
            DEPENDENCIES_LIST_START
            ${dependenciesListOutput}
            DEPENDENCIES_LIST_END    

            Build output from command: ${buildScript}
            BUILD_OUTPUT_START
            ${buildOutput}
            BUILD_OUTPUT_END      

            Test output from command: ${testScript}
            TEST_OUTPUT_START
            ${testOutput}
            TEST_OUTPUT_END            

            Main execution output from command: ${mainScript}
            MAIN_OUTPUT_START
            ${mainOutput}
            MAIN_OUTPUT_END    

            Please produce updated versions of the files that resolve the issue.
            Note that the README.md file is provided for context only - any documentation changes should be written to the documentation files.
            The source files, test files, and documentation files can be individual files or directories containing multiple files.
            Answer strictly with a JSON object following this schema:

            {
              "message": "A short sentence explaining the change applied suitable for a commit message.",
              "updatedFiles": {
                "src/orderParser.js": "The entire new content of the file, with all necessary changes applied.",
                "tests/orderParser.test.js": "The entire new content of the file, with all necessary changes applied.",
                "docs/USAGE.md": "The entire new content of the file, with all necessary changes applied."
              }
            }

            You can include any number of files in the updatedFiles object. Each file will be checked against the allowedFilepathPatterns before being written.

            Ensure valid JSON.
            `;

            const ResponseSchema = z.object({ 
              message: z.string(),
              updatedFiles: z.record(z.string())
            });

            // Define the function schema for functional calling
            const applyIssueResolutionToSource = [{
              type: "function",
              function: {
                name: "applyIssueResolutionToSource",
                description: "Return updated versions of files along with a commit message. Use the provided file contents and supporting context to generate the updates.",
                parameters: {
                  type: "object",
                  properties: {
                    message: {
                      type: "string",
                      description: "A short sentence explaining the change applied suitable for a commit message."
                    },
                    updatedFiles: {
                      type: "object",
                      description: "An object where keys are file paths and values are the entire new content of those files, with all necessary changes applied.",
                      additionalProperties: {
                        type: "string"
                      }
                    }
                  },
                  required: ["message", "updatedFiles"],
                  additionalProperties: false
                },
                strict: false
              }
            }];

            // Call OpenAI using the function calling format via the tools parameter
            const response = await openai.chat.completions.create({
              model,
              messages: [
                { role: "system", content: "You are a code fixer that returns updated file contents to resolve an issue. You can update multiple files by specifying their paths and contents in the updatedFiles object. The source files, test files, and documentation files can be individual files or directories containing multiple files. Answer strictly with a JSON object that adheres to the provided function schema." },
                { role: "user", content: prompt }
              ],
              tools: applyIssueResolutionToSource
            });

            let fixApplied;
            let result;
            // Check if the model made a function call; if so, parse its arguments.
            if (response.choices[0].message.tool_calls && response.choices[0].message.tool_calls.length > 0) {
              try {
                result = JSON.parse(response.choices[0].message.tool_calls[0].function.arguments);
              } catch (e) {
                fixApplied = false;
                core.setFailed(`Failed to parse function call arguments: ${e.message}`);
              }
            } else if (response.choices[0].message.content) {
              try {
                result = JSON.parse(response.choices[0].message.content);
              } catch (e) {
                fixApplied = false;
                core.setFailed(`Failed to parse response content: ${e.message}`);
              }
            } else {
              fixApplied = false;
              core.setFailed("No valid response received from OpenAI.");
            }

            try {
              core.info("raw response start: **********************************************");
              core.info(`raw response (${(result ? result.length : "undefined")} characters): "${result}"`);
              core.info("raw response end: **********************************************");
              const parsed = ResponseSchema.parse(result);
              core.info(`parsed response: "${JSON.stringify(parsed)}"`);
              // Sanitize commit message: retain only alphanumerics, spaces, and basic URL-safe punctuation (-, _, ., ~)
              const sanitizedMessage = parsed.message.replace(/[^A-Za-z0-9 \-\_\.\~]/g, '').replace(/\s+/g, ' ').trim();
              core.setOutput("message", sanitizedMessage);
              core.info(`message: "${sanitizedMessage}"`);

              // Handle updated files
              if (parsed.updatedFiles && Object.keys(parsed.updatedFiles).length > 0) {
                for (const [filePath, fileContent] of Object.entries(parsed.updatedFiles)) {
                  if (fileContent === "delete") {
                    if (isFilePathAllowed(filePath, allowedFilepathPatterns)) {
                      if (fs.existsSync(filePath)) {
                        fs.unlinkSync(filePath);
                        fixApplied = true;
                        core.info(`File '${filePath}' has been deleted.`);
                      } else {
                        core.warning(`File '${filePath}' does not exist, cannot delete.`);
                      }
                    } else {
                      core.warning(`File '${filePath}' is not in the allowed filepath patterns. Skipping deletion.`);
                    }
                  } else if (fileContent && fileContent.length > 1) {
                    if (isFilePathAllowed(filePath, allowedFilepathPatterns)) {
                      // Create directory if it doesn't exist
                      const fileDir = path.dirname(filePath);
                      if (!fs.existsSync(fileDir)) {
                        fs.mkdirSync(fileDir, { recursive: true });
                      }
                      fs.writeFileSync(filePath, fileContent, 'utf8');
                      fixApplied = true;
                      core.info(`File '${filePath}' has been updated (length ${fileContent.length}).`);
                    } else {
                      core.warning(`File '${filePath}' is not in the allowed filepath patterns. Skipping update.`);
                    }
                  }
                }
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: parsed.message
              });
            } catch (e) {
              fixApplied = false;
              core.setFailed(`Failed to validate or process the response: ${e.message}`);
            }

            core.setOutput("fixApplied", fixApplied);
            core.setOutput("usage", JSON.stringify(response.usage));
            core.info(`fixApplied: "${fixApplied}"`);
            core.info(`usage: "${JSON.stringify(response.usage)}"`);
            core.info(`response: "${JSON.stringify(response)}"`);

      - name: Examine the git working copy
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v
          IFS=';' read -ra SRC_FILES <<< "${{ env.srcPath }}"
          for file in "${SRC_FILES[@]}"; do
            echo "=== Git diff for source file: $file ==="
            git diff "$file" || true
            echo ""
          done
          IFS=';' read -ra TEST_FILES <<< "${{ env.testsPath }}"
          for file in "${TEST_FILES[@]}"; do
            echo "=== Git diff for test file: $file ==="
            git diff "$file" || true
            echo ""
          done
          IFS=';' read -ra DOCS_FILES <<< "${{ env.docsPath }}"
          for file in "${DOCS_FILES[@]}"; do
            echo "=== Git diff for docs file: $file ==="
            git diff "$file" || true
            echo ""
          done

      - run: rm -rf node_modules

      - name: install-after-update
        id: install-after-update
        run: npm install

      - name: ci-after-update
        id: ci-after-update
        continue-on-error: true
        run: npm ci

      - name: Tear down .npmrc
        continue-on-error: true
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: rm -f .npmrc

      - name: test-after-update
        id: test-after-update
        continue-on-error: true
        shell: bash
        run: |
          ${{ env.testScript }}

      - name: Run main after update
        id: main-after-update
        continue-on-error: true
        shell: bash
        run: |
          timeout ${{ env.mainScriptTimeout }} ${{ env.mainScript }}

      - name: Commit to new branch
        id: commit
        continue-on-error: true
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v
          git switch -c '${{ env.branch }}'
          git add -v --all
          git diff '${{ env.srcPath }}'
          git commit -m '${{ steps.update-target.outputs.message }} (working on #${{ env.issueNumber }})'
          git push --set-upstream origin '${{ env.branch }}' -v
          git status -v

      - name: Post Resolution Comment
        id: post-resolution-comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumberStr = process.env.issueNumber;
            const issueNumber = (parseInt(issueNumberStr) ? parseInt(issueNumberStr) : "");
            const branchName = process.env.branch;
            const repository = process.env.GITHUB_REPOSITORY;
            const branchUrl = `https://github.com/${repository}/tree/${branchName}`;
            const body = `${branchUrl}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: body
            });
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              assignees: [ context.actor ]
            });

      - name: Extract Results
        if: always()
        id: results
        uses: actions/github-script@v7
        env:
            fixApplied: ${{ steps.update-target.outputs.fixApplied }}
            message: ${{ steps.update-target.outputs.message }}
            installAfterUpdateOutcome: ${{ steps.install-after-update.outcome }}
            ciAfterUpdateOutcome: ${{ steps.ci-after-update.outcome }}
            testAfterUpdateOutcome: ${{ steps.test-after-update.outcome }}
            mainAfterUpdateOutcome: ${{ steps.main-after-update.outcome }}
            commitOutcome: ${{ steps.commit.outcome }}
            postResolutionCommentOutcome: ${{ steps.post-resolution-comment.outcome }}
        with:
          script: |
            const fixApplied = process.env.fixApplied === 'true';
            const message = process.env.message;
            const installAfterUpdateOutcome = process.env.installAfterUpdateOutcome;
            const ciAfterUpdateOutcome = process.env.ciAfterUpdateOutcome;
            const testAfterUpdateOutcome = process.env.testAfterUpdateOutcome;
            const mainAfterUpdateOutcome = process.env.mainAfterUpdateOutcome;
            const commitOutcome = process.env.commitOutcome;
            const postResolutionCommentOutcome = process.env.postResolutionCommentOutcome;
            const allValidationStepsSuccessful = installAfterUpdateOutcome === "success" && ciAfterUpdateOutcome === "success" && testAfterUpdateOutcome === "success" && mainAfterUpdateOutcome === "success" && commitOutcome === "success" && postResolutionCommentOutcome === "success";
            core.setOutput('fixApplied', fixApplied);
            core.setOutput('message', message);
            core.setOutput('installAfterUpdateOutcome', installAfterUpdateOutcome);
            core.setOutput('ciAfterUpdateOutcome', ciAfterUpdateOutcome);
            core.setOutput('testAfterUpdateOutcome', testAfterUpdateOutcome);
            core.setOutput('mainAfterUpdateOutcome', mainAfterUpdateOutcome);
            core.setOutput('commitOutcome', commitOutcome);
            core.setOutput('postResolutionCommentOutcome', postResolutionCommentOutcome);
            core.setOutput('allValidationStepsSuccessful', allValidationStepsSuccessful);
            core.info(`fixApplied: "${fixApplied}"`);
            core.info(`message: "${message}"`);
            core.info(`installAfterUpdateOutcome: "${installAfterUpdateOutcome}"`);
            core.info(`ciAfterUpdateOutcome: "${ciAfterUpdateOutcome}"`);
            core.info(`testAfterUpdateOutcome: "${testAfterUpdateOutcome}"`);
            core.info(`mainAfterUpdateOutcome: "${mainAfterUpdateOutcome}"`);
            core.info(`commitOutcome: "${commitOutcome}"`);
            core.info(`postResolutionCommentOutcome: "${postResolutionCommentOutcome}"`);
            core.info(`allValidationStepsSuccessful: "${allValidationStepsSuccessful}"`);

    outputs:
      fixApplied: ${{ steps.results.outputs.fixApplied }}
      message: ${{ steps.results.outputs.message }}
      installAfterUpdateOutcome: ${{ steps.results.outputs.installAfterUpdateOutcome }}
      ciAfterUpdateOutcome: ${{ steps.results.outputs.ciAfterUpdateOutcome }}
      testAfterUpdateOutcome: ${{ steps.results.outputs.testAfterUpdateOutcome }}
      mainAfterUpdateOutcome: ${{ steps.results.outputs.mainAfterUpdateOutcome }}
      commitOutcome: ${{ steps.results.outputs.commitOutcome }}
      postResolutionCommentOutcome: ${{ steps.results.outputs.postResolutionCommentOutcome }}
      allValidationStepsSuccessful: ${{ steps.results.outputs.allValidationStepsSuccessful }}
