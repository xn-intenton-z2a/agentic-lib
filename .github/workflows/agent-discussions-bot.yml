# .github/workflows/discussion-to-seed-repository.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: discussions-bot
concurrency: discussions-bot
run-name: "discussion to seed repository"

on:
  discussion:
    types: [created, labeled]
  workflow_dispatch:
    inputs:
      discussionTitle:
        description: 'The title of the discussion'
        required: false
        type: string
        default: ''
      discussionBody:
        description: 'The body of the discussion'
        required: false
        type: string
        default: ''
      discussionUrl:
        description: 'The URL of the discussion'
        required: false
        type: string
        default: ''
  workflow_call:
    inputs:
      discussionTitle:
        description: 'The title of the discussion'
        required: false
        type: string
        default: ''
      discussionBody:
        description: 'The body of the discussion'
        required: false
        type: string
        default: ''
      discussionUrl:
        description: 'The URL of the discussion'
        required: false
        type: string
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false

env:
  gitUserEmail: 'action@github.com'
  gitUserName: 'GitHub Actions[bot]'
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:
  agentic-lib:
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@main'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # TODO: For discussions events, only process events with an @ to the Bot
  # TODO: Read the Bot's handle from a repository variable

  process-discussion-post:
    if: ${{ (github.event_name == 'discussion' && github.event.discussion.labels != null && contains(github.event.discussion.labels.*.name, 'automated')) || github.event_name == 'workflow_call' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: discussion
        id: discussion
        uses: actions/github-script@v7
        with:
          script: |
            let title, body, url;

            if (context.eventName === 'discussion') {
              title = context.payload.discussion.title;
              body = context.payload.discussion.body;
              url = context.payload.discussion.html_url;
            } else {
              title = context.payload.inputs.discussionTitle || '';
              body = context.payload.inputs.discussionBody || '';
              url = context.payload.inputs.discussionUrl || '';
            }

            core.setOutput('title', title);
            core.setOutput('body', body);
            core.setOutput('url', url);
            core.info(`title: ${title}`);
            core.info(`body: ${body}`);
            core.info(`url: ${url}`);

    outputs:
      title: ${{ steps.discussion.outputs.title }}
      body: ${{ steps.discussion.outputs.body }}
      url: ${{ steps.discussion.outputs.url }}

  generate-simple-response:
    needs:
      - process-discussion-post
    runs-on: ubuntu-latest
    env:
      discussion: '${{ needs.process-discussion-post.outputs.title }} ${{ needs.process-discussion-post.outputs.body }}'
    steps:
      - name: Choose response
        id: response
        uses: actions/github-script@v7
        with:
          script: |
            const action = 'reply-without-action';
            const detail = process.env.discussion;
            const reply = `This is a placeholder response. The action is: ${action}.`;
            core.setOutput('action', action);
            core.setOutput('detail', detail);
            core.setOutput('reply', reply);
            core.info(`action: ${action}`);
            core.info(`detail: ${detail}`);
            core.info(`reply: ${reply}`);
    outputs:
      # Options: 'nop', 'reply-without-action', 'create-issue', 'create-feature', 'seed-repository'
      action: ${{ steps.response.outputs.action }}
      detail: '${{ steps.response.outputs.detail }}'
      reply: ${{ steps.response.outputs.reply }}

  # TODO: Delegate the response to a chat completion which uses the repository files and discussions as context
  # Create a new workflow which will gather the same context as wfr-completion-review-issue.yml plus all the discussions and comments and the last 10 commits
  # Also use the same style for the called workflow as wfr-completion-review-issue.yml
  generate-response:
    needs:
      - process-discussion-post
    runs-on: ubuntu-latest
    env:
      discussion: '${{ needs.process-discussion-post.outputs.title }} ${{ needs.process-discussion-post.outputs.body }}'
    steps:
      - name: Choose response
        id: response
        uses: actions/github-script@v7
        with:
          script: |
            const action = 'reply-without-action';
            const detail = process.env.discussion;
            const reply = `This is a placeholder response. The action is: ${action}.`;
            core.setOutput('action', action);
            core.setOutput('detail', detail);
            core.setOutput('reply', reply);
            core.info(`action: ${action}`);
            core.info(`detail: ${detail}`);
            core.info(`reply: ${reply}`);
    outputs:
      # Options: 'nop', 'reply-without-action', 'create-issue', 'create-feature', 'seed-repository'
      action: ${{ steps.response.outputs.action }}
      detail: '${{ steps.response.outputs.detail }}'
      reply: ${{ steps.response.outputs.reply }}

  post-reply:
    needs:
    - process-discussion-post
    - generate-response
    if: ${{ needs.generate-response.outputs.action != 'nop' && needs.generate-response.outputs.reply != '' }}
    runs-on: ubuntu-latest
    steps:
    - name: Post reply
      id: post-reply
      uses: actions/github-script@v7
      env:
         url: ${{ needs.process-discussion-post.outputs.url }}
         reply: ${{ needs.generate-response.outputs.reply }}
      with:
        script: |
            const discussionUrl = process.env.url;
            const reply = process.env.reply;

            // If this was triggered by a discussion event, we can get the discussion ID directly
            if (context.eventName === 'discussion') {
              const discussionId = context.payload.discussion.node_id;
              core.info(`Posting reply to discussion with ID: ${discussionId}`);

              // Use the GraphQL API to add a comment to the discussion
              const response = await github.graphql(`
                mutation {
                  addDiscussionComment(input: {
                    discussionId: "${discussionId}",
                    body: "${reply.replace(/"/g, '\\"')}"
                  }) {
                    comment {
                      id
                    }
                  }
                }
              `);

              core.setOutput('response', JSON.stringify(response));
              core.info(`Response: ${JSON.stringify(response)}`);
            } else if (discussionUrl) {
              // If we have a URL but not a direct event, try to extract the discussion number
              // Example URL: https://github.com/owner/repo/discussions/123
              const urlParts = discussionUrl.split('/');
              const discussionNumber = urlParts[urlParts.length - 1];

              if (discussionNumber && !isNaN(discussionNumber)) {
                core.info(`Extracted discussion number: ${discussionNumber}`);

                // Use the REST API to add a comment to the discussion
                const response = await github.rest.discussions.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  discussion_number: parseInt(discussionNumber),
                  body: reply
                });

                core.setOutput('response', JSON.stringify(response.data));
                core.info(`Response: ${JSON.stringify(response.data)}`);
              } else {
                core.setFailed(`Could not extract discussion number from URL: ${discussionUrl}`);
              }
            } else {
              core.setFailed('No discussion ID or URL provided');
            }

  library-to-feature:
    needs:
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'create-feature' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-feature-to-issue.yml@main'
    with:
      featureName: ${{ needs.generate-response.outputs.detail }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  feature-to-issue:
    needs:
      - process-discussion-post
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'create-issue' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-feature-to-issue.yml@main'
    with:
      featureName: ${{ needs.generate-response.outputs.detail }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  ready-issue:
    needs:
      - feature-to-issue
      - process-discussion-post
    if: ${{ needs.generate-response.outputs.action == 'create-issue' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-issue-to-ready-issue.yml@main'
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  #issue-to-code:
  #  needs:
  #    - ready-issue
  #    - generate-response
  #  if: ${{ needs.generate-response.outputs.action == 'create-issue' }}
  #  permissions:
  #    contents: write
  #    pull-requests: write
  #    checks: write
  #    issues: write
  #    id-token: write
  #    pages: write
  #  uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-issue-to-code.yml@main'
  #  secrets:
  #    PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #    CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  seed-repository:
    needs:
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/utils-seed-repository.yml@main'
    with:
      mission: ${{ needs.generate-response.outputs.detail }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  trace-discussion:
    needs:
      - process-discussion-post
      - generate-response
      - seed-repository
      - agentic-lib
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' }}
    runs-on: ubuntu-latest
    steps:
      - name: discussion
        id: discussion
        uses: actions/github-script@v7
        env:
          discussionTitle: ${{ needs.process-discussion-post.outputs.title }}
          discussionBody: ${{ needs.process-discussion-post.outputs.body }}
          discussionUrl: ${{ needs.process-discussion-post.outputs.url }}
          seedDiscussionFilepath: ${{ needs.agentic-lib.outputs.seedDiscussionFilepath }}
        with:
          script: |
            const title = process.env.discussionTitle;
            const body = process.env.discussionBody;
            const url = process.env.discussionUrl;
            const seedDiscussionFilepath = process.env.seedDiscussionFilepath;

            core.info(`title: ${title}`);
            core.info(`body: ${body}`);
            core.info(`url: ${url}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of seedDiscussionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(seedDiscussionFilepath))) {
              fs.mkdirSync(path.dirname(seedDiscussionFilepath), { recursive: true });
            }
            const traceContent = `${url}\n\n# Discussion Seed Trace\n\nThis repository was seeded from a GitHub Discussion.\n\n- **Title**: ${title}\n- **URL**: ${url}\n- **Created at**: ${new Date().toISOString()}\n`;
            fs.writeFileSync(path.join(docsDir, seedDiscussionFilepath), traceContent);

            core.info(`Trace file saved to ${seedDiscussionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git add  ${{ needs.agentic-lib.outputs.seedDiscussionFilepath }}
          git commit -m "Add discussion seed trace" || echo "No changes to commit"
          git push

  # TODO: Job to switch up to build mode when kicking off actity

  # TODO: Job to drop down to maintenance mode if the discussion topic is resolved.

  # TODO: Post as the Bot's app account.