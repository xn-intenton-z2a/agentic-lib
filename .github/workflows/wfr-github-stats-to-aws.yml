# .github/workflows/wfr-github-publish-stats.yml
#
#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ stats to AWS

on:
  workflow_call:
    inputs:
      public:
        description: 'The public directory to use. e.g. "public"'
        type: string
        required: false
        default: 'public'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      npmAuthOrganisation:
        description: 'The npm auth organisation to use. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
      lastActivityName:
        description: 'The name of the last activity. e.g. "stats"'
        type: string
        required: false
      lastActivityBranchName:
        description: 'The name of the last activity branch. e.g. "main"'
        type: string
        required: false
      branchPrefix:
        description: 'The prefix for the issue branch. e.g. "agentic-lib-issue-"'
        type: string
        required: false
        default: 'agentic-lib-issue-'
      nextIssue:
        description: 'The next issue to review. e.g. "123 My issue automated"'
        type: string
        required: false
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      s3WebsiteBucketUrl:
        description: 'The S3 website bucket URL with prefix to use. e.g. "s3://my-website-bucket/"'
        type: string
        required: false
        default: ''
      iamActionsRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      iamStatsBucketWriterRoleArn:
        description: 'The ARN of the IAM role to assume when writing to the stats bucket. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      iamPublicWebsiteStatsBucketWriterRoleArn:
        description: 'The ARN of the IAM role to assume when writing to the public website stats bucket. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      thisRepositoryStatsUrl:
        description: 'The URL of the latest stats page. e.g. "https://xn-intenton-z2a.github.io/agentic-lib/latest.html"'
        value: ${{ jobs.stats.outputs.thisRepositoryStatsUrl }}

jobs:
  stats:
    runs-on: ubuntu-latest

    env:
      public: 'temp-public'  # Changed to not write to ./public
      cache: ${{ inputs.cache || 'npm' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || '' }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || '' }}
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}
      nextIssue: ${{ inputs.nextIssue || '' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      s3WebsiteBucketUrl: ${{ inputs.s3WebsiteBucketUrl || '' }}
      iamActionsRoleArn: ${{ inputs.iamActionsRoleArn || '' }}
      iamStatsBucketWriterRoleArn: ${{ inputs.iamStatsBucketWriterRoleArn || '' }}
      iamPublicWebsiteStatsBucketWriterRoleArn: ${{ inputs.iamPublicWebsiteStatsBucketWriterRoleArn || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: engine
        id: engine
        shell: bash
        run: |
          engine=$(grep '^schedule:' .github/agentic-lib.yml | awk '{print $2}')
          echo "engine=${engine}"
          echo "engine=${engine}" >> $GITHUB_OUTPUT

      - name: Generate raw JSON statistics file
        id: generate-json
        uses: actions/github-script@v7
        env:
          engine: ${{ steps.engine.outputs.engine }}
          lastActivityName: ${{ env.lastActivityName }}
          lastActivityBranchName: ${{ env.lastActivityBranchName }}
          nextIssue: ${{ env.nextIssue }}
          branchPrefix: ${{ env.branchPrefix }}
          public: ${{ env.public }}
          repositoryName: ${{ github.event.repository.name }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const now = new Date();

            const { owner, repo } = context.repo;
            const engine = process.env.engine;
            const lastActivityName = process.env.lastActivityName;
            const lastActivityBranchName = process.env.lastActivityBranchName;
            const nextIssue = process.env.nextIssue;
            const branchPrefix = process.env.branchPrefix;

            // Open issues count
            const { data: issuesResp } = await github.rest.issues.listForRepo({ owner, repo, state: "open", per_page: 256 });

            // Issues closed in last hour and day
            const sinceOneHour = new Date(now.getTime() - (60 * 60 * 1000)).toISOString();
            const { data: closedHourResp } = await github.rest.issues.listForRepo({ owner, repo, state: "closed", since: sinceOneHour, per_page: 256 });
            const sinceOneDay = new Date(now.getTime() - (24 * 60 * 60 * 1000)).toISOString();
            const { data: closedDayResp } = await github.rest.issues.listForRepo({ owner, repo, state: "closed", since: sinceOneDay, per_page: 256 });

            // Open pull requests with age in minutes
            const { data: pullsResp } = await github.rest.pulls.list({ owner, repo, state: "open", per_page: 256 });
            const prDetails = pullsResp.map(pr => {
              const createdAt = new Date(pr.created_at);
              const ageMinutes = Math.floor((now - createdAt) / (1000 * 60));
              return { title: pr.title, ageMinutes };
            });
            const averagePRAge = prDetails.length > 0 ? Math.floor(prDetails.reduce((sum, pr) => sum + pr.ageMinutes, 0) / prDetails.length) : 0;

            // Repository push details
            const { data: repoResp } = await github.rest.repos.get({ owner, repo });
            const pushedAt = new Date(repoResp.pushed_at);
            const { data: mainBranchResp } = await github.rest.repos.getBranch({ owner, repo, branch: "main" });
            const mainPushedAt = new Date(mainBranchResp.commit.commit.author.date);

            // Commits in the last hour and day
            const { data: commitsLastHourResp }  = await github.rest.repos.listCommits({ owner, repo, since: sinceOneHour, per_page: 256 });
            const { data: commitsLastDayResp } = await github.rest.repos.listCommits({ owner, repo, since: sinceOneDay, per_page: 256 });

            // Last 5 commits on main
            const { data: lastFiveCommitsResp } = await github.rest.repos.listCommits({ owner, repo, sha: "main", per_page: 5 });
            const lastFiveCommitMessages = lastFiveCommitsResp.map(commit => {
              const commitDate = new Date(commit.commit.author.date);
              const hh = commitDate.getHours().toString().padStart(2, '0');
              const mm = commitDate.getMinutes().toString().padStart(2, '0');
              const message = commit.commit.message.length > 64 ? commit.commit.message.substring(0, 64) + "..." : commit.commit.message;
              return { time: `${hh}:${mm}`, message };
            });

            // Branches excluding "main" and "github-pages"
            const { data: branchesResp } = await github.rest.repos.listBranches({ owner, repo, per_page: 256 });
            const branchData = branchesResp.filter(branch => branch.name !== "main" && branch.name !== "github-pages");
            const branchDetails = await Promise.all(branchData.map(async branch => {
              const { data: branchResp } = await github.rest.repos.getBranch({ owner, repo, branch: branch.name });
              const lastCommitDate = new Date(branchResp.commit.commit.author.date);
              const minutesSinceLastCommit = Math.floor((now - lastCommitDate) / (1000 * 60));
              let issueNumber = '';
              let issueTitle = "";
              let issueLabels = "";
              const issueNumberMatch = branch.name.match(new RegExp(branchPrefix + "(\\d+)"));
              if (issueNumberMatch && parseInt(issueNumberMatch[1])) {
                issueNumber = issueNumberMatch[1];
                const { data: issue } = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: parseInt(issueNumber)
                });
                if (issue) {
                  issueTitle = issue.title;
                  issueLabels = issue.labels.map(label => label.name).join(', ');
                }
              }  
              return { branch: branch.name, issueNumber, issueTitle, issueLabels, minutesSinceLastCommit };
            }));
            const averageBranchAge = branchDetails.length > 0 ? Math.floor(branchDetails.reduce((sum, branch) => sum + branch.minutesSinceLastCommit, 0) / branchDetails.length) : 0;

            let checks = [];
            for (const branch of branchesResp) {
              core.info(`Checking branch: ${branch.name}`);
              try {
                const { data: branchResp } = await github.rest.repos.getBranch({ owner, repo, branch: branch.name });
                if( branchResp ) {
                  const commitSha = branchResp.commit.sha;
                  try {
                    const { data: branchChecks } = await github.rest.checks.listForRef({
                      owner,
                      repo,
                      ref: commitSha,
                    });
                    if (branchChecks && branchChecks.check_runs) {
                      const checkRuns = branchChecks.check_runs.map(check => {
                        return {
                          ...check,
                          branchName: branch.name,
                          branch
                        };
                      });
                      checks.push(...checkRuns);
                    } else {
                      core.info(`No check runs found for branch ${branch.name}.`);
                    }
                  } catch (checkError) {
                    core.warning(`Error fetching check runs for branch ${branch.name}: ${checkError.message}`);
                  }
                } else {
                  core.info(`Branch ${branch.name} not found.`);
                }
              } catch (branchError) {
                core.warning(`Error fetching branch ${branch.name}: ${branchError.message}`);
              }
            }

            const jsonData = { 
              owner, 
              repo,
              engine,
              agenticLib: {
                schedule: engine
              },
              lastActivityName,
              lastActivityBranchName,
              repository: {
                count: repoResp.length,
                details: repoResp,
                owner, 
                repo,
                lastActivityName,
                lastActivityBranchName
              },
              nextIssue,
              openIssues: issuesResp.length,
              issuesClosedLastHour: closedHourResp.length,
              issuesClosedLastDay: closedDayResp.length,
              issues: {
                open: {
                  count: issuesResp.length, 
                  details: issuesResp,
                },
                closed: {
                  count: closedDayResp.length, 
                  details: closedDayResp
                },
                nextIssue,
                openIssues: issuesResp.length,
                issuesClosedLastHour: closedHourResp.length,
                issuesClosedLastDay: closedDayResp.length
              },
              openPRs: prDetails.length,
              averagePRAge: averagePRAge,
              prDetails: prDetails.map(pr => `[${pr.ageMinutes}m] ${pr.title}`),
              diffMinutes: Math.floor((now - pushedAt) / (1000 * 60)),
              diffMinutesMain: Math.floor((now - mainPushedAt) / (1000 * 60)),
              prs: {
                count: pullsResp.length, 
                details: pullsResp,
                openPRs: prDetails.length,
                averagePRAge: averagePRAge,
                prDetails: prDetails.map(pr => `[${pr.ageMinutes}m] ${pr.title}`),
                diffMinutes: Math.floor((now - pushedAt) / (1000 * 60)),
                diffMinutesMain: Math.floor((now - mainPushedAt) / (1000 * 60))
              },
              commitsLastHour: commitsLastHourResp.length,
              commitsLastDay: commitsLastDayResp.length,
              lastFiveCommitMessages: lastFiveCommitMessages.map(commit => `[${commit.time}] - ${commit.message}`),
              commits: {
                count: commitsLastDayResp.length, 
                details: commitsLastDayResp,
                commitsLastHour: commitsLastHourResp.length,
                commitsLastDay: commitsLastDayResp.length,
                lastFiveCommitMessages: lastFiveCommitMessages.map(commit => `[${commit.time}] - ${commit.message}`)
              },
              branches: { 
                count: branchDetails.length, 
                details: branchDetails.map(branch => `[${branch.minutesSinceLastCommit}m] ${branch.branch}`),
                countRaw: branchesResp.length, 
                detailsRaw: branchesResp,
                branchIssueDetails: branchDetails.map(branch => `[${branch.issueNumber}] ${branch.issueTitle} ${branch.issueLabels}`),
                averageBranchAge
              },
              checks: {
                count: checks.length,
                checks: checks,
                testStatusOnBranch: "PASS - placeholder",
                testsLastPassedMinutes: "15 - placeholder"
              },
              statsGeneratedAt: now.toISOString(),
              context,
              github
            };

            // Write JSON file
            const outputDir = process.env.public;
            if (!fs.existsSync(outputDir)) { fs.mkdirSync(outputDir); }
            const outputPath = path.join(outputDir, process.env.repositoryName + "-stats.json");
            fs.writeFileSync(outputPath, JSON.stringify(jsonData, null, 2), "utf8");

            core.info(`JSON stats generated at ${outputPath}.`);
            core.setOutput("jsonStatsPath", outputPath);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamActionsRoleArn }}
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamStatsBucketWriterRoleArn }}
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Upload JSON stats artifact to S3
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }} \
              ${{ env.s3BucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - run: aws s3 ls ${{ env.s3BucketUrl }} --summarize

      - name: Configure AWS Credentials (resetting back from the stats bucket writer role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamActionsRoleArn }}
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamPublicWebsiteStatsBucketWriterRoleArn }}
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Upload JSON stats artifact to S3 website bucket
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }} \
              ${{ env.s3WebsiteBucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - name: Upload website artefacts to S3 website bucket
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }}  \
              ${{ env.s3WebsiteBucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - run: aws s3 ls ${{ env.s3WebsiteBucketUrl }} --summarize

      - name: Output published website bucket pages URLs
        id: output-website-bucket-urls
        shell: bash
        run: |
          s3WebsiteBucketUrl='${{ env.s3WebsiteBucketUrl }}'
          bucket=$(echo "${s3WebsiteBucketUrl?}" | sed -e 's|s3://||' -e 's|/$||')
          baseUrl="http://${bucket?}.s3-website.eu-west-2.amazonaws.com/"
          allRespositoryStatsUrl="${baseUrl?}"
          echo "${allRespositoryStatsUrl?}"
          echo "::notice:: allRespositoryStatsUrl: ${allRespositoryStatsUrl?}"
          echo "allRespositoryStatsUrl=${allRespositoryStatsUrl?}" >> $GITHUB_OUTPUT

      - name: Upload JSON stats artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: stats-json
          path: ${{ steps.generate-json.outputs.jsonStatsPath }}

    outputs:
      thisRepositoryStatsUrl: ${{ steps.output-website-bucket-urls.outputs.allRespositoryStatsUrl }}
      websiteBucketUrl: ${{ steps.output-website-bucket-urls.outputs.allStatsUrl }}
