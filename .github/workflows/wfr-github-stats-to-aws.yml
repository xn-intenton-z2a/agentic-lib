# .github/workflows/wfr-github-stats-to-aws.yml
#
#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ stats to AWS

on:
  workflow_call:
    inputs:
      public:
        description: 'The public directory to use. e.g. "public"'
        type: string
        required: false
        default: 'public'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      npmAuthOrganisation:
        description: 'The npm auth organisation to use. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
      lastActivityName:
        description: 'The name of the last activity. e.g. "stats"'
        type: string
        required: false
      lastActivityBranchName:
        description: 'The name of the last activity branch. e.g. "main"'
        type: string
        required: false
      branchPrefix:
        description: 'The prefix for the issue branch. e.g. "agentic-lib-issue-"'
        type: string
        required: false
        default: 'agentic-lib-issue-'
      nextIssue:
        description: 'The next issue to review. e.g. "123 My issue automated"'
        type: string
        required: false
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      s3WebsiteBucketUrl:
        description: 'The S3 website bucket URL with prefix to use. e.g. "s3://my-website-bucket/"'
        type: string
        required: false
        default: ''
      iamActionsRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      iamStatsBucketWriterRoleArn:
        description: 'The ARN of the IAM role to assume when writing to the stats bucket. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      iamPublicWebsiteStatsBucketWriterRoleArn:
        description: 'The ARN of the IAM role to assume when writing to the public website stats bucket. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      thisRepositoryStatsUrl:
        description: 'The URL of the latest stats page. e.g. "https://xn-intenton-z2a.github.io/agentic-lib/latest.html"'
        value: ${{ jobs.stats.outputs.thisRepositoryStatsUrl }}

jobs:
  generate-stats-json:
    uses: xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-stats-json.yml@main
    with:
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || '' }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || '' }}
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}
      nextIssue: ${{ inputs.nextIssue || '' }}
      cache: ${{ inputs.cache || 'npm' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  stats:
    needs:
      - generate-stats-json
    runs-on: ubuntu-latest

    env:
      public: 'temp-public'  # Changed to not write to ./public
      cache: ${{ inputs.cache || 'npm' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || '' }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || '' }}
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}
      nextIssue: ${{ inputs.nextIssue || '' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      s3WebsiteBucketUrl: ${{ inputs.s3WebsiteBucketUrl || '' }}
      iamActionsRoleArn: ${{ inputs.iamActionsRoleArn || '' }}
      iamStatsBucketWriterRoleArn: ${{ inputs.iamStatsBucketWriterRoleArn || '' }}
      iamPublicWebsiteStatsBucketWriterRoleArn: ${{ inputs.iamPublicWebsiteStatsBucketWriterRoleArn || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: engine
        id: engine
        shell: bash
        run: |
          engine=$(grep '^schedule:' .github/agents/agentic-lib.yml | awk '{print $2}')
          echo "engine=${engine}"
          echo "engine=${engine}" >> $GITHUB_OUTPUT

      - name: Write JSON statistics to file
        id: generate-json
        uses: actions/github-script@v7
        env:
          public: ${{ env.public }}
          repositoryName: ${{ github.event.repository.name }}
          statsJson: ${{ needs.generate-stats-json.outputs.statsJson }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Parse the JSON data from the reusable workflow output
            const jsonData = JSON.parse(process.env.statsJson);

            // Write JSON file
            const outputDir = process.env.public;
            if (!fs.existsSync(outputDir)) { fs.mkdirSync(outputDir); }
            const outputPath = path.join(outputDir, process.env.repositoryName + "-stats.json");
            fs.writeFileSync(outputPath, JSON.stringify(jsonData, null, 2), "utf8");

            core.info(`JSON stats written to ${outputPath}.`);
            core.setOutput("jsonStatsPath", outputPath);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamActionsRoleArn }}
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamStatsBucketWriterRoleArn }}
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Upload JSON stats artifact to S3
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }} \
              ${{ env.s3BucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - run: aws s3 ls ${{ env.s3BucketUrl }} --summarize

      - name: Configure AWS Credentials (resetting back from the stats bucket writer role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamActionsRoleArn }}
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iamPublicWebsiteStatsBucketWriterRoleArn }}
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - name: Upload JSON stats artifact to S3 website bucket
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }} \
              ${{ env.s3WebsiteBucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - name: Upload website artefacts to S3 website bucket
        shell: bash
        run: |
          aws s3 cp \
              ${{ steps.generate-json.outputs.jsonStatsPath }}  \
              ${{ env.s3WebsiteBucketUrl }}${{ github.event.repository.name }}-stats.json \
          ;

      - run: aws s3 ls ${{ env.s3WebsiteBucketUrl }} --summarize

      - name: Output published website bucket pages URLs
        id: output-website-bucket-urls
        shell: bash
        run: |
          s3WebsiteBucketUrl='${{ env.s3WebsiteBucketUrl }}'
          bucket=$(echo "${s3WebsiteBucketUrl?}" | sed -e 's|s3://||' -e 's|/$||')
          baseUrl="http://${bucket?}.s3-website.eu-west-2.amazonaws.com/"
          allRespositoryStatsUrl="${baseUrl?}"
          echo "${allRespositoryStatsUrl?}"
          echo "::notice:: allRespositoryStatsUrl: ${allRespositoryStatsUrl?}"
          echo "allRespositoryStatsUrl=${allRespositoryStatsUrl?}" >> $GITHUB_OUTPUT

      - name: Generate random suffix
        id: random
        run: echo "suffix=$(date +%s%N)" >> $GITHUB_OUTPUT

      - name: Upload JSON stats artifact to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: stats-json-${{ steps.random.outputs.suffix }}
          path: ${{ steps.generate-json.outputs.jsonStatsPath }}

    outputs:
      thisRepositoryStatsUrl: ${{ steps.output-website-bucket-urls.outputs.allRespositoryStatsUrl }}
      websiteBucketUrl: ${{ steps.output-website-bucket-urls.outputs.allStatsUrl }}
