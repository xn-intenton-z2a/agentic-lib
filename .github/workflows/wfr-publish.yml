# .github/workflows/wfr-publish.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ Publish packages

on:
  workflow_call:
    inputs:
      versionIncrement:
        description: 'The Semantic Versioning segment to increment. One of: major | minor | patch | premajor | preminor | prepatch | prerelease.'
        required: true
        type: string
        default: 'prerelease'
      buildScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm run build`'
        type: string
        required: false
        default: 'echo "No build script specified."'
      releaseNotes:
        description: 'The release notes to use for the GitHub release. e.g. "Feature release."'
        type: string
        required: false
        default: 'Feature release.'
      npmAuthOrganisation:
        description: 'The GitHub organisation to authenticate with for npm. e.g. "xn-intenton-z2a"'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      releasedVersion:
        description: 'The version that was released. e.g. "1.0.1"'
        value: ${{ jobs.publish.outputs.releasedVersion }}
      newVersion:
        description: 'The version that was bumped to. e.g. "1.0.2-0"'
        value: ${{ jobs.publish.outputs.newVersion }}

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      versionIncrement: ${{ inputs.versionIncrement || 'prerelease' }}
      buildScript: ${{ inputs.buildScript || 'npm run build' }}
      releaseNotes: ${{ inputs.releaseNotes || 'Feature release.' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      gitCommitMessage: |
        ${{ inputs.gitCommitMessage || 'chore: dependency updates' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check GitHub authentication
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Install dependencies
        run: npm ci

      - name: Build project before publishing begins
        id: build
        shell: bash
        run: ${{ env.buildScript }}

      - name: Examine the git working copy (should have no changes)
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

      - name: released
        id: released
        if: ${{ env.versionIncrement == 'major' || env.versionIncrement == 'minor' || env.versionIncrement == 'patch' }}
        shell: bash
        run: |
          npm version ${{ env.versionIncrement }}
          ${{ env.buildScript }}
          npm publish --tag latest --access restricted
          git push --follow-tags
          releasedVersion=$(node -p "require('./package.json').version")
          echo "releasedVersion=${releasedVersion}" > $GITHUB_OUTPUT
          echo "releasedVersion=${releasedVersion}"

      - name: Create GitHub Release
        if: ${{ env.versionIncrement == 'major' || env.versionIncrement == 'minor' || env.versionIncrement == 'patch' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.released.outputs.releasedVersion }}
          name: Release ${{ steps.released.outputs.releasedVersion }}
          body: ${{ env.releaseNotes }}

      - name: Rotate to next prepatch version from a released version
        if: ${{ env.versionIncrement == 'major' || env.versionIncrement == 'minor' || env.versionIncrement == 'patch' }}
        shell: bash
        run: |
          npm version --no-git-tag-version prepatch

      - name: Rotate to next [premajor|preminor|prepatch|prerelease] version
        if: ${{ env.versionIncrement == 'premajor' || env.versionIncrement == 'preminor' || env.versionIncrement == 'prepatch' || env.versionIncrement == 'prerelease' }}
        shell: bash
        run: |
          npm version --no-git-tag-version ${{ env.versionIncrement }}

      - name: rotated
        id: rotated
        shell: bash
        run: |
          newVersion=$(node -p "require('./package.json').version")
          echo "newVersion=${newVersion}" > $GITHUB_OUTPUT
          echo "newVersion=${newVersion}"

      - name: Examine the git working copy
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

      - name: Run build after version bump
        run: ${{ env.buildScript }}

      - name: Examine the git working copy
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

      - name: Push version commit
        id: push
        shell: bash
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git add -v --all
          newVersion=$(node -p "require('./package.json').version")
          git commit -m "${newVersion?}"
          git push origin HEAD

      - name: Tear down .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: rm -f .npmrc

      - name: Upload package.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-json
          path: "./package.json"

      - name: Log final version
        shell: bash
        run: |
          echo "Final version: ${{ steps.rotated.outputs.newVersion }}"

    outputs:
      releasedVersion: ${{ steps.released.outputs.releasedVersion }}
      newVersion: ${{ steps.rotated.outputs.newVersion }}
