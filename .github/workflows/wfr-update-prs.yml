# .github/workflows/wfr-update-prs.yml
name: âˆž Update all PRs from the base branch

on:
  workflow_call:
    inputs:
      baseBranch:
        description: 'The base branch to compare the PRs against. e.g. "main"'
        type: string
        required: false
        default: 'main'
      pulls:
        description: 'The maximum number of PRs to process. e.g. "100"'
        type: string
        required: false
        default: '100'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: true

jobs:
  update-prs:
    runs-on: ubuntu-latest

    env:
      baseBranch: ${{ inputs.baseBranch || 'main' }}
      pulls: ${{ inputs.pulls || '100' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: List Open Pull Requests
        id: list-prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pullsPerPage = parseInt('${{ env.pulls }}', 10);
            
            const { data: pulls } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              per_page: pullsPerPage,
            });

            const prs = pulls.map(pr => ({
              number: pr.number,
              headRef: pr.head.ref,
              baseRef: pr.base.ref,
            }));

            const baseBranch = '${{ env.baseBranch }}';

            for (const pr of prs) {
              const prNumber = pr.number;
              const headRef = pr.headRef;

              core.info(`Processing PR #${prNumber} (branch ${headRef})`);

              // Compare the PR branch with main
              const compare = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: headRef,
                head: baseBranch,
              });

              if (compare.data.behind_by > 0) {
                core.info(`PR #${prNumber} is behind ${baseBranch} by ${compare.data.behind_by} commits. Attempting to merge ${baseBranch} into ${headRef}.`);
                try {
                  // Merge main into the PR branch
                  await github.rest.repos.merge({
                    owner,
                    repo,
                    base: headRef,
                    head: baseBranch,
                  });
                  core.info(`Successfully updated PR #${prNumber} (${headRef}) with the latest changes from ${baseBranch}.`);
                } catch (error) {
                  core.warning(`Could not update PR #${prNumber} (${headRef}): ${error.message}`);
                }
              } else {
                core.info(`PR #${prNumber} (${headRef}) is up to date with ${baseBranch}.`);
              }
            }
