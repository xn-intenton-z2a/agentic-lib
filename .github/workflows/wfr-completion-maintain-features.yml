# .github/workflows/wfr-completion-maintain-features.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ maintain-features

on:
  workflow_call:
    inputs:
      feature:
        description: 'Text to drive the feature creation (if "house choice", the repository will be assessed an action chosen). e.g. "Support output to PDF."'
        type: string
        required: false
        default: 'house choice'
      featuresPath:
        description: 'The directory to create/update the features in. e.g. "features/"'
        type: string
        required: false
        default: 'features/'
      featuresWipLimit:
        description: 'The maximum number of features to create. e.g. "3"'
        type: string
        required: false
        default: '3'
      srcPath:
        description: 'The source file(s) to create the issue to change. e.g. "src/lib/main.js" or multiple files separated by semicolons "src/lib/main.js;src/lib/utils.js"'
        type: string
        required: false
        default: 'src/lib/'
      testsPath:
        description: 'The test file(s). e.g. "tests/unit/main.test.js" or multiple files separated by semicolons "tests/unit/main.test.js;tests/unit/utils.test.js"'
        type: string
        required: false
        default: 'tests/unit/'
      docsPath:
        description: 'The documentation file(s) to write to. e.g. "docs/" or multiple files separated by semicolons "docs/api;docs/API.md"'
        type: string
        required: false
        default: 'docs/'
      readmeFile:
        description: 'The README file. e.g. "README.md"'
        type: string
        required: false
        default: 'README.md'
      missionFile:
        description: 'The MISSION statement file. e.g. "MISSION.md"'
        type: string
        required: false
        default: 'MISSION.md'
      contributingFile:
        description: 'The CONTRIBUTING file. e.g. "CONTRIBUTING.md"'
        type: string
        required: false
        default: 'CONTRIBUTING.md'
      dependenciesFile:
        description: 'The dependencies file. e.g. "package.json"'
        type: string
        required: false
        default: 'package.json'
      model:
        description: 'The OpenAI model to use. e.g. "o3-mini"'
        type: string
        required: false
        default: ${{ vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation:
        description: 'The GitHub organisation to authenticate with for npm. e.g. "xn-intenton-z2a"'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      s3BucketUrl:
        description: 'The S3 bucket URL with prefix to use. e.g. "s3://my-bucket/prefix"'
        type: string
        required: false
        default: ''
      promptFile:
        description: 'The file containing the prompt text. e.g. "AGENT-MAINTAIN-FEATURES.md"'
        type: string
        required: false
        default: 'AGENT-MAINTAIN-FEATURES.md'
      iamRoleArn:
        description: 'The ARN of the IAM role to assume. e.g. "arn:aws:iam::123456789012:role/my-role"'
        type: string
        required: false
        default: ''
      agentConfigPath:
        description: 'The path to the agentic-lib.yml configuration file'
        type: string
        required: false
        default: '.github/agentic-lib.yml'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
    outputs:
      featureName:
        value: ${{ jobs.maintain-features.outputs.featureName }}
      featureSpec:
        value: ${{ jobs.maintain-features.outputs.featureSpec }}

jobs:
  maintain-features:
    runs-on: ubuntu-latest

    env:
      feature: ${{ inputs.feature || '' }}
      featuresPath: ${{ inputs.featuresPath || 'features/' }}
      featuresWipLimit: ${{ inputs.featuresWipLimit || '3' }}
      srcPath: ${{ inputs.srcPath || '' }}
      testsPath: ${{ inputs.testsPath || '' }}
      docsPath: ${{ inputs.docsPath || '' }}
      readmeFile: ${{ inputs.readmeFile || 'README.md' }}
      missionFile: ${{ inputs.missionFile || 'MISSION.md' }}
      contributingFile: ${{ inputs.contributingFile || 'CONTRIBUTING.md' }}
      dependenciesFile: ${{ inputs.dependenciesFile || 'package.json' }}
      model: ${{ inputs.model || vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      chatgptApiSecretKey: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      promptFile: ${{ inputs.promptFile || 'AGENT-MAINTAIN-FEATURES.md' }}
      s3BucketUrl: ${{ inputs.s3BucketUrl || '' }}
      iamRoleArn: ${{ inputs.iamRoleArn || '' }}
      agentConfigPath: ${{ inputs.agentConfigPath || '.github/agentic-lib.yml' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check GitHub authentication
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm ci

      - name: List current features
        id: features
        shell: bash
        run: |
          output=$(find "${{ env.featuresPath }}" -maxdepth 1 -type f -name '*.md' -print -exec echo "# {}" \; -exec cat {} \; 2>&1 || echo 'none')
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: List rejected feature named
        id: rejectedFeatures
        shell: bash
        run: |
          mkdir -p "${{ env.featuresPath }}/rejects"
          output=$(ls -1 "${{ env.featuresPath }}/rejects" | sed 's/\.md//' | xargs echo )
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: List dependencies
        id: list
        shell: bash
        run: |
          output=$(npm list 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Tear down .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: rm -f .npmrc

      - name: maintain-features
        id: maintain-features
        uses: actions/github-script@v7
        env:
          currentFeatures: ${{ steps.features.outputs.output }}
          rejectedFeatures: ${{ steps.rejectedFeatures.outputs.output }}
          dependenciesListOutput: ${{ steps.list.outputs.output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const feature = process.env.feature;
            const featuresPath = process.env.featuresPath;
            const featuresWipLimit = process.env.featuresWipLimit;
            const currentFeatures = process.env.currentFeatures;
            const rejectedFeatures = process.env.rejectedFeatures;
            const srcPath = process.env.srcPath;
            const testsPath = process.env.testsPath;
            const docsPath = process.env.docsPath;
            const readmeFile = process.env.readmeFile;
            const missionFile = process.env.missionFile;
            const contributingFile = process.env.contributingFile;
            const dependenciesFile = process.env.dependenciesFile;
            const model = process.env.model;
            const apiKey = process.env.chatgptApiSecretKey;
            const promptFile = process.env.promptFile;
            const dependenciesListOutput = process.env.dependenciesListOutput;

            const fs = require('fs');
            const path = require('path');
            const OpenAI = require('openai').default;
            const { z } = require('zod');
            require('dotenv').config();

            if (!apiKey) { 
              core.setFailed("Missing CHATGPT_API_SECRET_KEY"); 
            }
            const openai = new OpenAI({ apiKey });

            core.info(`feature: "${feature}"`);
            core.info(`featuresPath: "${featuresPath}"`);
            core.info(`currentFeatures: "${currentFeatures}"`);
            core.info(`srcPath: "${srcPath}"`);
            core.info(`testsPath: "${testsPath}"`);
            core.info(`docsPath: "${docsPath}"`);
            core.info(`readmeFile: "${readmeFile}"`);
            core.info(`missionFile: "${missionFile}"`);
            core.info(`contributingFile: "${contributingFile}"`);
            core.info(`dependenciesFile: "${dependenciesFile}"`);
            // Handle multiple source files
            const srcFiles = srcPath.split(';');
            let sourceFileContents = {};
            for (const file of srcFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        sourceFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Source file '${fullPath}' from directory has been loaded (length ${sourceFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    sourceFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Source file '${trimmedFile}' has been loaded (length ${sourceFileContents[trimmedFile].length}).`);
                  }
                } else {
                  core.warning(`Source file '${trimmedFile}' does not exist.`);
                }
              } catch (e) {
                core.warning(`Error reading source file '${file}': ${e.message}`);
              }
            }

            // Handle multiple test files
            const testFiles = testsPath.split(';');
            let testFileContents = {};
            for (const file of testFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        testFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Test file '${fullPath}' from directory has been loaded (length ${testFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    testFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Test file '${trimmedFile}' has been loaded (length ${testFileContents[trimmedFile].length}).`);
                  }
                } else {
                  core.warning(`Test file '${trimmedFile}' does not exist.`);
                }
              } catch (e) {
                core.warning(`Error reading test file '${file}': ${e.message}`);
              }
            }

            // Handle multiple docs files
            const docsFiles = docsPath.split(';');
            let docsFileContents = {};
            for (const file of docsFiles) {
              try {
                const trimmedFile = file.trim();
                if (fs.existsSync(trimmedFile)) {
                  const stats = fs.statSync(trimmedFile);
                  if (stats.isDirectory()) {
                    // If it's a directory, read all files in the directory
                    const files = fs.readdirSync(trimmedFile);
                    for (const subFile of files) {
                      const fullPath = path.join(trimmedFile, subFile);
                      if (fs.statSync(fullPath).isFile()) {
                        docsFileContents[fullPath] = fs.readFileSync(fullPath, 'utf8');
                        core.info(`Docs file '${fullPath}' from directory has been loaded (length ${docsFileContents[fullPath].length}).`);
                      }
                    }
                  } else {
                    // It's a file, read it directly
                    docsFileContents[trimmedFile] = fs.readFileSync(trimmedFile, 'utf8');
                    core.info(`Docs file '${trimmedFile}' has been loaded (length ${docsFileContents[trimmedFile].length}).`);
                  }
                } else {
                  // Create directory if it doesn't exist
                  const docsDir = path.dirname(trimmedFile);
                  if (!fs.existsSync(docsDir)) {
                    fs.mkdirSync(docsDir, { recursive: true });
                  }
                  docsFileContents[trimmedFile] = '';
                  core.info(`Docs file '${trimmedFile}' does not exist and will be created.`);
                }
              } catch (e) {
                core.warning(`Error reading docs file '${file}': ${e.message}`);
              }
            }

            const readmeFileContent = fs.readFileSync(readmeFile, 'utf8');
            const missionFileContent = fs.readFileSync(missionFile, 'utf8');
            const contributingFileContent = fs.readFileSync(contributingFile, 'utf8');
            const dependenciesFileContent = fs.readFileSync(dependenciesFile, 'utf8');
            const promptContent = fs.readFileSync(promptFile, 'utf8');

            // Read the agent config file
            const agentConfigPath = process.env.agentConfigPath;
            let agentConfigContent = '';
            try {
              if (fs.existsSync(agentConfigPath)) {
                agentConfigContent = fs.readFileSync(agentConfigPath, 'utf8');
                core.info(`Agent config file '${agentConfigPath}' has been loaded (length ${agentConfigContent.length}).`);
              } else {
                core.warning(`Agent config file '${agentConfigPath}' does not exist.`);
              }
            } catch (e) {
              core.warning(`Error reading agent config file '${agentConfigPath}': ${e.message}`);
            }

            core.info(`Readme file '${readmeFile}' has been loaded (length ${readmeFileContent.length}).`);
            core.info(`Dependencies file '${dependenciesFile}' has been loaded (length ${dependenciesFileContent.length}).`);
            core.info(`Prompt file '${promptFile}' has been loaded (length ${promptContent.length}).`);

            // Load library documents
            let libraryDocuments = '';
            try {
              const libraryDir = 'library';
              if (fs.existsSync(libraryDir)) {
                const libraryFiles = fs.readdirSync(libraryDir)
                  .filter(file => file.endsWith('.md'))
                  .map(file => path.join(libraryDir, file));

                // Prepare an array to hold all document contents
                const documentContents = [];

                for (const file of libraryFiles) {
                  const fileName = path.basename(file);
                  const content = fs.readFileSync(file, 'utf8');

                  // Extract the Information Dense Extract section if it exists
                  let informationDenseExtract = '';
                  const match = content.match(/## Information Dense Extract\n([\s\S]*?)(?=\n##|$)/);
                  if (match && match[1] && match[1].trim()) {
                    informationDenseExtract = match[1].trim();
                    documentContents.push({ name: fileName, content: informationDenseExtract });
                  } else {
                    // Fallback to the full content if Information Dense Extract is not found or empty
                    documentContents.push({ name: fileName, content });
                  }
                }

                // Sort documents by size (smallest first) to maximize the number of documents we can include
                documentContents.sort((a, b) => a.content.length - b.content.length);

                // Limit the total size to 500,000 characters to avoid token limits in OpenAI models
                const maxTotalSize = 500000;
                let currentSize = 0;
                let includedCount = 0;

                for (const doc of documentContents) {
                  const docSize = doc.content.length + doc.name.length + 5; // +5 for "# " and "\n\n"
                  if (currentSize + docSize <= maxTotalSize) {
                    libraryDocuments += `# ${doc.name}\n${doc.content}\n\n`;
                    currentSize += docSize;
                    includedCount++;
                  } else {
                    // If we can't include the full document, add a note
                    core.info(`Skipping document ${doc.name} (size: ${docSize}) to avoid exceeding token limits.`);
                  }
                }

                core.info(`Loaded ${includedCount} of ${libraryFiles.length} library documents (total size: ${currentSize} characters).`);
              } else {
                core.info('Library directory not found.');
              }
            } catch (e) {
              core.warning(`Error reading library documents: ${e.message}`);
            }

            // generate the feature prompt either by using the supplied feature or by reviewing the current features and full context
            let prompt = feature;
            if (feature === 'house choice') {
              prompt = `Please review the current features in the repository and either;
                * add a new feature to the repository, or
                * extend an existing feature to add a new aspect to it, or
                * update an existing feature to bring it to a high standard matching other features in the repository.
                The feature name should either be a current feature name or be supplied with a feature specification which is distinct from any other feature in the repository.
              `;
            }

            const chatGptPrompt = `
            ${promptContent}
            If there are more than the maximum number of ${featuresWipLimit} features in the repository, you must merge similar features into a single feature and name the features to be deleted.
            All significant features of the repository should be present in the feature set before new features are added and features can be consolidated to make room below the maximum of ${featuresWipLimit} features.

            Consider the following when refining your response:
            * Feature prompt details
            * Current feature names and specifications in the repository
            * Rejected feature names
            * Source file content
            * Test file content
            * Documentation file content
            * README file content
            * MISSION file content
            * Contributing file content
            * Dependencies file content
            * Library documents
            * Dependency list

            Feature prompt:
            FEATURE_PROMPT_START
            ${prompt}
            FEATURE_PROMPT_END            

            Current feature names and specifications:
            CURRENT_FEATURES_START
            ${currentFeatures}
            CURRENT_FEATURES_END

            Library documents:
            LIBRARY_DOCUMENTS_START
            ${libraryDocuments}
            LIBRARY_DOCUMENTS_END

            Rejected feature names:
            REJECTED_FEATURES_START
            ${rejectedFeatures}
            REJECTED_FEATURES_END

            Source files:
            SOURCE_FILES_START
            ${Object.entries(sourceFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            SOURCE_FILES_END

            Test files:
            TEST_FILES_START
            ${Object.entries(testFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            TEST_FILES_END

            Documentation files:
            DOCS_FILES_START
            ${Object.entries(docsFileContents).map(([file, content]) => `File: ${file}\n${content}\n`).join('\n')}
            DOCS_FILES_END

            README file: ${readmeFile}
            README_FILE_START
            ${readmeFileContent}
            README_FILE_END

            MISSION file: ${missionFile}
            MISSION_FILE_START
            ${missionFileContent}
            MISSION_FILE_END

            Contributing file: ${contributingFile}
            CONTRIBUTING_FILE_START
            ${contributingFileContent}
            CONTRIBUTING_FILE_END

            Dependencies file: ${dependenciesFile}
            DEPENDENCIES_FILE_START
            ${dependenciesFileContent}
            DEPENDENCIES_FILE_END

            Dependencies list from command: npm list
            DEPENDENCIES_LIST_START
            ${dependenciesListOutput}
            DEPENDENCIES_LIST_END    

            Agent configuration file: ${agentConfigPath}
            AGENT_CONFIG_FILE_START
            ${agentConfigContent}
            AGENT_CONFIG_FILE_END

            Answer strictly with a JSON object following this schema:
            {
              "featureName": "The feature name as one or two words in SCREAMING_SNAKECASE.",
              "featureSpec": "The feature specification as multiline markdown with a few level 1 headings.",
              "featureNamesToBeDeleted": "The comma separated list of feature names to be deleted or 'none' if no feature is to be deleted."
            }
            Ensure valid JSON.
            `;

            const ResponseSchema = z.object({ featureName: z.string(), featureSpec: z.string(), featureNamesToBeDeleted: z.string() });

            // Define the function schema for function calling
            const tools = [{
              type: "function",
              function: {
                name: "generate_feature",
                description: "Elaborate on the supplied prompt and project files to create the featureName and featureSpec of a repository feature, and the feature names to be deleted. Return an object with featureName (string), featureSpec (string), and featureNamesToBeDeleted (string).",
                parameters: {
                  type: "object",
                  properties: {
                    featureName: { type: "string", description: "The feature name as one or two words in SCREAMING_SNAKECASE." },
                    featureSpec: { type: "string", description: "The feature specification as multiline markdown with a few level 1 headings." },
                    featureNamesToBeDeleted: { type: "string", description: "The comma separated list of feature names to be deleted or 'none' if no feature is to be deleted." }
                  },
                  required: ["featureName", "featureSpec", "featureNamesToBeDeleted"],
                  additionalProperties: false
                },
                strict: true
              }
            }];

            // Call OpenAI using function calling format
            const response = await openai.chat.completions.create({
              model,
              messages: [
                { role: "system", content: "You are maintaining a feature set by providing expert contemporary insight into both the product market and you will perform a detailed analysis of the current state of the repository and current feature set in search of value opportunities and unique selling points. Answer strictly with a JSON object following the provided function schema." },
                { role: "user", content: chatGptPrompt }
              ],
              tools: tools
            });

            let result;
            if (response.choices[0].message.tool_calls && response.choices[0].message.tool_calls.length > 0) {
              try {
                result = JSON.parse(response.choices[0].message.tool_calls[0].function.arguments);
              } catch (e) {
                core.setFailed(`Failed to parse function call arguments: ${e.message}`);
              }
            } else if (response.choices[0].message.content) {
              try {
                result = JSON.parse(response.choices[0].message.content);
              } catch (e) {
                core.setFailed(`Failed to parse response content: ${e.message}`);
              }
            } else {
              core.setFailed("No valid response received from OpenAI.");
            }

            try {
              const parsed = ResponseSchema.parse(result);
              core.info(`parsed response: "${JSON.stringify(parsed)}"`);
              core.setOutput("featureName", parsed.featureName);
              core.setOutput("featureSpec", parsed.featureSpec);
              core.setOutput("featureNamesToBeDeleted", parsed.featureNamesToBeDeleted);
              core.info(`featureName: "${parsed.featureName}"`);
              core.info(`featureSpec: "${parsed.featureSpec}"`);
              core.info(`featureNamesToBeDeleted: "${parsed.featureNamesToBeDeleted}"`);

              // Save the feature spec to a file using the convention of <featuresPath> plus path SCREAMING_SNAKE_CASE(<feature name>).md
              const featureName = parsed.featureName.replace(/ /g, "_").toUpperCase();
              const featureSpec = parsed.featureSpec;
              const featuresPath = process.env.featuresPath || 'features/';

              const featureFilePath = path.join(featuresPath, `${featureName}.md`);
              try {
                fs.mkdirSync(featuresPath, { recursive: true });
                fs.writeFileSync(featureFilePath, featureSpec);
                core.info(`Feature spec saved to ${featureFilePath}`);
              } catch (e) {
                core.setFailed(`Failed to save feature spec: ${e.message}`);
              }

              const featureFilepathsToBeDeleted = parsed.featureNamesToBeDeleted
                .split(',')
                .map(name => path.join(featuresPath, `${name.trim().replace(/.md^/, "").toUpperCase()}.md`));
              for (const filepath of featureFilepathsToBeDeleted) {
                try {
                  if( fs.existsSync(filepath) ) {
                    core.info(`Deleting feature file: ${filepath}`);
                    fs.unlinkSync(filepath);
                  }
                } catch (e) {
                  core.info(`Could not delete ${filepath}: ${e.message}`);
                }
              }

            } catch (e) {
              core.setFailed(`Failed to parse ChatGPT response: ${e.message}`);
            }

            core.setOutput("response", JSON.stringify(response));
            core.setOutput("usage", JSON.stringify(response.usage));
            core.info(`response: "${JSON.stringify(response)}"`);
            core.info(`usage: "${JSON.stringify(response.usage)}"`);

      - name: Commit changes
        id: commit
        continue-on-error: true
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v
          git add -v --all '${{ env.featuresPath }}'
          git commit -m 'Maintain ${{ steps.maintain-features.outputs.featureName }}'
          git status -v
          git pull --ff-only origin ${{ github.ref }}
          git push -v origin ${{ github.ref }}
          git status -v

    outputs:
      featureName: ${{ steps.maintain-features.outputs.featureName }}
      featureSpec: ${{ steps.maintain-features.outputs.featureSpec }}
