# .github/workflows/wfr-mvn-ci-update.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ update-mvn

on:
  workflow_call:
    inputs:
      buildScript:
        description: 'The script must be runnable as: `mvn clean install`'
        type: string
        required: false
        default: './mvnw clean install'
      testScript:
        description: 'The script must be runnable as: `mvn test`'
        type: string
        required: false
        default: './mvnw test'
      upgradeTarget:
        description: 'Ignored for Maven; use versions:use-latest-releases'
        type: string
        required: false
        default: 'minor'
      branch:
        description: 'The branch to push changes to. e.g. "agentic-lib-update"'
        type: string
        required: false
        default: 'agentic-lib-update'
      npmAuthOrganisation:
        description: '(Not used for Maven)'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      cache:
        description: 'The cache to use for npm. e.g. "maven"'
        type: string
        required: false
        default: 'maven'
      gitCommitMessage:
        description: 'The message to use for git commits. e.g. "chore: dependency updates"'
        type: string
        required: false
        default: 'chore: dependency updates'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      updatedFiles:
          description: 'Whether files were updated by the script. e.g. "true"'
          value: ${{ jobs.update.outputs.updatedFiles }}

jobs:
  update:
    runs-on: ubuntu-latest

    env:
      buildScript: ${{ inputs.buildScript || './mvnw clean install' }}
      testScript: ${{ inputs.testScript || './mvnw test' }}
      upgradeTarget: ${{ inputs.upgradeTarget || 'minor' }}
      branch: ${{ inputs.branch || 'agentic-lib-update' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      cache: ${{ inputs.cache || 'maven' }}
      gitCommitMessage: |
        ${{ inputs.gitCommitMessage || 'chore: dependency updates' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java (JDK 21)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: ${{ env.cache }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit

      - name: Build project before update
        id: build
        shell: bash
        run: |
          output=$(${{env.buildScript}} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: Run tests before update
        id: test
        shell: bash
        run: |
          output=$(${{env.testScript}} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"

      - name: download-dependencies
        id: download-dependencies
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ./mvnw --batch-mode --quiet dependency:go-offline > /dev/null 2>&1
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Update Maven dependencies
        continue-on-error: true
        shell: bash
        run: |
          mvn versions:use-latest-releases -DallowSnapshots=false
          # Optionally, run: mvn versions:commit to finalize changes
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Get git diff status
        id: git-diff
        shell: bash
        run: |
          savedOptions=$(set +o) && set +e
          if git diff --quiet; then
            echo "updated=false" | tee -a "${GITHUB_OUTPUT?}"
          else
            echo "updated=true" | tee -a "${GITHUB_OUTPUT?}"
          fi
          eval "${savedOptions?}"
        continue-on-error: true

      - name: Build project after update
        shell: bash
        run: ${{env.buildScript}}

      - name: Run tests after update
        shell: bash
        run: ${{env.testScript}}

      - name: Commit changes
        if: ${{ steps.git-diff.outputs.updated == 'true' || env.git-force == 'true' }}
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git status -v
          git switch -c "${{ env.branch }}"
          git add -v --all
          git commit -v -m "${{ env.gitCommitMessage }}"
          git pull --rebase origin main
          git push --set-upstream origin "${{ env.branch }}"
          git push -v
          git status -v

    outputs:
      updatedFiles: ${{ steps.git-diff.outputs.updated || '' }}
