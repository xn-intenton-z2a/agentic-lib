# File: .github/workflows/wfr-apply-fixes-sarif-on-branches.yml
name: âˆž Apply Fixes Sarif on Branch

on:
  workflow_call:
    inputs:
      branch:
        description: 'The branch to process. e.g. `issue-123`'
        type: string
        required: true
      resultsToResolve:
        description: 'Results (from the SARIF script) to resolve to consider the action to be complete. e.g. 1'
        type: string
        required: false
        default: '3'
      iterations:
        description: 'Iterations that can be performed in an attempt to resolve the results. e.g. 10'
        type: string
        required: false
        default: '10'
      baseDir:
        description: 'Relative paths are assumed to be relative to these directories. e.g. "."'
        type: string
        required: false
        default: '.'
      buildScript:
        description: 'The script must be runnable as: `npm ci ; <script>`. e.g. `npm run build`'
        type: string
        required: false
        default: 'npm run build'
      sarifScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and output in SARIF format. e.g. `npx --silent eslint --fix --format=@microsoft/eslint-formatter-sarif .`'
        type: string
        required: false
        default: 'npx --silent eslint --fix --format=@microsoft/eslint-formatter-sarif .'
      testScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm test`'
        type: string
        required: false
        default: 'npm test'
      npmAuth:
        description: 'Whether to authenticate with npm. e.g. "true"'
        type: string
        required: false
        default: 'true'
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      #gitCommitMessage:
      #  description: 'The message to use for git commits. e.g. "Updated by ${{ inputs.sarifScript }}"'
      #  type: string
      #  required: false
      #  default: 'Updated by ${{ inputs.sarifScript }}'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: true
      CHATGPT_API_SECRET_KEY:
        required: true

jobs:
  process-branches:
    runs-on: ubuntu-latest

    env:
      branch: ${{ inputs.branch }}
      resultsToResolve: ${{ inputs.resultsToResolve || '3' }}
      iterations: ${{ inputs.iterations || '10' }}
      baseDir: ${{ inputs.baseDir || '.' }}
      buildScript: ${{ inputs.buildScript || 'npm run build' }}
      sarifScript: ${{ inputs.sarifScript || 'npx --silent eslint --fix --format=@microsoft/eslint-formatter-sarif ./src/ ./tests/' }}
      testScript: ${{ inputs.testScript || 'npm test' }}
      npmAuth: ${{ inputs.npmAuth || 'true' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      useApplyFixesSarifAction: 'true'
      #gitCommitMessage: |
      #  ${{ inputs.gitCommitMessage || 'Merge main into feature branch' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Check GitHub authentication
        if: ${{ env.npmAuth == 'true' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuth == 'true' }}
        shell: bash
        run: |
          echo "@polycode-projects:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm ci

      - name: Build project
        shell: bash
        run: |
            ${{ env.buildScript }}

      - name: Tear down .npmrc
        if: ${{ env.npmAuth == 'true' }}
        shell: bash
        run: rm -f .npmrc

      - name: Run tests
        shell: bash
        run: |
            ${{ env.testScript }}

      - name: check-linting
        id: check-linting
        continue-on-error: true
        shell: bash
        run: |
          savedOptions=$(set +o) \
          && set +e \
          && output1=$(${{ env.sarifScript }}) \
          ; output2=$(${{ env.sarifScript }}) \
          ; exitCode="$?" \
          && eval "${savedOptions?}" \
          && echo "exitCode=${exitCode}" \
          && echo "${output2}" | jq -e '.runs[0].results | length > 0' > /dev/null \
          && fixRequired=$([ $? -eq 0 ] && echo 'true' || echo 'false') \
          && echo "fixRequired=${fixRequired}" | tee -a "${GITHUB_OUTPUT}" \
          && resultsBefore=$(echo "${output1}" | jq '.runs[0].results | length' 2>/dev/null || echo "unknown") \
          && resultsAfter=$(echo "${output2}" | jq '.runs[0].results | length' 2>/dev/null || echo "unknown") \
          && fixApplied=$([ "${resultsAfter}" -lt "${resultsBefore}" ] && echo 'true' || echo 'false') \
          && echo "fixApplied=${fixApplied}" | tee -a "${GITHUB_OUTPUT}" \
          ; echo "output2=${output2}"

      - name: Configure Git
        if: ${{ steps.check-linting.outputs.fixRequired == 'true' && env.useApplyFixesSarifAction == 'true' }}
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

      - name: apply-fixes-sarif
        id: apply-fixes-sarif
        if: ${{ steps.check-linting.outputs.fixRequired == 'true' && env.useApplyFixesSarifAction == 'true' }}
        uses: 'polycode-projects/apply-fixes-sarif@latest'
        with:
          resultsToResolve: "${{ env.resultsToResolve }}"
          iterations: "${{ env.iterations }}"
          programFitnessCommand: "${{ env.sarifScript }}"
          baseDir: "${{ env.baseDir }}"
        env:
          CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}
          I7N_SAFETY_PROTOCOLS: 'off'
          CACHE_ENABLED: 'true'
          CACHE_FILEPATH: './prompt-cache.jsonl'
          ACTIONS_STEP_DEBUG: 'true'
          LOG_LEVEL: 'info'
          LOG_TO_CONSOLE: 'true'
          LOG_TO_FILEPATH: './intention-log.jsonl'

      - name: Log resolution output
        if: ${{ steps.check-linting.outputs.fixRequired == 'true' && env.useApplyFixesSarifAction == 'true' }}
        shell: bash
        run: |
          cat <<EOF
          ${{ steps.apply-fixes-sarif.outputs.resolution }}
          EOF
          cat <<EOF
          ${{ steps.apply-fixes-sarif.outputs.fixedProgramFilepathsChanged }}
          EOF

      - name: Show log file details
        if: ${{ steps.check-linting.outputs.fixRequired == 'true' && env.useApplyFixesSarifAction == 'true' }}
        shell: bash
        run: |
          ls -l './intention-log.jsonl' && wc -l './intention-log.jsonl' || echo 'missing "./intention-log.jsonl"'

      - name: Upload Logging Output
        if: ${{ steps.check-linting.outputs.fixRequired == 'true' && env.useApplyFixesSarifAction == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: intention-log
          path: './intention-log.jsonl'

      - name: Git status
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v

      - name: Run Tests after apply-fixes-sarif
        shell: bash
        run: |
          ${{ env.testScript }}

      - name: Ensure fitness test still runs
        shell: bash
        run: |
          test $(${{ env.sarifScript }} | jq '.runs[0].artifacts | length') -gt 0

      - name: Commit changes, if the linting fixes were applied or if apply-fixes-sarif ran
        if: ${{ steps.check-linting.outputs.fixApplied == 'true' || ( steps.check-linting.outputs.fixRequired == 'true' && env.useApplyFixesSarifAction == 'true' ) }}
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v
          git add -v --all '${{ env.baseDir }}'
          truncatedResolution=$(echo "${{ steps.apply-fixes-sarif.outputs.resolution }}" | tr -dc '[:alnum:][:space:][:punct:]' | cut -c1-1024)
          git commit -v -m "${truncatedResolution}"
          git push -v
          git status -v

      - name: re-check-linting
        id: re-check-linting
        continue-on-error: true
        shell: bash
        run: |
          savedOptions=$(set +o) \
          && set +e \
          && output=$(${{ env.sarifScript }}) \
          ; exitCode="$?" \
          && echo "exitCode=${exitCode}" \
          && echo "${output}" | jq -e '.runs[0].results | length == 0' > /dev/null \
          ; fixed=$([ $? -eq 0 ] && echo 'true' || echo 'false') \
          ; eval "${savedOptions?}" \
          && echo "fixed=${fixed}" | tee -a "${GITHUB_OUTPUT}" \
          ; echo "output=${output}"

      #- name: Merge main into feature branch, if fixed after re-checking linting
      #  if: ${{ steps.re-check-linting.outputs.fixed == 'true' }}
      #  shell: bash
      #  run: |
      #    git config --local user.email '${{ env.gitUserEmail }}'
      #    git config --local user.name '${{ env.gitUserName }}'
      #    git status -v
      #    git fetch -v origin
      #    git merge -v origin/main -m "${{ env.gitCommitMessage }}" -X ours || git merge --abort
      #    git push origin HEAD -v
      #    git status -v

      - name: Create pull request, if fixed after re-checking linting
        if: ${{ steps.re-check-linting.outputs.fixed == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const { data: existingPulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${{ env.branch }}`,
              base: 'main',
              state: 'open',
            });
            if (existingPulls.length === 0) {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Linting fixes',
                head: '${{ env.branch }}',
                base: 'main',
                body: 'Linting fixes applied using AI assistance.',
                maintainer_can_modify: true,
              });
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['automerge', 'automated'],
              });
            } else {
              console.log('Pull request already exists for this branch.');
            }
