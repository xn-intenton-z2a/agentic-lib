# .github/workflows/wfr-agent-config.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ wfr-agent-config

on:
  workflow_call:
    inputs:
      configPath:
        description: 'The the location of the agentic-lib configuration file. e.g. ".github/agents/agentic-lib.yml"'
        type: string
        required: false
        default: '.github/agents/agentic-lib.yml'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      # Filepaths for elaborator workflows
      missionFilepath:
        value: ${{ jobs.agentic-lib.outputs.missionFilepath }}
      librarySourcesFilepath:
        value: ${{ jobs.agentic-lib.outputs.librarySourcesFilepath }}
      librarySourcesLimit:
        value: ${{ jobs.agentic-lib.outputs.librarySourcesLimit }}
      libraryDocumentsPath:
        value: ${{ jobs.agentic-lib.outputs.libraryDocumentsPath }}
      libraryDocumentsLimit:
        value: ${{ jobs.agentic-lib.outputs.libraryDocumentsLimit }}
      featuresPath:
        value: ${{ jobs.agentic-lib.outputs.featuresPath }}
      featuresLimit:
        value: ${{ jobs.agentic-lib.outputs.featuresLimit }}

      # Filepaths for engineer workflows
      contributingFilepath:
        value: ${{ jobs.agentic-lib.outputs.contributingFilepath }}
      allTestsPaths:
        value: ${{ jobs.agentic-lib.outputs.allTestsPaths }}
      targetTestsPath:
        value: ${{ jobs.agentic-lib.outputs.targetTestsPath }}
      allSourcePaths:
        value: ${{ jobs.agentic-lib.outputs.allSourcePaths }}
      targetSourcePath:
        value: ${{ jobs.agentic-lib.outputs.targetSourcePath }}
      dependenciesFilepath:
        value: ${{ jobs.agentic-lib.outputs.dependenciesFilepath }}
      documentationPath:
        value: ${{ jobs.agentic-lib.outputs.documentationPath }}

      # Filepaths for maintainer workflows
      formattingFilepath:
        value: ${{ jobs.agentic-lib.outputs.formattingFilepath }}
      lintingFilepath:
        value: ${{ jobs.agentic-lib.outputs.lintingFilepath }}
      readmeFilepath:
        value: ${{ jobs.agentic-lib.outputs.readmeFilepath }}

      # Filepath access permissions
      writeableFilepaths:
        value: ${{ jobs.agentic-lib.outputs.writeableFilepaths }}

      # Execution commands
      buildScript:
        value: ${{ jobs.agentic-lib.outputs.buildScript }}
      testScript:
        value: ${{ jobs.agentic-lib.outputs.testScript }}
      mainScript:
        value: ${{ jobs.agentic-lib.outputs.mainScript }}

      # How many issues should be available to be picked up?
      featureDevelopmentIssuesWipLimit:
        value: ${{ jobs.agentic-lib.outputs.featureDevelopmentIssuesWipLimit }}
      maintenanceIssuesWipLimit:
        value: ${{ jobs.agentic-lib.outputs.maintenanceIssuesWipLimit }}

      # How many attempts should be made to work on an issue?
      attemptsPerBranch:
        value: ${{ jobs.agentic-lib.outputs.attemptsPerBranch }}
      attemptsPerIssue:
        value: ${{ jobs.agentic-lib.outputs.attemptsPerIssue }}

      # Web publishing
      docRoot:
        value: ${{ jobs.agentic-lib.outputs.docRoot }}

      # Contents of the agentic-lib.yml file
      agentConfigContent:
          value: ${{ jobs.agentic-lib.outputs.agentConfigContent }}

jobs:
  agentic-lib:
    runs-on: ubuntu-latest
    env:
      configPath: ${{ inputs.configPath || '.github/agents/agentic-lib.yml' }}

      # Filepaths for elaborator workflows
      defaultMissionFilepath: 'MISSION.md'
      defaultLibrarySourcesFilepath: 'SOURCES*.md'
      defaultLibrarySourcesLimit: '16'
      defaultLibraryDocumentsPath: 'library/'
      defaultLibraryDocumentsLimit: '8'
      defaultFeaturesPath: 'features/'
      defaultFeaturesLimit: '3'

      # Filepaths for engineer workflows
      defaultContributingFilepath: 'CONTRIBUTING.md'
      defaultOtherTestsPaths: '["tests/unit/"]'
      defaultTargetTestsPath: 'tests/unit/'
      defaultOtherSourcePaths: '["src/lib/"]'
      defaultTargetSourcePath: 'src/lib/'
      defaultDependenciesFilepath: 'package.json'
      defaultDocumentationPath: 'docs/'

      # Filepaths for maintainer workflows
      defaultFormattingFilepath: '.prettierrc'
      defaultLintingFilepath: 'eslint.config.js'
      defaultReadmeFilepath: 'README.md'

      # Filepath access permissions
      defaultReadableFilepaths: 'MISSION.md;CONTRIBUTING.md;.prettierrc;eslint.config.js;SOURCES.md;library/;features/;tests/unit/;src/lib/;package.json;docs/;README.md'
      defaultWriteableFilepaths: 'SOURCES.md;library/;features/;tests/unit/;src/lib/;package.json;docs/;README.md'

      # Execution commands
      defaultBuildScript: 'npm run build'
      defaultTestScript: 'npm test'
      defaultMainScript: 'npm run start'

      # How many issues should be available to be picked up?
      defaultFeatureDevelopmentIssuesWipLimit: '3'
      defaultMaintenanceIssuesWipLimit: '3'

      # How many attempts should be made to work on an issue?
      defaultAttemptsPerBranch: '2'
      defaultAttemptsPerIssue: '2'

      # Web publishing
      defaultDocRoot: 'docs/'

      # Agentic-lib configuration file contents
      defaultAgentConfigContent: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Configure npm for GitHub Packages
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Install dependencies
        run: npm ci

      - name: agentic-lib
        id: agentic-lib
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const yaml = require('js-yaml');

            // Filepaths for elaborator workflows - Default values
            let missionFilepath = process.env.defaultMissionFilepath;
            let librarySourcesFilepath = process.env.defaultLibrarySourcesFilepath;
            let librarySourcesLimit = process.env.defaultLibrarySourcesLimit;            
            let libraryDocumentsPath = process.env.defaultLibraryDocumentsPath;
            let libraryDocumentsLimit = process.env.defaultLibraryDocumentsLimit;
            let featuresPath = process.env.defaultFeaturesPath;
            let featuresLimit = process.env.defaultFeaturesLimit;

            // Filepaths for engineer workflows - Default values
            let contributingFilepath = process.env.defaultContributingFilepath;
            let targetTestsPath = process.env.defaultTargetTestsPath;
            let otherTestsPaths = process.env.defaultOtherTestsPaths;
            let targetSourcePath = process.env.defaultTargetSourcePath;
            let otherSourcePaths = process.env.defaultOtherSourcePaths;
            let dependenciesFilepath = process.env.defaultDependenciesFilepath;
            let documentationPath = process.env.defaultDocumentationPath;

            // Filepaths for maintainer workflows - Default values
            let formattingFilepath = process.env.defaultFormattingFilepath;
            let lintingFilepath = process.env.defaultLintingFilepath;
            let readmeFilepath = process.env.defaultReadmeFilepath;

            // Filepath access permissions - Default values
            let writeableFilepaths = process.env.defaultWriteableFilepaths;

            // Use the configPath from input parameter
            const configPath = process.env.configPath;
            if (!fs.existsSync(configPath)) {
              console.log("Warning: .github/agents/agentic-lib.yml file not found, using default values.");
            }

            let config;
            let agentConfigContent = '';
            try {
              // Read and parse the YAML file
              agentConfigContent = fs.readFileSync(configPath, 'utf8');
              config = yaml.load(agentConfigContent);
            } catch (error) {
              console.log(`Error parsing .github/agents/agentic-lib.yml: ${error.message}, using default values.`);
            }

            // Execution commands
            let buildScript = config?.buildScript || process.env.defaultBuildScript;
            let testScript = config?.testScript || process.env.defaultTestScript;
            let mainScript = config?.mainScript || process.env.defaultMainScript;

            // How many issues should be available to be picked up? 
            let featureDevelopmentIssuesWipLimit = config?.featureDevelopmentIssuesWipLimit || process.env.defaultFeatureDevelopmentIssuesWipLimit;
            let maintenanceIssuesWipLimit = config?.maintenanceIssuesWipLimit || process.env.defaultMaintenanceIssuesWipLimit;

            // How many attempts should be made to work on an issue? 
            let attemptsPerBranch = config?.attemptsPerBranch || process.env.defaultAttemptsPerBranch;
            let attemptsPerIssue = config?.attemptsPerIssue || process.env.defaultAttemptsPerIssue;

            // Web publishing
            let docRoot = config?.docRoot || process.env.defaultDocRoot;

            if (config?.paths) {

              // Filepaths for elaborator workflows - Extract
              missionFilepath = config.paths?.missionFilepath?.path || missionFilepath;
              librarySourcesFilepath = config.paths?.librarySourcesFilepath?.path || librarySourcesFilepath;
              librarySourcesLimit = config.paths?.librarySourcesFilepath?.limit || librarySourcesLimit;
              libraryDocumentsPath = config.paths?.libraryDocumentsPath?.path || libraryDocumentsPath;
              libraryDocumentsLimit = config.paths?.libraryDocumentsPath?.limit || libraryDocumentsLimit;
              featuresPath = config.paths?.featuresPath?.path || featuresPath;
              featuresLimit = config.paths?.featuresPath?.limit || featuresLimit;

              // Filepaths for engineer workflows - Extract
              contributingFilepath = config.paths?.contributingFilepath?.path || contributingFilepath;
              targetTestsPath = config.paths?.targetTestsPath?.path || targetTestsPath;
              allTestsPaths = [ targetTestsPath, ...(config.paths?.otherTestsPaths?.paths? || otherTestsPaths) ].join(';');
              targetSourcePath = config.paths?.targetSourcePath?.path || targetSourcePath;
              allSourcePaths = [ targetSourcePath, ...(config.paths?.otherSourcePaths?.paths? || otherSourcePaths) ].join(';');
              dependenciesFilepath = config.paths?.dependenciesFilepath?.path || dependenciesFilepath;
              documentationPath = config.paths?.documentationPath?.path || documentationPath;

              // Filepaths for maintainer workflows - Extract
              formattingFilepath = config.paths?.formattingFilepath?.path || formattingFilepath;
              lintingFilepath = config.paths?.lintingFilepath?.path || lintingFilepath;
              readmeFilepath = config.paths?.readmeFilepath?.path || readmeFilepath;

              // Filepath access permissions - Extract
              let writeablePathsArray = [];

              // Process each path entry to extract writeable paths
              for (const [key, pathObj] of Object.entries(config?.paths)) {
                  if (pathObj?.permissions && pathObj.permissions.includes('write')) {
                    if (pathObj?.path) {
                      writeablePathsArray.push(pathObj.path);
                    }
                    if (pathObj?.paths) {
                      writeablePathsArray = writeablePathsArray.concat(pathObj.paths);
                    }
                  }
                }

              writeableFilepaths = writeablePathsArray.length > 0 
                ? writeablePathsArray.join(';') 
                : writeableFilepaths;
            }

            // Filepaths for elaborator workflows - Set outputs
            console.log(`missionFilepath=${missionFilepath}`);
            core.setOutput('missionFilepath', missionFilepath);

            console.log(`librarySourcesFilepath=${librarySourcesFilepath}`);
            core.setOutput('librarySourcesFilepath', librarySourcesFilepath);

            console.log(`librarySourcesLimit=${librarySourcesLimit}`);
            core.setOutput('librarySourcesLimit', librarySourcesLimit);

            console.log(`libraryDocumentsLimit=${libraryDocumentsLimit}`);
            core.setOutput('libraryDocumentsLimit', libraryDocumentsLimit);

            console.log(`libraryDocumentsPath=${libraryDocumentsPath}`);
            core.setOutput('libraryDocumentsPath', libraryDocumentsPath);

            console.log(`featuresPath=${featuresPath}`);
            core.setOutput('featuresPath', featuresPath);

            console.log(`featuresLimit=${featuresLimit}`);
            core.setOutput('featuresLimit', featuresLimit);


            // Filepaths for engineer workflows - Set outputs
            console.log(`contributingFilepath=${contributingFilepath}`);
            core.setOutput('contributingFilepath', contributingFilepath);

            console.log(`allTestsPaths=${allTestsPaths}`);
            core.setOutput('allTestsPaths', allTestsPaths);

            console.log(`targetTestsPath=${targetTestsPath}`);
            core.setOutput('targetTestsPath', targetTestsPath);

            console.log(`allSourcePaths=${allSourcePaths}`);
            core.setOutput('allSourcePaths', allSourcePaths);

            console.log(`targetSourcePath=${targetSourcePath}`);
            core.setOutput('targetSourcePath', targetSourcePath);

            console.log(`dependenciesFilepath=${dependenciesFilepath}`);
            core.setOutput('dependenciesFilepath', dependenciesFilepath);

            console.log(`documentationPath=${documentationPath}`);
            core.setOutput('documentationPath', documentationPath);


            // Filepaths for maintainer workflows - Set outputs
            console.log(`formattingFilepath=${formattingFilepath}`);
            core.setOutput('formattingFilepath', formattingFilepath);

            console.log(`lintingFilepath=${lintingFilepath}`);
            core.setOutput('lintingFilepath', lintingFilepath);

            console.log(`readmeFilepath=${readmeFilepath}`);
            core.setOutput('readmeFilepath', readmeFilepath);


            // Filepath access permissions - Set outputs
            console.log(`writeableFilepaths=${writeableFilepaths}`);
            core.setOutput('writeableFilepaths', writeableFilepaths);


            // Execution commands - Set outputs
            console.log(`buildScript=${buildScript}`);
            core.setOutput('buildScript', buildScript);

            console.log(`testScript=${testScript}`);
            core.setOutput('testScript', testScript);

            console.log(`mainScript=${mainScript}`);
            core.setOutput('mainScript', mainScript);


            // How many issues should be available to be picked up? - Set outputs
            console.log(`featureDevelopmentIssuesWipLimit=${featureDevelopmentIssuesWipLimit}`);
            core.setOutput('featureDevelopmentIssuesWipLimit', featureDevelopmentIssuesWipLimit);

            console.log(`maintenanceIssuesWipLimit=${maintenanceIssuesWipLimit}`);
            core.setOutput('maintenanceIssuesWipLimit', maintenanceIssuesWipLimit);


            // How many attempts should be made to work on an issue? - Set outputs
            console.log(`attemptsPerBranch=${attemptsPerBranch}`);
            core.setOutput('attemptsPerBranch', attemptsPerBranch);

            console.log(`attemptsPerIssue=${attemptsPerIssue}`);
            core.setOutput('attemptsPerIssue', attemptsPerIssue);


            // Web publishing - Set outputs
            console.log(`docRoot=${docRoot}`);
            core.setOutput('docRoot', docRoot);

            // Contents of the agentic-lib.yml file
            console.log(`agentConfigContent=${agentConfigContent}`);
            core.setOutput('agentConfigContent', agentConfigContent);

    outputs:
      # Filepaths for elaborator workflows
      missionFilepath: ${{ steps.agentic-lib.outputs.missionFilepath }}
      librarySourcesFilepath: ${{ steps.agentic-lib.outputs.librarySourcesFilepath }}
      librarySourcesLimit: ${{ steps.agentic-lib.outputs.librarySourcesLimit }}
      libraryDocumentsPath: ${{ steps.agentic-lib.outputs.libraryDocumentsPath }}
      libraryDocumentsLimit: ${{ steps.agentic-lib.outputs.libraryDocumentsLimit }}
      featuresPath: ${{ steps.agentic-lib.outputs.featuresPath }}
      featuresLimit: ${{ steps.agentic-lib.outputs.featuresLimit }}

      # Filepaths for engineer workflows
      contributingFilepath: ${{ steps.agentic-lib.outputs.contributingFilepath }}
      allTestsPaths: ${{ steps.agentic-lib.outputs.allTestsPaths }}
      targetTestsPath: ${{ steps.agentic-lib.outputs.targetTestsPath }}
      allSourcePaths: ${{ steps.agentic-lib.outputs.allSourcePaths }}
      targetSourcePath: ${{ steps.agentic-lib.outputs.targetSourcePath }}
      dependenciesFilepath: ${{ steps.agentic-lib.outputs.dependenciesFilepath }}
      documentationPath: ${{ steps.agentic-lib.outputs.documentationPath }}

      # Filepaths for maintainer workflows
      formattingFilepath: ${{ steps.agentic-lib.outputs.formattingFilepath }}
      lintingFilepath: ${{ steps.agentic-lib.outputs.lintingFilepath }}
      readmeFilepath: ${{ steps.agentic-lib.outputs.readmeFilepath }}

      # Filepath access permissions
      writeableFilepaths: ${{ steps.agentic-lib.outputs.writeableFilepaths }}

      # Execution commands
      buildScript: ${{ steps.agentic-lib.outputs.buildScript }}
      testScript: ${{ steps.agentic-lib.outputs.testScript }}
      mainScript: ${{ steps.agentic-lib.outputs.mainScript }}

      # How many issues should be available to be picked up?
      featureDevelopmentIssuesWipLimit: ${{ steps.agentic-lib.outputs.featureDevelopmentIssuesWipLimit }}
      maintenanceIssuesWipLimit: ${{ steps.agentic-lib.outputs.maintenanceIssuesWipLimit }}

      # How many attempts should be made to work on an issue?
      attemptsPerBranch: ${{ steps.agentic-lib.outputs.attemptsPerBranch }}
      attemptsPerIssue: ${{ steps.agentic-lib.outputs.attemptsPerIssue }}

      # Web publishing
      docRoot: ${{ steps.agentic-lib.outputs.docRoot }}

      # Contents of the agentic-lib.yml file
      agentConfigContent: ${{ steps.agentic-lib.outputs.agentConfigContent }}
