# .github/workflows/wfr-github-publish-web.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ publish web

on:
  workflow_call:
    inputs:
      public:
        description: 'The public directory to use. e.g. "public"'
        type: string
        required: false
        default: 'public'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
      npmAuthOrganisation:
        description: 'The npm auth organisation to use. e.g. "@xn-intenton-z2a"'
        type: string
        required: false
      lastActivityName:
        description: 'The name of the last activity. e.g. "publish-web"'
        type: string
        required: false
      lastActivityBranchName:
        description: 'The name of the last activity branch. e.g. "main"'
        type: string
        required: false
      branchPrefix:
        description: 'The prefix for the issue branch. e.g. "agentic-lib-issue-"'
        type: string
        required: false
        default: 'agentic-lib-issue-'
      nextIssue:
        description: 'The next issue to review. e.g. "123 My issue automated"'
        type: string
        required: false
      publishToGitHubPages:
        description: 'Whether to publish to GitHub Pages. e.g. "true"'
        type: string
        required: false
        default: 'true'
      libraryDocumentsPath:
        description: 'The directory containing feature files. e.g. "library/"'
        type: string
        required: false
        default: 'library/'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      thisRepositoryWebsiteUrl:
        description: 'The URL of the website. e.g. "https://xn-intenton-z2a.github.io/agentic-lib/library-index.html"'
        value: ${{ jobs.publish-web.outputs.thisRepositoryWebsiteUrl }}

jobs:
  publish-web:
    runs-on: ubuntu-latest

    env:
      public: ${{ inputs.public || 'public' }}
      cache: ${{ inputs.cache || 'npm' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      lastActivityName: ${{ inputs.lastActivityName || '' }}
      lastActivityBranchName: ${{ inputs.lastActivityBranchName || '' }}
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-issue-' }}
      nextIssue: ${{ inputs.nextIssue || '' }}
      publishToGitHubPages: ${{ inputs.publishToGitHubPages || 'true' }}
      libraryDocumentsPath: ${{ inputs.libraryDocumentsPath || 'library/' }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: engine
        id: engine
        shell: bash
        run: |
          if [ -f ".github/agents/agentic-lib.yml" ]; then
            engine=$(grep '^schedule:' .github/agents/agentic-lib.yml | awk '{print $2}')
            echo "engine=${engine}"
            echo "engine=${engine}" >> $GITHUB_OUTPUT
          else
            echo "engine=default"
            echo "engine=default" >> $GITHUB_OUTPUT
            echo "Warning: .github/agents/agentic-lib.yml file not found, using default engine"
          fi

      - run: npm install
        if: ${{ env.publishToGitHubPages == 'true' }}

      - name: Generate HTML articles from library documents
        id: generate-articles
        if: ${{ env.publishToGitHubPages == 'true' }}
        shell: bash
        run: |
          # Create public directory if it doesn't exist
          mkdir -p ${{ env.public }}

          # Check if scripts directory and md-to-html.js exist
          if [ ! -d "scripts" ]; then
            echo "Warning: scripts directory not found, creating it"
            mkdir -p scripts
          fi

          if [ ! -f "scripts/md-to-html.js" ]; then
            echo "Error: scripts/md-to-html.js not found"
            echo "Creating a simple placeholder HTML file for each markdown file"

            # Find all markdown files in the library directory
            find "${{ env.libraryDocumentsPath }}" -maxdepth 2 -type f -name "*.md" | while read -r file; do
              # Get the filename without path and extension
              filename=$(basename "$file" .md)
              echo "Creating placeholder HTML for $file to ${{ env.public }}/$filename.html"

              # Create a simple HTML file
              echo "<!DOCTYPE html><html><head><title>$filename</title></head><body><h1>$filename</h1><p>Markdown conversion failed: scripts/md-to-html.js not found</p></body></html>" > "${{ env.public }}/$filename.html"
            done
          else
            # Find all markdown files in the library directory
            find "${{ env.libraryDocumentsPath }}" -maxdepth 2 -type f -name "*.md" | while read -r file; do
              # Get the filename without path and extension
              filename=$(basename "$file" .md)
              echo "Converting $file to ${{ env.public }}/$filename.html"

              # Convert markdown to HTML using the md-to-html.js script
              ./scripts/md-to-html.js < "$file" > "${{ env.public }}/$filename.html"
            done
          fi

          # Create a list of all articles for the index page
          echo "Generating article list for index page"
          article_list=""

          # First, find all markdown files in the library directory and extract information
          find "${{ env.libraryDocumentsPath }}" -maxdepth 2 -type f -name "*.md" | sort | while read -r md_file; do
            filename=$(basename "$md_file" .md)
            html_filename="${filename}.html"

            # Extract title, URL, and description from the markdown file
            title=$(head -n 1 "$md_file" | sed 's/^# //')
            url=$(grep -m 1 "^http" "$md_file" || echo "")

            # Try to extract a description from the Content section or Crawl Summary
            description=""
            if grep -q "^## Content" "$md_file"; then
              # Get the first non-empty line after "## Content" that's not a header
              description=$(awk '/^## Content/{flag=1; next} flag && /^[^#]/ && NF {print; exit}' "$md_file")
            fi

            # If no description found in Content, try Crawl Summary
            if [ -z "$description" ] && grep -q "^## Crawl Summary" "$md_file"; then
              description=$(awk '/^## Crawl Summary/{flag=1; next} flag && /^[^#]/ && NF {print; exit}' "$md_file")
            fi

            # Truncate description if it's too long
            if [ ${#description} -gt 150 ]; then
              description="${description:0:147}..."
            fi

            # Create a more informative link with title, description, and URL
            if [ -n "$url" ]; then
              article_list="${article_list}<li><a href=\"${html_filename}\" class=\"doc-title\">${title}</a> <a href=\"${url}\" target=\"_blank\" class=\"source-link\">(Original Source)</a>"
            else
              article_list="${article_list}<li><a href=\"${html_filename}\" class=\"doc-title\">${title}</a>"
            fi

            # Add description if available
            if [ -n "$description" ]; then
              article_list="${article_list}<p class=\"description\">${description}</p>"
            fi

            article_list="${article_list}</li>\n"
          done

          # Save the article list to a file for later use
          echo -e "$article_list" > "${{ env.public }}/article_list.txt"

          echo "Articles generated successfully"

      - name: Generate index page
        if: ${{ env.publishToGitHubPages == 'true' }}
        shell: bash
        run: |
          # Check if README.md exists
          if [ ! -f "README.md" ]; then
            echo "Warning: README.md not found, creating a placeholder"
            echo "# Project README" > README.md
            echo "This is a placeholder README file." >> README.md
          fi

          # Check if scripts/md-to-html.js exists
          if [ ! -f "scripts/md-to-html.js" ]; then
            echo "Warning: scripts/md-to-html.js not found, creating a simple HTML file"
            echo "<!DOCTYPE html><html><head><title>README</title></head><body><h1>Project README</h1><p>This is a placeholder README file.</p></body></html>" > ${{ env.public }}/readme.html
          else
            # Convert README.md to HTML for the summary
            ./scripts/md-to-html.js < README.md > ${{ env.public }}/readme.html
          fi

          # Generate library-index.html using the generate-library-index.js script
          if [ -f "scripts/generate-library-index.js" ]; then
            echo "Generating library-index.html using scripts/generate-library-index.js"
            chmod +x scripts/generate-library-index.js
            node scripts/generate-library-index.js

            # Copy the generated library-index.html to the public directory
            cp library-index.html ${{ env.public }}/library-index.html
            echo "Library index page generated successfully"
          else
            echo "Warning: scripts/generate-library-index.js not found, using fallback method"

            # Extract the article list
            article_list=$(cat "${{ env.public }}/article_list.txt")

            # Create the library-index.html file with the article list and README summary
            # Using echo commands instead of a here-document to avoid termination issues
            echo '<!DOCTYPE html>' > ${{ env.public }}/library-index.html
            echo '<html lang="en">' >> ${{ env.public }}/library-index.html
            echo '<head>' >> ${{ env.public }}/library-index.html
            echo '  <meta charset="UTF-8">' >> ${{ env.public }}/library-index.html
            echo '  <title>Library Documents</title>' >> ${{ env.public }}/library-index.html
            echo '  <style>' >> ${{ env.public }}/library-index.html
            echo '    body { font-family: Arial, sans-serif; margin: 2em; background-color: #f9f9f9; color: #333; }' >> ${{ env.public }}/library-index.html
            echo '    header { padding-bottom: 1em; border-bottom: 2px solid #ccc; margin-bottom: 1em; }' >> ${{ env.public }}/library-index.html
            echo '    h1 { font-size: 2em; }' >> ${{ env.public }}/library-index.html
            echo '    h2 { font-size: 1.5em; margin-top: 1.5em; }' >> ${{ env.public }}/library-index.html
            echo '    section { margin-bottom: 1.5em; }' >> ${{ env.public }}/library-index.html
            echo '    ul { list-style: none; padding: 0; }' >> ${{ env.public }}/library-index.html
            echo '    li { margin: 1em 0; padding: 0.8em; background-color: #fff; border-radius: 5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }' >> ${{ env.public }}/library-index.html
            echo '    li:hover { background-color: #f0f8ff; }' >> ${{ env.public }}/library-index.html
            echo '    .label { font-weight: bold; }' >> ${{ env.public }}/library-index.html
            echo '    .doc-title { font-weight: bold; font-size: 1.1em; }' >> ${{ env.public }}/library-index.html
            echo '    .source-link { font-size: 0.9em; margin-left: 0.5em; color: #6c757d; }' >> ${{ env.public }}/library-index.html
            echo '    .source-link:hover { color: #0366d6; }' >> ${{ env.public }}/library-index.html
            echo '    .description { margin-top: 0.5em; margin-bottom: 0; font-size: 0.95em; color: #555; line-height: 1.4; }' >> ${{ env.public }}/library-index.html
            echo '    footer { margin-top: 2em; font-size: 0.9em; color: #777; }' >> ${{ env.public }}/library-index.html
            echo '    a { color: #0366d6; text-decoration: none; }' >> ${{ env.public }}/library-index.html
            echo '    a:hover { text-decoration: underline; }' >> ${{ env.public }}/library-index.html
            echo '  </style>' >> ${{ env.public }}/library-index.html
            echo '</head>' >> ${{ env.public }}/library-index.html
            echo '<body>' >> ${{ env.public }}/library-index.html
            echo '  <header>' >> ${{ env.public }}/library-index.html
            echo '    <h1>Library Documents</h1>' >> ${{ env.public }}/library-index.html
            echo '  </header>' >> ${{ env.public }}/library-index.html
            echo '' >> ${{ env.public }}/library-index.html
            echo '  <section>' >> ${{ env.public }}/library-index.html
            echo '    <h2>Library Documents</h2>' >> ${{ env.public }}/library-index.html
            echo '    <p>Below are links to various library documents with their original sources:</p>' >> ${{ env.public }}/library-index.html
            echo '    <ul>' >> ${{ env.public }}/library-index.html
            echo "      ${article_list}" >> ${{ env.public }}/library-index.html
            echo '    </ul>' >> ${{ env.public }}/library-index.html
            echo '  </section>' >> ${{ env.public }}/library-index.html
            echo '' >> ${{ env.public }}/library-index.html
            echo '  <footer>' >> ${{ env.public }}/library-index.html
            echo "    <p>Generated on $(date -u +"%Y-%m-%dT%H:%M:%SZ")</p>" >> ${{ env.public }}/library-index.html
            echo '  </footer>' >> ${{ env.public }}/library-index.html
            echo '</body>' >> ${{ env.public }}/library-index.html
            echo '</html>' >> ${{ env.public }}/library-index.html

            echo "Index page generated using fallback method"
          fi

      - name: Generate index page
        shell: bash
        run: |
          ./scripts/md-to-html.js < README.md > ${{ env.public }}/index.agentic-lib.html
          cat ${{ env.public }}/index.agentic-lib.html | sed 's/agentic-lib/${{ github.event.repository.name }}/g' > ${{ env.public }}/index.html

      - name: Deploy to GitHub Pages
        if: ${{ env.publishToGitHubPages == 'true' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.public }}
          publish_branch: github-pages
          keep_files: true
          enable_jekyll: 'true'

      - name: Upload generated site as artifact
        if: ${{ env.publishToGitHubPages == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: site-${{ github.run_id }}
          path: ${{ env.public }}

      - name: Output published github pages URLs
        if: ${{ env.publishToGitHubPages == 'true' }}
        id: output-pages-urls
        run: |
          echo "[INFO] Determining GitHub Pages URL..."
          # GitHub Pages URL typically: https://<owner>.github.io/<repo>/
          repoName=${{ github.event.repository.name }}
          owner=${{ github.repository_owner }}
          baseUrl="https://${owner}.github.io/${repoName}"
          thisRepositoryWebsiteUrl="${baseUrl}/library-index.html"
          thisHomePageUrl="${baseUrl}/index.html"
          echo "::notice:: thisRepositoryWebsiteUrl: ${thisRepositoryWebsiteUrl}"
          echo "thisRepositoryWebsiteUrl=${thisRepositoryWebsiteUrl}" >> $GITHUB_OUTPUT
          echo "::notice:: thisHomePageUrl: ${thisHomePageUrl}"
          echo "thisHomePageUrl=${thisHomePageUrl}" >> $GITHUB_OUTPUT

    outputs:
      thisRepositoryWebsiteUrl: ${{ steps.output-pages-urls.outputs.thisRepositoryWebsiteUrl }}
