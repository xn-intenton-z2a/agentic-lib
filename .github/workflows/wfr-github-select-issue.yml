# .github/workflows/wfr-github-select-issue.yml

#
# agentic-lib
# Copyright (C) 2025 Polycode Limited
#
# This file is part of agentic-lib.
#
# agentic-lib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License v3.0 (GPL‑3).
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# IMPORTANT: Any derived work must include the following attribution:
# "This work is derived from https://github.com/xn-intenton-z2a/agentic-lib"
#

name: ∞ select-issue

on:
  workflow_call:
    inputs:
      issueNumber:
        description: 'The issue number to review. e.g. "123"'
        type: string
        required: true
      selectionLabel:
        description: 'Label used to select issues with this label. e.g. "automated"'
        required: false
        type: string
        default: 'automated'
      filterLabel:
        description: 'Label used to filter issues without this label. e.g. "in-progress"'
        required: false
        type: string
        default: 'in-progress'
      cache:
        description: 'The cache to use for npm. e.g. "npm"'
        type: string
        required: false
        default: 'npm'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
    outputs:
      issueNumber:
        description: 'The issue number to review. e.g. "123"'
        value: ${{ jobs.select-issue.outputs.issueNumber }}
      issueTitle:
        description: 'The issue title found. e.g. "My issue"'
        value: ${{ jobs.select-issue.outputs.issueTitle }}
      issueDescription:
        description: 'The issue description found. e.g. "My issue description"'
        value: ${{ jobs.select-issue.outputs.issueDescription }}
      issueLabels:
        description: 'The issue labels found. e.g. "automated"'
        value: ${{ jobs.select-issue.outputs.issueLabels }}
      merged:
        description: 'Set to "true", if the issue has been merged either already or by this process.'
        value: ${{ jobs.select-issue.outputs.merged }}

jobs:
  select-issue:
    runs-on: ubuntu-latest

    env:
      issueNumber: ${{ inputs.issueNumber }}
      selectionLabel: ${{ inputs.selectionLabel || 'automated' }}
      filterLabel: ${{ inputs.filterLabel || 'in-progress' }}
      cache: ${{ inputs.cache || 'npm' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: select-issue
        id: select-issue
        uses: actions/github-script@v7
        env:
          workflowRunUrl: ${{ github.run_url }}
          workflowEvent: ${{ github.event_name }}
          workflowInputs: ${{ toJson(github.event.inputs) }}
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const issueNumberInput = process.env.issueNumber;
            const selectionLabel = process.env.selectionLabel;
            const filterLabel = process.env.filterLabel;
            const workflowRunUrl = process.env.workflowRunUrl;
            const workflowEvent = process.env.workflowEvent;
            const workflowInputs = process.env.workflowInputs;

            core.info(`issueNumberInput: ${issueNumberInput}`);
            core.info(`selectionLabel: ${selectionLabel}`);
            core.info(`filterLabel: ${filterLabel}`);
            core.info(`workflowRunUrl: ${workflowRunUrl}`);
            core.info(`workflowEvent: ${workflowEvent}`);
            core.info(`workflowInputs: ${workflowInputs}`);

            let issueNumberOutput;
            let issueTitleOutput;
            let issueDescriptionOutput;
            let issueLabelsOutput;

            let issue;
            if (parseInt(issueNumberInput)) {
              const response = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumberInput)
              });
              issue = response.data;
            }
            
            if (issue) {
              issueNumberOutput = issue.number;
              core.info(`Found issue with number: ${issueNumberInput}`);
              issueTitleOutput = issue.title; 
              issueDescriptionOutput = issue.body;
              issueLabelsOutput = issue.labels.map(label => label.name).join(', ');
            } else {
              issueNumberOutput = '';
              core.info(`No issue found with number: ${issueNumberInput}, searching for alternate...`);
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: selectionLabel,
                per_page: 10
              });

              // Filter out issues with filterLabel
              const filteredIssues = issues.filter(issue => 
                !issue.labels.some(label => label.name === filterLabel)
              );

              if (!filteredIssues || filteredIssues.length === 0) {
                issueNumberOutput = '';
                issueTitleOutput = '';
                issueDescriptionOutput = '';
                issueLabelsOutput = '';
                core.info(`No open issues found with label: ${selectionLabel} that are not ${filterLabel}`);
              } else {
                issueNumberOutput = filteredIssues[0].number;
                issueTitleOutput = filteredIssues[0].title; 
                issueDescriptionOutput = filteredIssues[0].body;
                issueLabelsOutput = filteredIssues[0].labels.map(label => label.name).join(', ');
                core.info(`Open issue '${issueNumberOutput}' found with label: ${selectionLabel} but not ${filterLabel}`);
              }
            }
            
            // Add the workflow run URL as an issue comment along with the workflow event and inputs and environment 
            // variables and link to the repository's main branch at this commit.
            if(issueNumberOutput) {
              const { data: branchData } = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main'
              });
              const mainHeadUrl = branchData.commit.html_url
              core.info(`mainHeadUrl: ${mainHeadUrl}`);
              const commentBody = `Workflow run URL: ${workflowRunUrl}\nWorkflow event: ${workflowEvent}\nWorkflow inputs: ${workflowInputs}\nHEAD of main URL: ${mainHeadUrl}`;
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumberOutput,
                body: commentBody
              });
            }

            core.setOutput("issueNumber", issueNumberOutput);
            core.setOutput("issueTitle", issueTitleOutput);
            core.setOutput("issueDescription", issueDescriptionOutput);
            core.setOutput("issueLabels", issueLabelsOutput);
            core.info(`issueNumber '${issueNumberOutput}'`);
            core.info(`issueTitle '${issueTitleOutput}'`);
            core.info(`issueDescription '${issueDescriptionOutput}'`);
            core.info(`issueLabels '${issueLabelsOutput}'`);

      - id: validate-issue-number
        run: |
          issueNumber="${{ steps.select-issue.outputs.issueNumber }}"
          if [[ -n "$issueNumber" && "$issueNumber" =~ [0-9] ]]; then
            echo "[$issueNumber] is a valid issue number."
            echo "isValid=true" >> $GITHUB_OUTPUT
          else
            echo "[$issueNumber] is not a valid issue number."
            echo "isValid=false" >> $GITHUB_OUTPUT
          fi

      - name: has-merged-label
        id: has-merged-label
        if: steps.validate-issue-number.outputs.isValid == 'true'
        uses: actions/github-script@v7
        env:
          issueNumber: ${{ steps.select-issue.outputs.issueNumber }}
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const issueNumberStr = process.env.issueNumber
            const issueNumber = (parseInt(issueNumberStr) ? parseInt(issueNumberStr) : "");
            core.info(`Retrieving issue ${issueNumber} details...`);
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            core.info(`Issue title: ${issue.title}`);

            const merged = issue.labels.some(label => label.name.toLowerCase() === "merged") ? "true" : "false";

            core.setOutput("merged", merged);
            core.info(`merged '${merged}'`);

    outputs:
      issueNumber: ${{ steps.select-issue.outputs.issueNumber }}
      issueTitle: ${{ steps.select-issue.outputs.issueTitle }}
      issueDescription: ${{ steps.select-issue.outputs.issueDescription }}
      issueLabels: ${{ steps.select-issue.outputs.issueLabels }}
      merged: ${{ steps.has-merged-label.outputs.merged }}
