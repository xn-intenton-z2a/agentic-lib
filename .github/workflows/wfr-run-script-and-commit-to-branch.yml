# .github/workflows/wfr-run-script-and-push-changes.yml
name: âˆž Run script, test and push

on:
  workflow_call:
    inputs:
      script:
        description: 'The script must be runnable as: `npm ci ; <script>`.'
        type: string
        required: false
        default: 'prettier --write'
      sarifScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and output a SARIF file. e.g. `npm run linting-json`'
        type: string
        required: false
        default: 'npm run linting-json'
      testScript:
        description: 'The script must be runnable as: `npm ci ; <script>` and succeed with a zero exit code. e.g. `npm test`'
        type: string
        required: false
        default: 'npm test'
      branch:
        description: 'The branch to push changes to. e.g. "apply-script"'
        type: string
        required: false
        default: 'apply-script'
      npmAuthOrganisation:
        description: 'The GitHub organisation to authenticate with for npm. e.g. "xn-intenton-z2a"'
        type: string
        required: false
        default: ''
      gitUserEmail:
        description: 'The email to use for git commits. e.g. "action@github.com"'
        type: string
        required: false
        default: 'action@github.com'
      gitUserName:
        description: 'The name to use for git commits. e.g. "GitHub Actions[bot]"'
        type: string
        required: false
        default: 'GitHub Actions[bot]'
      gitCommitMessage:
        description: 'The message to use for git commits. e.g. "Updated by script"'
        type: string
        required: false
        default: 'Updated by script'
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
    outputs:
      updatedFiles:
          description: 'Whether files were updated by the script. e.g. "true"'
          value: ${{ jobs.update-and-push.outputs.updatedFiles }}
      scriptOutput:
        description: 'The output from running the script. '
        value: ${{ jobs.update-and-push.outputs.scriptOutput }}
      resultsCount:
        description: 'The number of results from the SARIF script. e.g. "1"'
        value: ${{ jobs.update-and-push.outputs.resultsCount }}
      fixRequired:
        description: 'Whether the SARIF script requires fixes. e.g. "true"'
        value: ${{ jobs.update-and-push.outputs.fixRequired }}

jobs:
  update-and-push:
    runs-on: ubuntu-latest

    env:
      script: ${{ inputs.script || 'prettier --write' }}
      sarifScript: ${{ inputs.sarifScript || 'npm run linting-json' }}
      testScript: ${{ inputs.testScript || 'npm test' }}
      branch: ${{ inputs.branch || 'apply-script' }}
      npmAuthOrganisation: ${{ inputs.npmAuthOrganisation || '' }}
      gitUserEmail: ${{ inputs.gitUserEmail || 'action@github.com' }}
      gitUserName: ${{ inputs.gitUserName || 'GitHub Actions[bot]' }}
      gitCommitMessage: ${{ inputs.gitCommitMessage || 'Updated by inputs.script' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check GitHub authentication
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          curl --include --header "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" https://api.github.com/user

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - run: npm ci

      - name: script
        id: script
        shell: bash
        run: |
          savedOptions=$(set +o) \
          && set +e \
          && ${{ env.script }} \
          ; if git diff --quiet; then
            echo "updated=false" | tee -a "${GITHUB_OUTPUT?}"
          else
            echo "updated=true" | tee -a "${GITHUB_OUTPUT?}"
          fi \
          ; eval "${savedOptions?}" \
          ;
        continue-on-error: true

      - name: sarif-script
        id: sarif-script
        continue-on-error: true
        shell: bash
        run: |
          set +e
          results=$(${{ env.sarifScript }})
          exitCode="$?"
          set -e
          echo "exitCode=${exitCode}"
          fixRequired=$([ $? -eq 0 ] && echo 'true' || echo 'false')
          echo "fixRequired={fixRequired}" > $GITHUB_OUTPUT
          echo "fixRequired=${fixRequired}"
          resultsCount=$(echo "${results}" | jq '.runs[0].results | length' 2>/dev/null || echo "unknown")
          echo "resultsCount=${resultsCount}" > $GITHUB_OUTPUT
          echo "resultsCount=${resultsCount}"
          echo "results: ${results}"

      - name: Test
        if: ${{ steps.script.outputs.updated == 'true' || env.git-force == 'true' }}
        shell: bash
        run: |
          ${{ env.testScript }}

      - name: Tear down npm auth
        if: ${{ env.npmAuthOrganisation != '' }}
        run: rm -vf .npmrc

      - name: Commit
        if: ${{ steps.script.outputs.updated == 'true' || env.git-force == 'true' }}
        shell: bash
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v
          git switch -c '${{ env.branch }}'
          git add -v --all
          git commit -v -m '${{ env.gitCommitMessage }}'
          git push --set-upstream origin '${{ env.branch }}'
          git push -v
          git status -v

      - name: Run script
        id: script-second-pass
        shell: bash
        run: |
          set +e
          output=$(${{ env.script }} 2>&1)
          echo "output<<EOF" >> "$GITHUB_OUTPUT"
          echo "$output" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "output=${output}"
          set -e

    outputs:
      updatedFiles: ${{ steps.script.outputs.updated }}
      scriptOutput: ${{ steps.script-second-pass.outputs.output }}
      resultsCount: ${{ steps.sarif-script.outputs.resultsCount }}
      fixRequired: ${{ steps.sarif-script.outputs.fixRequired }}