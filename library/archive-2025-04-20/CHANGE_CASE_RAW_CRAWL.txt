Change Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\nSign UpUsername *Email addressYour email address will be added to the metadata of packages that you publish, so it may be seen publicly.PasswordShowMinimum of 10 characters and must meet our  password guidelinesI agree to the End User License Agreement and the Privacy Policy. *Create an AccountAlready have an account?Sign In\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependents (4309)@zeushq/nextjs-zapi@mablhq/mabl-cli@n3tr/mono-hello-worldraml1-docamdbutlername-this-colorfontainforward-ferretjsonitron@ennube/shellnode-baselinechange-object-casegraphql-codegenjmf-datajmf-graphqlscanhub-managerbootstrap-table-reacttap-fluxprotobuf-compilergenerator-angular-es6generator-agtoolboxmerapi-consoleloopback-hook-socketgenerator-typingsoghlinerslush-regeneratorjson2modelstylegengenerator-aangtjentcreate-react-componentresx-parserapib2gogrunt-swagger-ts-angular-codegenmockbingenerator-diversity-componentendpoints-angular-client-generatorneymophantasmametalsmith-shopifyblackjack-utilsgenerator-ang2health-monitor-serviceraistlinraml-parser-java-interfacesgenerator-beamng-appmappetask-registry-isdkgulp-less-branding-jsrest-ormand more...Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependents (4309)@zeushq/nextjs-zapi@mablhq/mabl-cli@n3tr/mono-hello-worldraml1-docamdbutlername-this-colorfontainforward-ferretjsonitron@ennube/shellnode-baselinechange-object-casegraphql-codegenjmf-datajmf-graphqlscanhub-managerbootstrap-table-reacttap-fluxprotobuf-compilergenerator-angular-es6generator-agtoolboxmerapi-consoleloopback-hook-socketgenerator-typingsoghlinerslush-regeneratorjson2modelstylegengenerator-aangtjentcreate-react-componentresx-parserapib2gogrunt-swagger-ts-angular-codegenmockbingenerator-diversity-componentendpoints-angular-client-generatorneymophantasmametalsmith-shopifyblackjack-utilsgenerator-ang2health-monitor-serviceraistlinraml-parser-java-interfacesgenerator-beamng-appmappetask-registry-isdkgulp-less-branding-jsrest-ormand more...Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag5.4.41,826,164latestVersion HistoryVersionDownloads (Last 7 Days)Published5.4.41,826,164a year ago5.4.329,160a year ago5.4.210,140a year ago5.4.1406a year ago5.4.0618a year ago5.3.03,484a year ago5.2.06,313a year ago5.1.282,745a year ago5.1.13a year ago5.1.05a year ago5.0.23,2732 years ago5.0.1302 years ago5.0.06152 years ago4.1.26,014,3104 years ago4.1.154,1015 years ago4.1.04235 years ago4.0.1365 years ago4.0.0505 years ago3.1.01,580,9546 years ago3.0.261,3567 years ago3.0.122,4338 years ago3.0.07,5099 years ago2.3.1301,5579 years ago2.3.03,04310 years ago2.2.075210 years ago2.1.615,56510 years ago2.1.51311 years ago2.1.4411 years ago2.1.3311 years ago2.1.2311 years ago2.1.11111 years ago2.1.0211 years ago2.0.19611 years ago2.0.01111 years ago1.0.61,51811 years ago1.0.5611 years ago1.0.4611 years ago1.0.2212 years ago1.0.1312 years ago1.0.0612 years ago0.0.5112 years ago0.0.4512 years ago0.0.3412 years ago0.0.2812 years ago0.0.1212 years agoPackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
VersionsCurrent TagsVersionDownloads (Last 7 Days)Tag5.4.41,826,164latestVersion HistoryVersionDownloads (Last 7 Days)Published5.4.41,826,164a year ago5.4.329,160a year ago5.4.210,140a year ago5.4.1406a year ago5.4.0618a year ago5.3.03,484a year ago5.2.06,313a year ago5.1.282,745a year ago5.1.13a year ago5.1.05a year ago5.0.23,2732 years ago5.0.1302 years ago5.0.06152 years ago4.1.26,014,3104 years ago4.1.154,1015 years ago4.1.04235 years ago4.0.1365 years ago4.0.0505 years ago3.1.01,580,9546 years ago3.0.261,3567 years ago3.0.122,4338 years ago3.0.07,5099 years ago2.3.1301,5579 years ago2.3.03,04310 years ago2.2.075210 years ago2.1.615,56510 years ago2.1.51311 years ago2.1.4411 years ago2.1.3311 years ago2.1.2311 years ago2.1.11111 years ago2.1.0211 years ago2.0.19611 years ago2.0.01111 years ago1.0.61,51811 years ago1.0.5611 years ago1.0.4611 years ago1.0.2212 years ago1.0.1312 years ago1.0.0612 years ago0.0.5112 years ago0.0.4512 years ago0.0.3412 years ago0.0.2812 years ago0.0.1212 years agoPackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nSearch results596 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115hast-util-from-parse5hast utility to transform from a `parse5` ASTastchangehast-utilhasttransformunistutilityutilwooorm• 8.0.3 • 2 months ago •  70 dependents •  MITpublished version 8.0.3, 2 months ago70 dependents licensed under $MIT18,847,300mimic-functionMake a function mimic another onefunctionmimicimitaterenamecopyinheritpropertiesnamefuncfnsetinferchangesindresorhus• 5.0.1 • a year ago •  31 dependents •  MITpublished version 5.0.1, a year ago31 dependents licensed under $MIT36,888,075skin-toneChange the skin tone of an emoji 👌👌🏻👌🏼👌🏽👌🏾👌🏿emojiemojisskintonetypeunicodeemoticonfitzpatrickscalemodifychangestripremovesindresorhus• 4.0.0 • a year ago •  21 dependents •  MITpublished version 4.0.0, a year ago21 dependents licensed under $MIT8,887,744hast-util-to-estreehast utility to transform to estree (JavaScript AST) JSXchangeecmascriptestreehast-utilhasthtmljavascriptjsxmdxrehypetransformunistutilityutilwooorm• 3.1.3 • a month ago •  39 dependents •  MITpublished version 3.1.3, a month ago39 dependents licensed under $MIT7,707,834hook-stdHook and modify stdout and stderrhookinterceptcapturemodifychangetestassertcheckstdstdiostdoutstderrconsolelogsindresorhus• 3.0.0 • 4 years ago •  104 dependents •  MITpublished version 3.0.0, 4 years ago104 dependents licensed under $MIT6,773,791on-changeWatch an object or array for changesonchangewatchobjectarraychangesobservewatcherobserverproxyproxieses2015eventlistenersindresorhus• 5.0.1 • a year ago •  108 dependents •  MITpublished version 5.0.1, a year ago108 dependents licensed under $MIT1,305,056onchangeUse glob patterns to watch file sets and run a command when anything is added, changed or deleted.globwatchchangeblakeembrey• 7.1.0 • 4 years ago •  133 dependents •  MITpublished version 7.1.0, 4 years ago133 dependents licensed under $MIT1,275,034change-emitterListen for changes. Like an event emitter that only emits a single event type. Really tiny.changeeventemitteristarkov• 0.1.6 • 8 years ago •  33 dependents •  MITpublished version 0.1.6, 8 years ago33 dependents licensed under $MIT3,038,459array-moveMove an array item to a different positionarraymovechangepositionindexsindresorhus• 4.0.0 • 4 years ago •  563 dependents •  MITpublished version 4.0.0, 4 years ago563 dependents licensed under $MIT1,327,127modify-filenameModify the filename in a pathmodifychangereplacefilenamefilenamepathsindresorhus• 2.0.0 • 4 years ago •  123 dependents •  MITpublished version 2.0.0, 4 years ago123 dependents licensed under $MIT1,146,243update-diffUpdate object by mapping diff propertiesupdate-diffmapmap-objobject-filtermap-objectupdatediffdifferencepatchobjectcomparechangedfcreative• 1.1.0 • 8 years ago •  2 dependents •  MITpublished version 1.1.0, 8 years ago2 dependents licensed under $MIT924,031change-file-extensionChange the file extension of a pathchangefilefilepathextensionextpathreplacemodifyrenameextnamebasenamefile-extensionfile-pathsindresorhus• 1.0.0 • 8 months ago •  2 dependents •  MITpublished version 1.0.0, 8 months ago2 dependents licensed under $MIT532,319auto-changelogCommand line tool for generating a changelog from git tags and commit historyautoautomaticchangelogchangeloggeneratorgitcommitcommitshistorycookpete• 2.5.0 • 7 months ago •  74 dependents •  MITpublished version 2.5.0, 7 months ago74 dependents licensed under $MIT596,957mouse-changeMouse state change listenermousestatelistenchangebuttonclickholdupdownoverpolyfillbugfixmikolalysenko• 1.4.0 • 8 years ago •  54 dependents •  MITpublished version 1.4.0, 8 years ago54 dependents licensed under $MIT926,260recursive-diffFind diff between any two variables where variables be any valid JavaScript data type like string, numeric, array or objectdeepdiffdifferenceobjectrecursivetreevariabletrackchangecosmicanant• 1.0.9 • 2 years ago •  28 dependents •  MITpublished version 1.0.9, 2 years ago28 dependents licensed under $MIT140,761mold-source-mapMold a source map that is almost perfect for you into one that is.moldchangemodifyadaptsourcemapsourcemapbrowserifythlorenz• 0.4.1 • 2 years ago •  15 dependents •  MITpublished version 0.4.1, 2 years ago15 dependents licensed under $MIT127,278@esm2cjs/mimic-fnMake a function mimic another one. This is a fork of sindresorhus/mimic-fn, but with CommonJS support.functionmimicimitaterenamecopyinheritpropertiesnamefuncfnsetinferchangealcalzone• 4.0.0 • 3 years ago •  1 dependents •  MITpublished version 4.0.0, 3 years ago1 dependents licensed under $MIT65,159ndarray-warpndarray image warpingndarrayimagevolumewarpcoordinatechangenonlineardeformmikolalysenko• 1.0.1 • 11 years ago •  8 dependents •  MITpublished version 1.0.1, 11 years ago8 dependents licensed under $MIT37,559bitwiseManipulates bits, nibbles, bytes, and buffers.andbinarybitbitsbitwisebufferbufferschangeflipmanipulatenandnibblenibblesnorView moreflorianwendelborn• 2.2.1 • a year ago •  66 dependents •  MITpublished version 2.2.1, a year ago66 dependents licensed under $MIT45,366123…30»\n\nSearch results596 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115hast-util-from-parse5hast utility to transform from a `parse5` ASTastchangehast-utilhasttransformunistutilityutilwooorm• 8.0.3 • 2 months ago •  70 dependents •  MITpublished version 8.0.3, 2 months ago70 dependents licensed under $MIT18,847,300mimic-functionMake a function mimic another onefunctionmimicimitaterenamecopyinheritpropertiesnamefuncfnsetinferchangesindresorhus• 5.0.1 • a year ago •  31 dependents •  MITpublished version 5.0.1, a year ago31 dependents licensed under $MIT36,888,075skin-toneChange the skin tone of an emoji 👌👌🏻👌🏼👌🏽👌🏾👌🏿emojiemojisskintonetypeunicodeemoticonfitzpatrickscalemodifychangestripremovesindresorhus• 4.0.0 • a year ago •  21 dependents •  MITpublished version 4.0.0, a year ago21 dependents licensed under $MIT8,887,744hast-util-to-estreehast utility to transform to estree (JavaScript AST) JSXchangeecmascriptestreehast-utilhasthtmljavascriptjsxmdxrehypetransformunistutilityutilwooorm• 3.1.3 • a month ago •  39 dependents •  MITpublished version 3.1.3, a month ago39 dependents licensed under $MIT7,707,834hook-stdHook and modify stdout and stderrhookinterceptcapturemodifychangetestassertcheckstdstdiostdoutstderrconsolelogsindresorhus• 3.0.0 • 4 years ago •  104 dependents •  MITpublished version 3.0.0, 4 years ago104 dependents licensed under $MIT6,773,791on-changeWatch an object or array for changesonchangewatchobjectarraychangesobservewatcherobserverproxyproxieses2015eventlistenersindresorhus• 5.0.1 • a year ago •  108 dependents •  MITpublished version 5.0.1, a year ago108 dependents licensed under $MIT1,305,056onchangeUse glob patterns to watch file sets and run a command when anything is added, changed or deleted.globwatchchangeblakeembrey• 7.1.0 • 4 years ago •  133 dependents •  MITpublished version 7.1.0, 4 years ago133 dependents licensed under $MIT1,275,034change-emitterListen for changes. Like an event emitter that only emits a single event type. Really tiny.changeeventemitteristarkov• 0.1.6 • 8 years ago •  33 dependents •  MITpublished version 0.1.6, 8 years ago33 dependents licensed under $MIT3,038,459array-moveMove an array item to a different positionarraymovechangepositionindexsindresorhus• 4.0.0 • 4 years ago •  563 dependents •  MITpublished version 4.0.0, 4 years ago563 dependents licensed under $MIT1,327,127modify-filenameModify the filename in a pathmodifychangereplacefilenamefilenamepathsindresorhus• 2.0.0 • 4 years ago •  123 dependents •  MITpublished version 2.0.0, 4 years ago123 dependents licensed under $MIT1,146,243update-diffUpdate object by mapping diff propertiesupdate-diffmapmap-objobject-filtermap-objectupdatediffdifferencepatchobjectcomparechangedfcreative• 1.1.0 • 8 years ago •  2 dependents •  MITpublished version 1.1.0, 8 years ago2 dependents licensed under $MIT924,031change-file-extensionChange the file extension of a pathchangefilefilepathextensionextpathreplacemodifyrenameextnamebasenamefile-extensionfile-pathsindresorhus• 1.0.0 • 8 months ago •  2 dependents •  MITpublished version 1.0.0, 8 months ago2 dependents licensed under $MIT532,319auto-changelogCommand line tool for generating a changelog from git tags and commit historyautoautomaticchangelogchangeloggeneratorgitcommitcommitshistorycookpete• 2.5.0 • 7 months ago •  74 dependents •  MITpublished version 2.5.0, 7 months ago74 dependents licensed under $MIT596,957mouse-changeMouse state change listenermousestatelistenchangebuttonclickholdupdownoverpolyfillbugfixmikolalysenko• 1.4.0 • 8 years ago •  54 dependents •  MITpublished version 1.4.0, 8 years ago54 dependents licensed under $MIT926,260recursive-diffFind diff between any two variables where variables be any valid JavaScript data type like string, numeric, array or objectdeepdiffdifferenceobjectrecursivetreevariabletrackchangecosmicanant• 1.0.9 • 2 years ago •  28 dependents •  MITpublished version 1.0.9, 2 years ago28 dependents licensed under $MIT140,761mold-source-mapMold a source map that is almost perfect for you into one that is.moldchangemodifyadaptsourcemapsourcemapbrowserifythlorenz• 0.4.1 • 2 years ago •  15 dependents •  MITpublished version 0.4.1, 2 years ago15 dependents licensed under $MIT127,278@esm2cjs/mimic-fnMake a function mimic another one. This is a fork of sindresorhus/mimic-fn, but with CommonJS support.functionmimicimitaterenamecopyinheritpropertiesnamefuncfnsetinferchangealcalzone• 4.0.0 • 3 years ago •  1 dependents •  MITpublished version 4.0.0, 3 years ago1 dependents licensed under $MIT65,159ndarray-warpndarray image warpingndarrayimagevolumewarpcoordinatechangenonlineardeformmikolalysenko• 1.0.1 • 11 years ago •  8 dependents •  MITpublished version 1.0.1, 11 years ago8 dependents licensed under $MIT37,559bitwiseManipulates bits, nibbles, bytes, and buffers.andbinarybitbitsbitwisebufferbufferschangeflipmanipulatenandnibblenibblesnorView moreflorianwendelborn• 2.2.1 • a year ago •  66 dependents •  MITpublished version 2.2.1, a year ago66 dependents licensed under $MIT45,366123…30»\n\n\n\nSearch results719 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcamelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684decamelizeConvert a camelized string into a lowercased one with a custom separator: unicornRainbow → unicorn_rainbowdecamelizedecamelcasecamelcaselowercasecasedashhyphenstringtextconvertsindresorhus• 6.0.0 • 4 years ago •  2,082 dependents •  MITpublished version 6.0.0, 4 years ago2082 dependents licensed under $MIT163,686,036lowercase-keysLowercase the keys of an objectobjectassignextendpropertieslowercaselower-casecasekeyskeysindresorhus• 3.0.0 • 4 years ago •  614 dependents •  MITpublished version 3.0.0, 4 years ago614 dependents licensed under $MIT104,619,725camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115camelcase-cssConvert a kebab-cased CSS property into a camelCased DOM property.camelcasecasecssdomstevenvachon• 2.0.1 • 7 years ago •  542 dependents •  MITpublished version 2.0.1, 7 years ago542 dependents licensed under $MIT64,129,836pascalcaseConvert a string to pascal case (upper camelcase).change casecamelcamelcasecasecasingpascalpascal-casepascal casepascalcasestringupper camel caseUpperCamelCasejonschlinkert• 2.0.0 • 3 years ago •  1,057 dependents •  MITpublished version 2.0.0, 3 years ago1057 dependents licensed under $MIT48,055,347decamelize-keysConvert object keys from camel casemapobjectkeykeysdecamelizedecamelcaseuncamelcasecamelcasecamel-casecamelcaseseparatorstringtextView moresindresorhus• 2.0.1 • 2 years ago •  564 dependents •  MITpublished version 2.0.1, 2 years ago564 dependents licensed under $MIT44,233,615title-caseTransform a string into title case following English rulestitlecaseenglishcapitalsentenceconverttransformblakeembrey• 4.3.2 • 7 months ago •  378 dependents •  MITpublished version 4.3.2, 7 months ago378 dependents licensed under $MIT30,360,185swap-caseTransform a string by swapping every character from upper to lower case, or lower to upper caseswapcaseinvertconverttransformlowerupperblakeembrey• 3.0.3 • a year ago •  38 dependents •  MITpublished version 3.0.3, a year ago38 dependents licensed under $MIT24,304,832sponge-caseTransform into a string with random capitalization appliedrandomrandomizespongebobmockingcapitalcaseconverttransformcapitalizeblakeembrey• 2.0.3 • a year ago •  10 dependents •  MITpublished version 2.0.3, a year ago10 dependents licensed under $MIT15,422,037titleizeCapitalize every word in a string: `unicorn cake` → `Unicorn Cake`titleizetitlecapitalizeuppercasecasedashhyphenstringtextconvertsindresorhus• 4.0.0 • 2 years ago •  280 dependents •  MITpublished version 4.0.0, 2 years ago280 dependents licensed under $MIT11,513,933caseExtensible string utility for converting, identifying and flipping string casestringcasecameltitleupperlowersnakesquishpascalconstantflipcapitalizationconverternbubna• 1.6.3 • 5 years ago •  807 dependents •  (MIT OR GPL-3.0-or-later)published version 1.6.3, 5 years ago807 dependents licensed under $(MIT OR GPL-3.0-or-later)4,251,848snakecase-keysConvert an object's keys to snake casesnakecasecamelkeysobjectbendrucker• 8.0.1 • a year ago •  361 dependents •  MITpublished version 8.0.1, a year ago361 dependents licensed under $MIT3,603,903obj-caseWork with objects of different cased keysobjectcasecasingcamelcasesegment-admin• 0.2.1 • 4 years ago •  81 dependents •  MITpublished version 0.2.1, 4 years ago81 dependents licensed under $MIT3,389,250to-no-caseRemove any existing casing from a string.camelcamelcasecasepascalpascalcasesentencesentencecaseslugslugcasesnakesnakecasestringtitletitlecaseianstormtaylor• 1.0.2 • 8 years ago •  32 dependents •  MITpublished version 1.0.2, 8 years ago32 dependents licensed under $MIT4,171,208to-space-caseConvert a string to space case.camelcaseslugspacespacecasestringianstormtaylor• 1.0.0 • 9 years ago •  44 dependents •  MITpublished version 1.0.0, 9 years ago44 dependents licensed under $MIT4,054,938cspellA Spelling Checker for Code!spellcheckercodecamelcasespellingspell checkerspelling checkerlintjason-dent• 8.19.0 • a day ago •  50 dependents •  MITpublished version 8.19.0, a day ago50 dependents licensed under $MIT2,855,078cspell-libA library of useful functions used across various cspell tools.spellcheckercodecamelcasespellingspell checkerspelling checkerlintjason-dent• 8.19.0 • a day ago •  21 dependents •  MITpublished version 8.19.0, a day ago21 dependents licensed under $MIT3,104,440humpsUnderscore-to-camelCase converter (and vice versa) for strings and object keys in JavaScript.utilscamelcaseunderscoreconverterstringsobjectsdomchristie• 2.0.1 • 8 years ago •  859 dependents •  MITpublished version 2.0.1, 8 years ago859 dependents licensed under $MIT3,248,801123…36»\n\nSearch results719 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcamelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684decamelizeConvert a camelized string into a lowercased one with a custom separator: unicornRainbow → unicorn_rainbowdecamelizedecamelcasecamelcaselowercasecasedashhyphenstringtextconvertsindresorhus• 6.0.0 • 4 years ago •  2,082 dependents •  MITpublished version 6.0.0, 4 years ago2082 dependents licensed under $MIT163,686,036lowercase-keysLowercase the keys of an objectobjectassignextendpropertieslowercaselower-casecasekeyskeysindresorhus• 3.0.0 • 4 years ago •  614 dependents •  MITpublished version 3.0.0, 4 years ago614 dependents licensed under $MIT104,619,725camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115camelcase-cssConvert a kebab-cased CSS property into a camelCased DOM property.camelcasecasecssdomstevenvachon• 2.0.1 • 7 years ago •  542 dependents •  MITpublished version 2.0.1, 7 years ago542 dependents licensed under $MIT64,129,836pascalcaseConvert a string to pascal case (upper camelcase).change casecamelcamelcasecasecasingpascalpascal-casepascal casepascalcasestringupper camel caseUpperCamelCasejonschlinkert• 2.0.0 • 3 years ago •  1,057 dependents •  MITpublished version 2.0.0, 3 years ago1057 dependents licensed under $MIT48,055,347decamelize-keysConvert object keys from camel casemapobjectkeykeysdecamelizedecamelcaseuncamelcasecamelcasecamel-casecamelcaseseparatorstringtextView moresindresorhus• 2.0.1 • 2 years ago •  564 dependents •  MITpublished version 2.0.1, 2 years ago564 dependents licensed under $MIT44,233,615title-caseTransform a string into title case following English rulestitlecaseenglishcapitalsentenceconverttransformblakeembrey• 4.3.2 • 7 months ago •  378 dependents •  MITpublished version 4.3.2, 7 months ago378 dependents licensed under $MIT30,360,185swap-caseTransform a string by swapping every character from upper to lower case, or lower to upper caseswapcaseinvertconverttransformlowerupperblakeembrey• 3.0.3 • a year ago •  38 dependents •  MITpublished version 3.0.3, a year ago38 dependents licensed under $MIT24,304,832sponge-caseTransform into a string with random capitalization appliedrandomrandomizespongebobmockingcapitalcaseconverttransformcapitalizeblakeembrey• 2.0.3 • a year ago •  10 dependents •  MITpublished version 2.0.3, a year ago10 dependents licensed under $MIT15,422,037titleizeCapitalize every word in a string: `unicorn cake` → `Unicorn Cake`titleizetitlecapitalizeuppercasecasedashhyphenstringtextconvertsindresorhus• 4.0.0 • 2 years ago •  280 dependents •  MITpublished version 4.0.0, 2 years ago280 dependents licensed under $MIT11,513,933caseExtensible string utility for converting, identifying and flipping string casestringcasecameltitleupperlowersnakesquishpascalconstantflipcapitalizationconverternbubna• 1.6.3 • 5 years ago •  807 dependents •  (MIT OR GPL-3.0-or-later)published version 1.6.3, 5 years ago807 dependents licensed under $(MIT OR GPL-3.0-or-later)4,251,848snakecase-keysConvert an object's keys to snake casesnakecasecamelkeysobjectbendrucker• 8.0.1 • a year ago •  361 dependents •  MITpublished version 8.0.1, a year ago361 dependents licensed under $MIT3,603,903obj-caseWork with objects of different cased keysobjectcasecasingcamelcasesegment-admin• 0.2.1 • 4 years ago •  81 dependents •  MITpublished version 0.2.1, 4 years ago81 dependents licensed under $MIT3,389,250to-no-caseRemove any existing casing from a string.camelcamelcasecasepascalpascalcasesentencesentencecaseslugslugcasesnakesnakecasestringtitletitlecaseianstormtaylor• 1.0.2 • 8 years ago •  32 dependents •  MITpublished version 1.0.2, 8 years ago32 dependents licensed under $MIT4,171,208to-space-caseConvert a string to space case.camelcaseslugspacespacecasestringianstormtaylor• 1.0.0 • 9 years ago •  44 dependents •  MITpublished version 1.0.0, 9 years ago44 dependents licensed under $MIT4,054,938cspellA Spelling Checker for Code!spellcheckercodecamelcasespellingspell checkerspelling checkerlintjason-dent• 8.19.0 • a day ago •  50 dependents •  MITpublished version 8.19.0, a day ago50 dependents licensed under $MIT2,855,078cspell-libA library of useful functions used across various cspell tools.spellcheckercodecamelcasespellingspell checkerspelling checkerlintjason-dent• 8.19.0 • a day ago •  21 dependents •  MITpublished version 8.19.0, a day ago21 dependents licensed under $MIT3,104,440humpsUnderscore-to-camelCase converter (and vice versa) for strings and object keys in JavaScript.utilscamelcaseunderscoreconverterstringsobjectsdomchristie• 2.0.1 • 8 years ago •  859 dependents •  MITpublished version 2.0.1, 8 years ago859 dependents licensed under $MIT3,248,801123…36»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcolor-convertPlain color conversion functionscolorcolourconvertconverterconversionrgbhslhsvhwbcmykansiansi16qix• 3.0.1 • 2 months ago •  3,782 dependents •  MITpublished version 3.0.1, 2 months ago3782 dependents licensed under $MIT909,471,340camelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684slashConvert Windows backslash paths to slash pathspathseperatorslashbackslashwindowsconvertsindresorhus• 5.1.0 • 2 years ago •  3,932 dependents •  MITpublished version 5.1.0, 2 years ago3932 dependents licensed under $MIT374,335,224convert-source-mapConverts a source-map from/to  different formats and allows adding/changing properties.convertsourcemapsourcemapbrowserdebugphated• 2.0.0 • 3 years ago •  2,367 dependents •  MITpublished version 2.0.0, 3 years ago2367 dependents licensed under $MIT352,950,033iconv-liteConvert character encodings in pure javascript.iconvconvertcharseticuashtuchkin• 0.6.3 • 4 years ago •  6,273 dependents •  MITpublished version 0.6.3, 4 years ago6273 dependents licensed under $MIT409,272,377pifyPromisify a callback-style functionpromisifycallbackpromisepromisesdenodifydenodeifynodethenthenifyconverttransformwrapwrapperbindView moresindresorhus• 6.1.0 • 3 years ago •  3,686 dependents •  MITpublished version 6.1.0, 3 years ago3686 dependents licensed under $MIT347,311,971ieee754Read/write IEEE754 floating point numbers from/to a Buffer or array-like objectIEEE 754bufferconvertfloating pointieee754feross• 1.2.1 • 4 years ago •  1,609 dependents •  BSD-3-Clausepublished version 1.2.1, 4 years ago1609 dependents licensed under $BSD-3-Clause217,687,282bytesUtility to parse a string bytes to bytes and vice-versabytebytesutilityparseparserconvertconverterdougwilson• 3.1.2 • 3 years ago •  2,509 dependents •  MITpublished version 3.1.2, 3 years ago2509 dependents licensed under $MIT231,319,189dir-globConvert directories to glob compatible stringsconvertdirectoryextensionsfilesglobsindresorhus• 3.0.1 • 6 years ago •  1,515 dependents •  MITpublished version 3.0.1, 6 years ago1515 dependents licensed under $MIT175,651,352decamelizeConvert a camelized string into a lowercased one with a custom separator: unicornRainbow → unicorn_rainbowdecamelizedecamelcasecamelcaselowercasecasedashhyphenstringtextconvertsindresorhus• 6.0.0 • 4 years ago •  2,082 dependents •  MITpublished version 6.0.0, 4 years ago2082 dependents licensed under $MIT163,686,036arrifyConvert a value to an arrayarrayarrifyarrayifyconvertvalueensuresindresorhus• 3.0.0 • 4 years ago •  1,229 dependents •  MITpublished version 3.0.0, 4 years ago1229 dependents licensed under $MIT117,278,379@xtuc/ieee754Read/write IEEE754 floating point numbers from/to a Buffer or array-like objectIEEE 754bufferconvertfloating pointieee754xtuc• 1.2.0 • 7 years ago •  4 dependents •  BSD-3-Clausepublished version 1.2.0, 7 years ago4 dependents licensed under $BSD-3-Clause90,813,198to-fast-propertiesForce V8 to use fast properties for an objectobjectpropertiespropsv8optimizefastconvertmodesindresorhus• 4.0.0 • 4 years ago •  1,667 dependents •  MITpublished version 4.0.0, 4 years ago1667 dependents licensed under $MIT110,165,289strnumParse String to Number based on configurationstringnumberparseconvertamitgupta• 2.0.5 • 2 months ago •  222 dependents •  MITpublished version 2.0.5, 2 months ago222 dependents licensed under $MIT93,409,297typedarray-to-bufferConvert a typed array to a Buffer without a copybuffertyped arrayconvertno copyuint8arrayuint16arrayuint32arrayint16arrayint32arrayfloat32arrayfloat64arraybrowserarraybufferdataviewfeross• 4.0.0 • 4 years ago •  1,135 dependents •  MITpublished version 4.0.0, 4 years ago1135 dependents licensed under $MIT76,188,685data-uri-to-bufferCreate an ArrayBuffer instance from a Data URI stringdatauridatauridata-uribufferconvertrfc23972397tootallnate• 6.0.2 • a year ago •  512 dependents •  MITpublished version 6.0.2, a year ago512 dependents licensed under $MIT90,252,272camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010file-uri-to-pathConvert a file: URI to a file pathfileuriconvertpathtootallnate• 2.0.0 • 6 years ago •  424 dependents •  MITpublished version 2.0.0, 6 years ago424 dependents licensed under $MIT58,363,180decamelize-keysConvert object keys from camel casemapobjectkeykeysdecamelizedecamelcaseuncamelcasecamelcasecamel-casecamelcaseseparatorstringtextView moresindresorhus• 2.0.1 • 2 years ago •  564 dependents •  MITpublished version 2.0.1, 2 years ago564 dependents licensed under $MIT44,233,615snapdragon-utilUtilities for the snapdragon parser/compiler.capturecompilecompilerconvertmatchparseparserpluginrendersnapdragonsnapdragonplugintransformutiljonschlinkert• 5.0.1 • 7 years ago •  803 dependents •  MITpublished version 5.0.1, 7 years ago803 dependents licensed under $MIT45,647,171123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcolor-convertPlain color conversion functionscolorcolourconvertconverterconversionrgbhslhsvhwbcmykansiansi16qix• 3.0.1 • 2 months ago •  3,782 dependents •  MITpublished version 3.0.1, 2 months ago3782 dependents licensed under $MIT909,471,340camelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684slashConvert Windows backslash paths to slash pathspathseperatorslashbackslashwindowsconvertsindresorhus• 5.1.0 • 2 years ago •  3,932 dependents •  MITpublished version 5.1.0, 2 years ago3932 dependents licensed under $MIT374,335,224convert-source-mapConverts a source-map from/to  different formats and allows adding/changing properties.convertsourcemapsourcemapbrowserdebugphated• 2.0.0 • 3 years ago •  2,367 dependents •  MITpublished version 2.0.0, 3 years ago2367 dependents licensed under $MIT352,950,033iconv-liteConvert character encodings in pure javascript.iconvconvertcharseticuashtuchkin• 0.6.3 • 4 years ago •  6,273 dependents •  MITpublished version 0.6.3, 4 years ago6273 dependents licensed under $MIT409,272,377pifyPromisify a callback-style functionpromisifycallbackpromisepromisesdenodifydenodeifynodethenthenifyconverttransformwrapwrapperbindView moresindresorhus• 6.1.0 • 3 years ago •  3,686 dependents •  MITpublished version 6.1.0, 3 years ago3686 dependents licensed under $MIT347,311,971ieee754Read/write IEEE754 floating point numbers from/to a Buffer or array-like objectIEEE 754bufferconvertfloating pointieee754feross• 1.2.1 • 4 years ago •  1,609 dependents •  BSD-3-Clausepublished version 1.2.1, 4 years ago1609 dependents licensed under $BSD-3-Clause217,687,282bytesUtility to parse a string bytes to bytes and vice-versabytebytesutilityparseparserconvertconverterdougwilson• 3.1.2 • 3 years ago •  2,509 dependents •  MITpublished version 3.1.2, 3 years ago2509 dependents licensed under $MIT231,319,189dir-globConvert directories to glob compatible stringsconvertdirectoryextensionsfilesglobsindresorhus• 3.0.1 • 6 years ago •  1,515 dependents •  MITpublished version 3.0.1, 6 years ago1515 dependents licensed under $MIT175,651,352decamelizeConvert a camelized string into a lowercased one with a custom separator: unicornRainbow → unicorn_rainbowdecamelizedecamelcasecamelcaselowercasecasedashhyphenstringtextconvertsindresorhus• 6.0.0 • 4 years ago •  2,082 dependents •  MITpublished version 6.0.0, 4 years ago2082 dependents licensed under $MIT163,686,036arrifyConvert a value to an arrayarrayarrifyarrayifyconvertvalueensuresindresorhus• 3.0.0 • 4 years ago •  1,229 dependents •  MITpublished version 3.0.0, 4 years ago1229 dependents licensed under $MIT117,278,379@xtuc/ieee754Read/write IEEE754 floating point numbers from/to a Buffer or array-like objectIEEE 754bufferconvertfloating pointieee754xtuc• 1.2.0 • 7 years ago •  4 dependents •  BSD-3-Clausepublished version 1.2.0, 7 years ago4 dependents licensed under $BSD-3-Clause90,813,198to-fast-propertiesForce V8 to use fast properties for an objectobjectpropertiespropsv8optimizefastconvertmodesindresorhus• 4.0.0 • 4 years ago •  1,667 dependents •  MITpublished version 4.0.0, 4 years ago1667 dependents licensed under $MIT110,165,289strnumParse String to Number based on configurationstringnumberparseconvertamitgupta• 2.0.5 • 2 months ago •  222 dependents •  MITpublished version 2.0.5, 2 months ago222 dependents licensed under $MIT93,409,297typedarray-to-bufferConvert a typed array to a Buffer without a copybuffertyped arrayconvertno copyuint8arrayuint16arrayuint32arrayint16arrayint32arrayfloat32arrayfloat64arraybrowserarraybufferdataviewfeross• 4.0.0 • 4 years ago •  1,135 dependents •  MITpublished version 4.0.0, 4 years ago1135 dependents licensed under $MIT76,188,685data-uri-to-bufferCreate an ArrayBuffer instance from a Data URI stringdatauridatauridata-uribufferconvertrfc23972397tootallnate• 6.0.2 • a year ago •  512 dependents •  MITpublished version 6.0.2, a year ago512 dependents licensed under $MIT90,252,272camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010file-uri-to-pathConvert a file: URI to a file pathfileuriconvertpathtootallnate• 2.0.0 • 6 years ago •  424 dependents •  MITpublished version 2.0.0, 6 years ago424 dependents licensed under $MIT58,363,180decamelize-keysConvert object keys from camel casemapobjectkeykeysdecamelizedecamelcaseuncamelcasecamelcasecamel-casecamelcaseseparatorstringtextView moresindresorhus• 2.0.1 • 2 years ago •  564 dependents •  MITpublished version 2.0.1, 2 years ago564 dependents licensed under $MIT44,233,615snapdragon-utilUtilities for the snapdragon parser/compiler.capturecompilecompilerconvertmatchparseparserpluginrendersnapdragonsnapdragonplugintransformutiljonschlinkert• 5.0.1 • 7 years ago •  803 dependents •  MITpublished version 5.0.1, 7 years ago803 dependents licensed under $MIT45,647,171123…50»\n\n\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedis-streamCheck if something is a Node.js streamstreamtypestreamswritablereadableduplextransformcheckdetectissindresorhus• 4.0.1 • a year ago •  2,600 dependents •  MITpublished version 4.0.1, a year ago2600 dependents licensed under $MIT413,855,577pifyPromisify a callback-style functionpromisifycallbackpromisepromisesdenodifydenodeifynodethenthenifyconverttransformwrapwrapperbindView moresindresorhus• 6.1.0 • 3 years ago •  3,686 dependents •  MITpublished version 6.1.0, 3 years ago3686 dependents licensed under $MIT347,311,971postcssTool for transforming styles with JS pluginscsspostcssreworkpreprocessorparsersource maptransformmanipulationtranspilerai• 8.5.3 • 2 months ago •  14,794 dependents •  MITpublished version 8.5.3, 2 months ago14794 dependents licensed under $MIT386,424,539loose-envifyFast (and loose) selective `process.env` replacer using js-tokens instead of an ASTenvironmentvariablesbrowserifybrowserify-transformtransformsourceconfigurationzertosh• 1.4.0 • 7 years ago •  5,558 dependents •  MITpublished version 1.4.0, 7 years ago5558 dependents licensed under $MIT152,552,385through2A tiny wrapper around Node.js streams.Transform (Streams2/3) to avoid explicit subclassing noisestreamstreams2throughtransformrvagg• 4.0.2 • 5 years ago •  12,835 dependents •  MITpublished version 4.0.2, 5 years ago12835 dependents licensed under $MIT132,738,691change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115unifiedparse, inspect, transform, and serialize content through syntax treesastcompilecontentcstparseprocessrehyperemarkretextserializestringifysyntaxtransformtreewooorm• 11.0.5 • 10 months ago •  2,320 dependents •  MITpublished version 11.0.5, 10 months ago2320 dependents licensed under $MIT54,694,410superagentelegant & feature rich browser / node HTTP with a fluent APIagentajaxapiasyncawaitaxioscancelclientfrisbeegothttphttpskypromiseView moretitanism• 10.2.0 • a month ago •  10,219 dependents •  MITpublished version 10.2.0, a month ago10219 dependents licensed under $MIT45,899,436snapdragon-nodeClass for creating AST nodes.astcompilecompilerconvertnodeparseparserpluginrendersnapdragonsnapdragonplugintokentransformjonschlinkert• 3.0.0 • 6 years ago •  806 dependents •  MITpublished version 3.0.0, 6 years ago806 dependents licensed under $MIT44,173,915snapdragon-utilUtilities for the snapdragon parser/compiler.capturecompilecompilerconvertmatchparseparserpluginrendersnapdragonsnapdragonplugintransformutiljonschlinkert• 5.0.1 • 7 years ago •  803 dependents •  MITpublished version 5.0.1, 7 years ago803 dependents licensed under $MIT45,647,171swap-caseTransform a string by swapping every character from upper to lower case, or lower to upper caseswapcaseinvertconverttransformlowerupperblakeembrey• 3.0.3 • a year ago •  38 dependents •  MITpublished version 3.0.3, a year ago38 dependents licensed under $MIT24,304,832camelizerecursively transform key strings to camel-casecamel-casejsontransformljharb• 1.0.1 • 3 years ago •  297 dependents •  MITpublished version 1.0.1, 3 years ago297 dependents licensed under $MIT28,936,379title-caseTransform a string into title case following English rulestitlecaseenglishcapitalsentenceconverttransformblakeembrey• 4.3.2 • 7 months ago •  378 dependents •  MITpublished version 4.3.2, 7 months ago378 dependents licensed under $MIT30,360,185pupaSimple micro templatingstringformattingtemplateobjectformatinterpolateinterpolationtemplatingexpandsimplereplaceplaceholdersvaluestransformsindresorhus• 3.1.0 • 4 years ago •  519 dependents •  MITpublished version 3.1.0, 4 years ago519 dependents licensed under $MIT25,106,859to-readable-streamConvert a value to a ReadableStreamstreamreadablestreamstringbufferuint8arrayfromintototransformconvertreadablepullsindresorhus• 4.0.0 • 2 years ago •  225 dependents •  MITpublished version 4.0.0, 2 years ago225 dependents licensed under $MIT20,762,019tailwindcss-animateA Tailwind CSS plugin for creating beautiful animations.tailwindtailwindcsscsspostcsspluginanimationtransitionanimateanimatedanimatecssanimate.cssfadeslidezoomView morethejameskyle• 1.0.7 • 2 years ago •  2,487 dependents •  MITpublished version 1.0.7, 2 years ago2487 dependents licensed under $MIT22,714,915append-transformInstall a transform to `require.extensions` that always runs last, even if additional extensions are added later.transformrequireappendlastcoveragesource-mapextensionmodulejakxz• 2.0.0 • 6 years ago •  58 dependents •  MITpublished version 2.0.0, 6 years ago58 dependents licensed under $MIT22,415,608caching-transformWraps a transform and provides cachingtransformcacherequiretranspilefastspeedhashcoreyfarrell• 4.0.0 • 6 years ago •  60 dependents •  MITpublished version 4.0.0, 6 years ago60 dependents licensed under $MIT20,860,456parallel-transformTransform stream that allows you to run your transforms in parallel without changing the ordertransformstreamparallelpreserveordermafintosh• 1.2.0 • 6 years ago •  343 dependents •  MITpublished version 1.2.0, 6 years ago343 dependents licensed under $MIT20,566,254hast-util-from-parse5hast utility to transform from a `parse5` ASTastchangehast-utilhasttransformunistutilityutilwooorm• 8.0.3 • 2 months ago •  70 dependents •  MITpublished version 8.0.3, 2 months ago70 dependents licensed under $MIT18,847,300123…50»\n\nSearch results1000+ packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedis-streamCheck if something is a Node.js streamstreamtypestreamswritablereadableduplextransformcheckdetectissindresorhus• 4.0.1 • a year ago •  2,600 dependents •  MITpublished version 4.0.1, a year ago2600 dependents licensed under $MIT413,855,577pifyPromisify a callback-style functionpromisifycallbackpromisepromisesdenodifydenodeifynodethenthenifyconverttransformwrapwrapperbindView moresindresorhus• 6.1.0 • 3 years ago •  3,686 dependents •  MITpublished version 6.1.0, 3 years ago3686 dependents licensed under $MIT347,311,971postcssTool for transforming styles with JS pluginscsspostcssreworkpreprocessorparsersource maptransformmanipulationtranspilerai• 8.5.3 • 2 months ago •  14,794 dependents •  MITpublished version 8.5.3, 2 months ago14794 dependents licensed under $MIT386,424,539loose-envifyFast (and loose) selective `process.env` replacer using js-tokens instead of an ASTenvironmentvariablesbrowserifybrowserify-transformtransformsourceconfigurationzertosh• 1.4.0 • 7 years ago •  5,558 dependents •  MITpublished version 1.4.0, 7 years ago5558 dependents licensed under $MIT152,552,385through2A tiny wrapper around Node.js streams.Transform (Streams2/3) to avoid explicit subclassing noisestreamstreams2throughtransformrvagg• 4.0.2 • 5 years ago •  12,835 dependents •  MITpublished version 4.0.2, 5 years ago12835 dependents licensed under $MIT132,738,691change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115unifiedparse, inspect, transform, and serialize content through syntax treesastcompilecontentcstparseprocessrehyperemarkretextserializestringifysyntaxtransformtreewooorm• 11.0.5 • 10 months ago •  2,320 dependents •  MITpublished version 11.0.5, 10 months ago2320 dependents licensed under $MIT54,694,410superagentelegant & feature rich browser / node HTTP with a fluent APIagentajaxapiasyncawaitaxioscancelclientfrisbeegothttphttpskypromiseView moretitanism• 10.2.0 • a month ago •  10,219 dependents •  MITpublished version 10.2.0, a month ago10219 dependents licensed under $MIT45,899,436snapdragon-nodeClass for creating AST nodes.astcompilecompilerconvertnodeparseparserpluginrendersnapdragonsnapdragonplugintokentransformjonschlinkert• 3.0.0 • 6 years ago •  806 dependents •  MITpublished version 3.0.0, 6 years ago806 dependents licensed under $MIT44,173,915snapdragon-utilUtilities for the snapdragon parser/compiler.capturecompilecompilerconvertmatchparseparserpluginrendersnapdragonsnapdragonplugintransformutiljonschlinkert• 5.0.1 • 7 years ago •  803 dependents •  MITpublished version 5.0.1, 7 years ago803 dependents licensed under $MIT45,647,171swap-caseTransform a string by swapping every character from upper to lower case, or lower to upper caseswapcaseinvertconverttransformlowerupperblakeembrey• 3.0.3 • a year ago •  38 dependents •  MITpublished version 3.0.3, a year ago38 dependents licensed under $MIT24,304,832camelizerecursively transform key strings to camel-casecamel-casejsontransformljharb• 1.0.1 • 3 years ago •  297 dependents •  MITpublished version 1.0.1, 3 years ago297 dependents licensed under $MIT28,936,379title-caseTransform a string into title case following English rulestitlecaseenglishcapitalsentenceconverttransformblakeembrey• 4.3.2 • 7 months ago •  378 dependents •  MITpublished version 4.3.2, 7 months ago378 dependents licensed under $MIT30,360,185pupaSimple micro templatingstringformattingtemplateobjectformatinterpolateinterpolationtemplatingexpandsimplereplaceplaceholdersvaluestransformsindresorhus• 3.1.0 • 4 years ago •  519 dependents •  MITpublished version 3.1.0, 4 years ago519 dependents licensed under $MIT25,106,859to-readable-streamConvert a value to a ReadableStreamstreamreadablestreamstringbufferuint8arrayfromintototransformconvertreadablepullsindresorhus• 4.0.0 • 2 years ago •  225 dependents •  MITpublished version 4.0.0, 2 years ago225 dependents licensed under $MIT20,762,019tailwindcss-animateA Tailwind CSS plugin for creating beautiful animations.tailwindtailwindcsscsspostcsspluginanimationtransitionanimateanimatedanimatecssanimate.cssfadeslidezoomView morethejameskyle• 1.0.7 • 2 years ago •  2,487 dependents •  MITpublished version 1.0.7, 2 years ago2487 dependents licensed under $MIT22,714,915append-transformInstall a transform to `require.extensions` that always runs last, even if additional extensions are added later.transformrequireappendlastcoveragesource-mapextensionmodulejakxz• 2.0.0 • 6 years ago •  58 dependents •  MITpublished version 2.0.0, 6 years ago58 dependents licensed under $MIT22,415,608caching-transformWraps a transform and provides cachingtransformcacherequiretranspilefastspeedhashcoreyfarrell• 4.0.0 • 6 years ago •  60 dependents •  MITpublished version 4.0.0, 6 years ago60 dependents licensed under $MIT20,860,456parallel-transformTransform stream that allows you to run your transforms in parallel without changing the ordertransformstreamparallelpreserveordermafintosh• 1.2.0 • 6 years ago •  343 dependents •  MITpublished version 1.2.0, 6 years ago343 dependents licensed under $MIT20,566,254hast-util-from-parse5hast utility to transform from a `parse5` ASTastchangehast-utilhasttransformunistutilityutilwooorm• 8.0.3 • 2 months ago •  70 dependents •  MITpublished version 8.0.3, 2 months ago70 dependents licensed under $MIT18,847,300123…50»\n\n\n\nSearch results103 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcamelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010decamelize-keysConvert object keys from camel casemapobjectkeykeysdecamelizedecamelcaseuncamelcasecamelcasecamel-casecamelcaseseparatorstringtextView moresindresorhus• 2.0.1 • 2 years ago •  564 dependents •  MITpublished version 2.0.1, 2 years ago564 dependents licensed under $MIT44,233,615change-case-allAll change-case methods bundled in a single modulechange-casecamel-casepascal-casesnake-caselowercaseuppercaseconstant-casebtxtiger• 2.1.0 • a year ago •  161 dependents •  MITpublished version 2.1.0, a year ago161 dependents licensed under $MIT27,105,986camelizerecursively transform key strings to camel-casecamel-casejsontransformljharb• 1.0.1 • 3 years ago •  297 dependents •  MITpublished version 1.0.1, 3 years ago297 dependents licensed under $MIT28,936,379case-anythingcamelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)change-casechange-casingcase-changecasing-changecamel-casepascal-casekebab-casesnake-caseada-caseconstant-casetrain-casecobol-casepath-casedot-caseView moremesqueeb• 3.1.2 • 2 months ago •  98 dependents •  MITpublished version 3.1.2, 2 months ago98 dependents licensed under $MIT3,520,485camelize-tsRecursive camel casing of object property names with proper typingcamel-casejsontransformtypescriptkbrabrand• 3.0.0 • 2 years ago •  12 dependents •  MITpublished version 3.0.0, 2 years ago12 dependents licensed under $MIT686,790ts-case-convertTypescript type-preserving conversion of objects between camelCase and snake_casePascalCasecamel-casecamelCaseconversionpascal-casesnake-casesnake_casetypescriptross.williams• 2.1.0 • 7 months ago •  31 dependents •  Apache-2.0published version 2.1.0, 7 months ago31 dependents licensed under $Apache-2.0510,591convert-to-ecmascript-compatible-varnameGiven a string of dash-delimited words, return a similar version of the string, but which is camel-cased and otherwise stripped of special characters, whitespace, etc. so that it is usable as an ECMAScript variable.camel-caseecmascriptcamelcasejavascript-variablevarmikermcneil• 0.1.5 • 9 years ago •  3 dependents •  MITpublished version 0.1.5, 9 years ago3 dependents licensed under $MIT77,332camelcase-keys-deepDeeply convert the keys of an object to camelCasemapobjobjectkeykeysvaluevaluesvalcamelcasecamel-casecasedashhyphendotView morerxaviers• 0.1.0 • 9 years ago •  19 dependents •  MITpublished version 0.1.0, 9 years ago19 dependents licensed under $MIT38,596text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616camelize2recursively transform key strings to camel-casecamel-casejsonhttpresponsetransformdenysivko• 1.0.0 • 6 years ago •  0 dependents •  MITpublished version 1.0.0, 6 years ago0 dependents licensed under $MIT20,846change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956case-it{camel,constant,dot,kebab,pascal,snake,space} case it.casecamelcamelcasecamel-caseconstantconstantcaseconstant-casedotdotcasedot-casekebabkebabcasekebab-casepascalView morefirede• 1.0.1 • 7 years ago •  8 dependents •  MITpublished version 1.0.1, 7 years ago8 dependents licensed under $MIT12,335text-camel-caseConvert into a text with the separator denoted by the next word capitalizedcamelcasecamelcasecamel-caseconverttransformidentifierdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT13,230transform-object-keysTransform object keys into a new one using preset or custom rulesmapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelcasedashView morebloodf• 1.0.7 • 4 years ago •  1 dependents •  MITpublished version 1.0.7, 4 years ago1 dependents licensed under $MIT7,825camelcase-object-deepConvert object keys recursivly to camelCase using lodashobjobjectkeykeyscamelcasecamel-casecamellodashrecurserecursivedeephanjukim• 1.1.7 • 3 years ago •  9 dependents •  Apache-2.0published version 1.1.7, 3 years ago9 dependents licensed under $Apache-2.012,289literal-caseA TypeScript library for word case conversions, using Template Literal Types(TS >= 4.1).typescripttemplate literal typetypesafecamel-casepascal-casesnake-caseconstant-casemadono• 1.0.0 • 4 years ago •  0 dependents •  MITpublished version 1.0.0, 4 years ago0 dependents licensed under $MIT2,810casingRecursively transform object key strings to and from camelCase and snake_case (underscore)camelcamel-casecamelcasecamelizecasesnakesnake-casesnakecasesnakeizeunderscoreunderscorifyknexbookshelfbuster• 1.1.0 • 6 years ago •  1 dependents •  MITpublished version 1.1.0, 6 years ago1 dependents licensed under $MIT3,097123…6»\n\nSearch results103 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcamelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010decamelize-keysConvert object keys from camel casemapobjectkeykeysdecamelizedecamelcaseuncamelcasecamelcasecamel-casecamelcaseseparatorstringtextView moresindresorhus• 2.0.1 • 2 years ago •  564 dependents •  MITpublished version 2.0.1, 2 years ago564 dependents licensed under $MIT44,233,615change-case-allAll change-case methods bundled in a single modulechange-casecamel-casepascal-casesnake-caselowercaseuppercaseconstant-casebtxtiger• 2.1.0 • a year ago •  161 dependents •  MITpublished version 2.1.0, a year ago161 dependents licensed under $MIT27,105,986camelizerecursively transform key strings to camel-casecamel-casejsontransformljharb• 1.0.1 • 3 years ago •  297 dependents •  MITpublished version 1.0.1, 3 years ago297 dependents licensed under $MIT28,936,379case-anythingcamelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)change-casechange-casingcase-changecasing-changecamel-casepascal-casekebab-casesnake-caseada-caseconstant-casetrain-casecobol-casepath-casedot-caseView moremesqueeb• 3.1.2 • 2 months ago •  98 dependents •  MITpublished version 3.1.2, 2 months ago98 dependents licensed under $MIT3,520,485camelize-tsRecursive camel casing of object property names with proper typingcamel-casejsontransformtypescriptkbrabrand• 3.0.0 • 2 years ago •  12 dependents •  MITpublished version 3.0.0, 2 years ago12 dependents licensed under $MIT686,790ts-case-convertTypescript type-preserving conversion of objects between camelCase and snake_casePascalCasecamel-casecamelCaseconversionpascal-casesnake-casesnake_casetypescriptross.williams• 2.1.0 • 7 months ago •  31 dependents •  Apache-2.0published version 2.1.0, 7 months ago31 dependents licensed under $Apache-2.0510,591convert-to-ecmascript-compatible-varnameGiven a string of dash-delimited words, return a similar version of the string, but which is camel-cased and otherwise stripped of special characters, whitespace, etc. so that it is usable as an ECMAScript variable.camel-caseecmascriptcamelcasejavascript-variablevarmikermcneil• 0.1.5 • 9 years ago •  3 dependents •  MITpublished version 0.1.5, 9 years ago3 dependents licensed under $MIT77,332camelcase-keys-deepDeeply convert the keys of an object to camelCasemapobjobjectkeykeysvaluevaluesvalcamelcasecamel-casecasedashhyphendotView morerxaviers• 0.1.0 • 9 years ago •  19 dependents •  MITpublished version 0.1.0, 9 years ago19 dependents licensed under $MIT38,596text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616camelize2recursively transform key strings to camel-casecamel-casejsonhttpresponsetransformdenysivko• 1.0.0 • 6 years ago •  0 dependents •  MITpublished version 1.0.0, 6 years ago0 dependents licensed under $MIT20,846change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956case-it{camel,constant,dot,kebab,pascal,snake,space} case it.casecamelcamelcasecamel-caseconstantconstantcaseconstant-casedotdotcasedot-casekebabkebabcasekebab-casepascalView morefirede• 1.0.1 • 7 years ago •  8 dependents •  MITpublished version 1.0.1, 7 years ago8 dependents licensed under $MIT12,335text-camel-caseConvert into a text with the separator denoted by the next word capitalizedcamelcasecamelcasecamel-caseconverttransformidentifierdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT13,230transform-object-keysTransform object keys into a new one using preset or custom rulesmapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelcasedashView morebloodf• 1.0.7 • 4 years ago •  1 dependents •  MITpublished version 1.0.7, 4 years ago1 dependents licensed under $MIT7,825camelcase-object-deepConvert object keys recursivly to camelCase using lodashobjobjectkeykeyscamelcasecamel-casecamellodashrecurserecursivedeephanjukim• 1.1.7 • 3 years ago •  9 dependents •  Apache-2.0published version 1.1.7, 3 years ago9 dependents licensed under $Apache-2.012,289literal-caseA TypeScript library for word case conversions, using Template Literal Types(TS >= 4.1).typescripttemplate literal typetypesafecamel-casepascal-casesnake-caseconstant-casemadono• 1.0.0 • 4 years ago •  0 dependents •  MITpublished version 1.0.0, 4 years ago0 dependents licensed under $MIT2,810casingRecursively transform object key strings to and from camelCase and snake_case (underscore)camelcamel-casecamelcasecamelizecasesnakesnake-casesnakecasesnakeizeunderscoreunderscorifyknexbookshelfbuster• 1.1.0 • 6 years ago •  1 dependents •  MITpublished version 1.1.0, 6 years ago1 dependents licensed under $MIT3,097123…6»\n\n\n\nSearch results46 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcamelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010pascalcaseConvert a string to pascal case (upper camelcase).change casecamelcamelcasecasecasingpascalpascal-casepascal casepascalcasestringupper camel caseUpperCamelCasejonschlinkert• 2.0.0 • 3 years ago •  1,057 dependents •  MITpublished version 2.0.0, 3 years ago1057 dependents licensed under $MIT48,055,347change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115change-case-allAll change-case methods bundled in a single modulechange-casecamel-casepascal-casesnake-caselowercaseuppercaseconstant-casebtxtiger• 2.1.0 • a year ago •  161 dependents •  MITpublished version 2.1.0, a year ago161 dependents licensed under $MIT27,105,986case-anythingcamelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)change-casechange-casingcase-changecasing-changecamel-casepascal-casekebab-casesnake-caseada-caseconstant-casetrain-casecobol-casepath-casedot-caseView moremesqueeb• 3.1.2 • 2 months ago •  98 dependents •  MITpublished version 3.1.2, 2 months ago98 dependents licensed under $MIT3,520,485ts-case-convertTypescript type-preserving conversion of objects between camelCase and snake_casePascalCasecamel-casecamelCaseconversionpascal-casesnake-casesnake_casetypescriptross.williams• 2.1.0 • 7 months ago •  31 dependents •  Apache-2.0published version 2.1.0, 7 months ago31 dependents licensed under $Apache-2.0510,591change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956text-pascal-caseConvert into a text of capitalized words without separatorspascalcasepascalcasepascal-caseconverttransformidentifierdimetrix• 1.0.3 • 5 years ago •  2 dependents •  MITpublished version 1.0.3, 5 years ago2 dependents licensed under $MIT13,374text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616case-it{camel,constant,dot,kebab,pascal,snake,space} case it.casecamelcamelcasecamel-caseconstantconstantcaseconstant-casedotdotcasedot-casekebabkebabcasekebab-casepascalView morefirede• 1.0.1 • 7 years ago •  8 dependents •  MITpublished version 1.0.1, 7 years ago8 dependents licensed under $MIT12,335transform-object-keysTransform object keys into a new one using preset or custom rulesmapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelcasedashView morebloodf• 1.0.7 • 4 years ago •  1 dependents •  MITpublished version 1.0.7, 4 years ago1 dependents licensed under $MIT7,825literal-caseA TypeScript library for word case conversions, using Template Literal Types(TS >= 4.1).typescripttemplate literal typetypesafecamel-casepascal-casesnake-caseconstant-casemadono• 1.0.0 • 4 years ago •  0 dependents •  MITpublished version 1.0.0, 4 years ago0 dependents licensed under $MIT2,810@shipengine/capitalizationString capitalization functions with special cases for certain ShipEngine words and phrasesshipenginestringcasingcapitalizationsnake-casekebab-casecamel-casepascal-casetitle-casesentence-casejamesmessinger• 1.2.1 • 5 years ago •  4 dependents •  Apache-2.0published version 1.2.1, 5 years ago4 dependents licensed under $Apache-2.0894@lafourche/camelcase-keysConvert object keys to camel casemapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelcasedashView moreskybot• 7.1.0 • 3 years ago •  0 dependents •  MITpublished version 7.1.0, 3 years ago0 dependents licensed under $MIT352@jordanburke/ts-case-convertTypescript type-preserving conversion of objects between camelCase and snake_casePascalCasecamel-casecamelCaseconversionpascal-casesnake-casesnake_casetypescriptjordanburke• 2.2.1 • 4 months ago •  0 dependents •  Apache-2.0published version 2.2.1, 4 months ago0 dependents licensed under $Apache-2.0323tn-caseConvert different naming conventionkebab-casesnake-casedot-casecamel-casepascal-casespace-casecustom-caseturnova• 3.0.1 • 4 years ago •  3 dependents •  MITpublished version 3.0.1, 4 years ago3 dependents licensed under $MIT284@kevinoid/dotnet-identifier-caseTransform a string to PascalCase according to Microsoft's .NET Capitalization Conventions.change-casedotnetpascal-casekevinoid• 1.0.0 • 4 months ago •  0 dependents •  MITpublished version 1.0.0, 4 months ago0 dependents licensed under $MIT260camelcase-es5Convert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamel-case-es5camelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasedanielpham• 5.3.2-es5 • 6 years ago •  1 dependents •  MITpublished version 5.3.2-es5, 6 years ago1 dependents licensed under $MIT162change-case-legacyTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseguoyunhe• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT203123\n\nSearch results46 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedcamelcaseConvert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasepascal-casesindresorhus• 8.0.0 • 2 years ago •  7,336 dependents •  MITpublished version 8.0.0, 2 years ago7336 dependents licensed under $MIT415,493,684camelcase-keysConvert object keys to camel casemapobjectkeykeysvaluevaluesiteratecamelcasecamel-casecamelcasedashhyphendotView moresindresorhus• 9.1.3 • a year ago •  1,307 dependents •  MITpublished version 9.1.3, a year ago1307 dependents licensed under $MIT67,597,010pascalcaseConvert a string to pascal case (upper camelcase).change casecamelcamelcasecasecasingpascalpascal-casepascal casepascalcasestringupper camel caseUpperCamelCasejonschlinkert• 2.0.0 • 3 years ago •  1,057 dependents •  MITpublished version 2.0.0, 3 years ago1057 dependents licensed under $MIT48,055,347change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115change-case-allAll change-case methods bundled in a single modulechange-casecamel-casepascal-casesnake-caselowercaseuppercaseconstant-casebtxtiger• 2.1.0 • a year ago •  161 dependents •  MITpublished version 2.1.0, a year ago161 dependents licensed under $MIT27,105,986case-anythingcamelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)change-casechange-casingcase-changecasing-changecamel-casepascal-casekebab-casesnake-caseada-caseconstant-casetrain-casecobol-casepath-casedot-caseView moremesqueeb• 3.1.2 • 2 months ago •  98 dependents •  MITpublished version 3.1.2, 2 months ago98 dependents licensed under $MIT3,520,485ts-case-convertTypescript type-preserving conversion of objects between camelCase and snake_casePascalCasecamel-casecamelCaseconversionpascal-casesnake-casesnake_casetypescriptross.williams• 2.1.0 • 7 months ago •  31 dependents •  Apache-2.0published version 2.1.0, 7 months ago31 dependents licensed under $Apache-2.0510,591change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956text-pascal-caseConvert into a text of capitalized words without separatorspascalcasepascalcasepascal-caseconverttransformidentifierdimetrix• 1.0.3 • 5 years ago •  2 dependents •  MITpublished version 1.0.3, 5 years ago2 dependents licensed under $MIT13,374text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616case-it{camel,constant,dot,kebab,pascal,snake,space} case it.casecamelcamelcasecamel-caseconstantconstantcaseconstant-casedotdotcasedot-casekebabkebabcasekebab-casepascalView morefirede• 1.0.1 • 7 years ago •  8 dependents •  MITpublished version 1.0.1, 7 years ago8 dependents licensed under $MIT12,335transform-object-keysTransform object keys into a new one using preset or custom rulesmapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelcasedashView morebloodf• 1.0.7 • 4 years ago •  1 dependents •  MITpublished version 1.0.7, 4 years ago1 dependents licensed under $MIT7,825literal-caseA TypeScript library for word case conversions, using Template Literal Types(TS >= 4.1).typescripttemplate literal typetypesafecamel-casepascal-casesnake-caseconstant-casemadono• 1.0.0 • 4 years ago •  0 dependents •  MITpublished version 1.0.0, 4 years ago0 dependents licensed under $MIT2,810@shipengine/capitalizationString capitalization functions with special cases for certain ShipEngine words and phrasesshipenginestringcasingcapitalizationsnake-casekebab-casecamel-casepascal-casetitle-casesentence-casejamesmessinger• 1.2.1 • 5 years ago •  4 dependents •  Apache-2.0published version 1.2.1, 5 years ago4 dependents licensed under $Apache-2.0894@lafourche/camelcase-keysConvert object keys to camel casemapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelcasedashView moreskybot• 7.1.0 • 3 years ago •  0 dependents •  MITpublished version 7.1.0, 3 years ago0 dependents licensed under $MIT352@jordanburke/ts-case-convertTypescript type-preserving conversion of objects between camelCase and snake_casePascalCasecamel-casecamelCaseconversionpascal-casesnake-casesnake_casetypescriptjordanburke• 2.2.1 • 4 months ago •  0 dependents •  Apache-2.0published version 2.2.1, 4 months ago0 dependents licensed under $Apache-2.0323tn-caseConvert different naming conventionkebab-casesnake-casedot-casecamel-casepascal-casespace-casecustom-caseturnova• 3.0.1 • 4 years ago •  3 dependents •  MITpublished version 3.0.1, 4 years ago3 dependents licensed under $MIT284@kevinoid/dotnet-identifier-caseTransform a string to PascalCase according to Microsoft's .NET Capitalization Conventions.change-casedotnetpascal-casekevinoid• 1.0.0 • 4 months ago •  0 dependents •  MITpublished version 1.0.0, 4 months ago0 dependents licensed under $MIT260camelcase-es5Convert a dash/dot/underscore/space separated string to camelCase or PascalCase: `foo-bar` → `fooBar`camelcasecamel-casecamel-case-es5camelcasedashhyphendotunderscoreseparatorstringtextconvertpascalcasedanielpham• 5.3.2-es5 • 6 years ago •  1 dependents •  MITpublished version 5.3.2-es5, 6 years ago1 dependents licensed under $MIT162change-case-legacyTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseguoyunhe• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT203123\n\n\n\nSearch results9 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956text-param-caseConvert into a lower cased text with dashes between wordscaseparamparamcaseparam-casekebabkebabcasekebab-casedashdashcasedash-casehyphenconverttransformdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT12,563change-case-legacyTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseguoyunhe• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT203vue-caseA collection of Vue.js case filterscamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.7 • 5 years ago •  1 dependents •  MITpublished version 1.0.7, 5 years ago1 dependents licensed under $MIT146kebabierA CLI Tool to refactor Javascript/Typescript projects to use kebab-case naming convention of files and folderskebab-caseparam-caserefactorconvertclitoolguybarsheshet• 1.0.0 • 3 years ago •  0 dependents •  MITpublished version 1.0.0, 3 years ago0 dependents licensed under $MIT21paramcase-keysConvert object keys to paramCasemapobjobjectkeykeysvaluevaluesvaliterateparamcaseparam-casecasedashhyphenView morealexluong• 0.1.0 • 6 years ago •  0 dependents •  MITpublished version 0.1.0, 6 years ago0 dependents licensed under $MIT16@suchipi/change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casesuchipi• 5.4.4 • 8 months ago •  0 dependents •  MITpublished version 5.4.4, 8 months ago0 dependents licensed under $MIT6\n\nSearch results9 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956text-param-caseConvert into a lower cased text with dashes between wordscaseparamparamcaseparam-casekebabkebabcasekebab-casedashdashcasedash-casehyphenconverttransformdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT12,563change-case-legacyTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseguoyunhe• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT203vue-caseA collection of Vue.js case filterscamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.7 • 5 years ago •  1 dependents •  MITpublished version 1.0.7, 5 years ago1 dependents licensed under $MIT146kebabierA CLI Tool to refactor Javascript/Typescript projects to use kebab-case naming convention of files and folderskebab-caseparam-caserefactorconvertclitoolguybarsheshet• 1.0.0 • 3 years ago •  0 dependents •  MITpublished version 1.0.0, 3 years ago0 dependents licensed under $MIT21paramcase-keysConvert object keys to paramCasemapobjobjectkeykeysvaluevaluesvaliterateparamcaseparam-casecasedashhyphenView morealexluong• 0.1.0 • 6 years ago •  0 dependents •  MITpublished version 0.1.0, 6 years ago0 dependents licensed under $MIT16@suchipi/change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casesuchipi• 5.4.4 • 8 months ago •  0 dependents •  MITpublished version 5.4.4, 8 months ago0 dependents licensed under $MIT6\n\n\n\nSearch results78 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115case-anythingcamelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)change-casechange-casingcase-changecasing-changecamel-casepascal-casekebab-casesnake-caseada-caseconstant-casetrain-casecobol-casepath-casedot-caseView moremesqueeb• 3.1.2 • 2 months ago •  98 dependents •  MITpublished version 3.1.2, 2 months ago98 dependents licensed under $MIT3,520,485kebab-caseConvert a string to kebab-case, i.e. its dash separated formkebab-casekebabdashdasherizedashifydash-casetrain-caselisp-casejoakimbeng• 2.0.2 • 6 days ago •  528 dependents •  MITpublished version 2.0.2, 6 days ago528 dependents licensed under $MIT2,005,350just-kebab-caseconvert a string to kebab casekebabkebab-casestringno-dependenciesjustangus-c• 4.2.0 • 2 years ago •  58 dependents •  MITpublished version 4.2.0, 2 years ago58 dependents licensed under $MIT303,825kebabcaseConvert string to kebab-casekebab-casekebabdavidbernal• 1.0.1 • 7 years ago •  10 dependents •  MITpublished version 1.0.1, 7 years ago10 dependents licensed under $MIT67,431string-transformString-transform module from Glize library.string-transformtext-transformcapitalizecamel casecamelCasepascal casePascalCasekebab casekebab-casesnake casesnake_caseglizevpodk• 21.9.19 • 4 years ago •  1 dependents •  Apache-2.0published version 21.9.19, 4 years ago1 dependents licensed under $Apache-2.067,664case-it{camel,constant,dot,kebab,pascal,snake,space} case it.casecamelcamelcasecamel-caseconstantconstantcaseconstant-casedotdotcasedot-casekebabkebabcasekebab-casepascalView morefirede• 1.0.1 • 7 years ago •  8 dependents •  MITpublished version 1.0.1, 7 years ago8 dependents licensed under $MIT12,335change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956camel-to-kebabConvert camelCase inputs to kebab-case outputs.textstringsnamingcamelcamelCasepascalPascalCasekebabkebab-casehyphenspinallispcasepineapplemachine• 1.1.2 • 2 years ago •  12 dependents •  Zlibpublished version 1.1.2, 2 years ago12 dependents licensed under $Zlib6,248text-param-caseConvert into a lower cased text with dashes between wordscaseparamparamcaseparam-casekebabkebabcasekebab-casedashdashcasedash-casehyphenconverttransformdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT12,563vite-plugin-svelte-kebab-propsVite 2.x plugin to support kebab case props within Svelte components.sveltevitekebabcasekebab-casedashhyphenroonie007• 1.0.3 • 3 years ago •  0 dependents •  MITpublished version 1.0.3, 3 years ago0 dependents licensed under $MIT6,384skeweredThe simplest slugify module in the universe.slugifyslugurlifydashifydashcasedash-casekebabifykebabcasekebab-casehyphenatehyphencasehyphen-caseskewerbuster• 1.0.0 • 7 years ago •  2 dependents •  ISCpublished version 1.0.0, 7 years ago2 dependents licensed under $ISC3,312kebabcase-keysConvert object keys to kebab-casemapobjobjectkeykeysvaluevaluesvaliteratekebabcasekebab-casekebabcasedashView moremlohscheidt• 1.0.0 • 6 years ago •  13 dependents •  MITpublished version 1.0.0, 6 years ago13 dependents licensed under $MIT5,944@magic/casesconvert between camelCase, PascalCase, snake_case, and kebab-case.magicsnake_casesnakekebab-casekebabcamelpascalcaseconvertjascha• 0.0.9 • 2 years ago •  4 dependents •  AGPL-3.0published version 0.0.9, 2 years ago4 dependents licensed under $AGPL-3.05,845transform-obj-keysTransform object keys easily using whatever transform functionmapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelsnakecasesnake_caseView morekamahl19• 3.0.0 • 7 years ago •  0 dependents •  MITpublished version 3.0.0, 7 years ago0 dependents licensed under $MIT3,031@blackflux/eslint-plugin-rulesMiscellaneous ESLint Ruleseslintpluginruleskebab-casechaiexpectsimlu• 4.0.1 • 3 months ago •  0 dependents •  MITpublished version 4.0.1, 3 months ago0 dependents licensed under $MIT2,963@lavadrop/kebab-caseConverts a string value into kebab case.stringkebab-casedash-casedashesdashno-dependenciestypescriptlavadropjedmao• 3.0.0 • 5 years ago •  3 dependents •  MITpublished version 3.0.0, 5 years ago3 dependents licensed under $MIT2,687@puq/namesThe String Names Library provides a simple names function that takes a string input and returns all possible naming convention variants, such as camelCase, snake_case, CONSTANT_CASE, and more. Perfect for tasks like code generation, formatting standardizapuqnamesUPPERCASElowercasekebab-casepascalCaseCamelCasedot.caseTitle caseclassNamefileNamepropertyNamerbrightline• 0.6.20 • a month ago •  0 dependents •  MITpublished version 0.6.20, a month ago0 dependents licensed under $MIT1,227curslo-string-utilities A simple utility library for string manipulationstringstring-utilsutilitiestext-processingcapitalizecamelcasecamel-casereversereverse-stringreverse-wordssnakecasesnake-casekebabcasekebab-caseView morerichard-kisivii• 2.1.3 • a month ago •  0 dependents •  MITpublished version 2.1.3, a month ago0 dependents licensed under $MIT871@shipengine/capitalizationString capitalization functions with special cases for certain ShipEngine words and phrasesshipenginestringcasingcapitalizationsnake-casekebab-casecamel-casepascal-casetitle-casesentence-casejamesmessinger• 1.2.1 • 5 years ago •  4 dependents •  Apache-2.0published version 1.2.1, 5 years ago4 dependents licensed under $Apache-2.08941234»\n\nSearch results78 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115case-anythingcamelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)change-casechange-casingcase-changecasing-changecamel-casepascal-casekebab-casesnake-caseada-caseconstant-casetrain-casecobol-casepath-casedot-caseView moremesqueeb• 3.1.2 • 2 months ago •  98 dependents •  MITpublished version 3.1.2, 2 months ago98 dependents licensed under $MIT3,520,485kebab-caseConvert a string to kebab-case, i.e. its dash separated formkebab-casekebabdashdasherizedashifydash-casetrain-caselisp-casejoakimbeng• 2.0.2 • 6 days ago •  528 dependents •  MITpublished version 2.0.2, 6 days ago528 dependents licensed under $MIT2,005,350just-kebab-caseconvert a string to kebab casekebabkebab-casestringno-dependenciesjustangus-c• 4.2.0 • 2 years ago •  58 dependents •  MITpublished version 4.2.0, 2 years ago58 dependents licensed under $MIT303,825kebabcaseConvert string to kebab-casekebab-casekebabdavidbernal• 1.0.1 • 7 years ago •  10 dependents •  MITpublished version 1.0.1, 7 years ago10 dependents licensed under $MIT67,431string-transformString-transform module from Glize library.string-transformtext-transformcapitalizecamel casecamelCasepascal casePascalCasekebab casekebab-casesnake casesnake_caseglizevpodk• 21.9.19 • 4 years ago •  1 dependents •  Apache-2.0published version 21.9.19, 4 years ago1 dependents licensed under $Apache-2.067,664case-it{camel,constant,dot,kebab,pascal,snake,space} case it.casecamelcamelcasecamel-caseconstantconstantcaseconstant-casedotdotcasedot-casekebabkebabcasekebab-casepascalView morefirede• 1.0.1 • 7 years ago •  8 dependents •  MITpublished version 1.0.1, 7 years ago8 dependents licensed under $MIT12,335change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956camel-to-kebabConvert camelCase inputs to kebab-case outputs.textstringsnamingcamelcamelCasepascalPascalCasekebabkebab-casehyphenspinallispcasepineapplemachine• 1.1.2 • 2 years ago •  12 dependents •  Zlibpublished version 1.1.2, 2 years ago12 dependents licensed under $Zlib6,248text-param-caseConvert into a lower cased text with dashes between wordscaseparamparamcaseparam-casekebabkebabcasekebab-casedashdashcasedash-casehyphenconverttransformdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT12,563vite-plugin-svelte-kebab-propsVite 2.x plugin to support kebab case props within Svelte components.sveltevitekebabcasekebab-casedashhyphenroonie007• 1.0.3 • 3 years ago •  0 dependents •  MITpublished version 1.0.3, 3 years ago0 dependents licensed under $MIT6,384skeweredThe simplest slugify module in the universe.slugifyslugurlifydashifydashcasedash-casekebabifykebabcasekebab-casehyphenatehyphencasehyphen-caseskewerbuster• 1.0.0 • 7 years ago •  2 dependents •  ISCpublished version 1.0.0, 7 years ago2 dependents licensed under $ISC3,312kebabcase-keysConvert object keys to kebab-casemapobjobjectkeykeysvaluevaluesvaliteratekebabcasekebab-casekebabcasedashView moremlohscheidt• 1.0.0 • 6 years ago •  13 dependents •  MITpublished version 1.0.0, 6 years ago13 dependents licensed under $MIT5,944@magic/casesconvert between camelCase, PascalCase, snake_case, and kebab-case.magicsnake_casesnakekebab-casekebabcamelpascalcaseconvertjascha• 0.0.9 • 2 years ago •  4 dependents •  AGPL-3.0published version 0.0.9, 2 years ago4 dependents licensed under $AGPL-3.05,845transform-obj-keysTransform object keys easily using whatever transform functionmapobjobjectkeykeysvaluevaluesvaliteratecamelcasecamel-casecamelsnakecasesnake_caseView morekamahl19• 3.0.0 • 7 years ago •  0 dependents •  MITpublished version 3.0.0, 7 years ago0 dependents licensed under $MIT3,031@blackflux/eslint-plugin-rulesMiscellaneous ESLint Ruleseslintpluginruleskebab-casechaiexpectsimlu• 4.0.1 • 3 months ago •  0 dependents •  MITpublished version 4.0.1, 3 months ago0 dependents licensed under $MIT2,963@lavadrop/kebab-caseConverts a string value into kebab case.stringkebab-casedash-casedashesdashno-dependenciestypescriptlavadropjedmao• 3.0.0 • 5 years ago •  3 dependents •  MITpublished version 3.0.0, 5 years ago3 dependents licensed under $MIT2,687@puq/namesThe String Names Library provides a simple names function that takes a string input and returns all possible naming convention variants, such as camelCase, snake_case, CONSTANT_CASE, and more. Perfect for tasks like code generation, formatting standardizapuqnamesUPPERCASElowercasekebab-casepascalCaseCamelCasedot.caseTitle caseclassNamefileNamepropertyNamerbrightline• 0.6.20 • a month ago •  0 dependents •  MITpublished version 0.6.20, a month ago0 dependents licensed under $MIT1,227curslo-string-utilities A simple utility library for string manipulationstringstring-utilsutilitiestext-processingcapitalizecamelcasecamel-casereversereverse-stringreverse-wordssnakecasesnake-casekebabcasekebab-caseView morerichard-kisivii• 2.1.3 • a month ago •  0 dependents •  MITpublished version 2.1.3, a month ago0 dependents licensed under $MIT871@shipengine/capitalizationString capitalization functions with special cases for certain ShipEngine words and phrasesshipenginestringcasingcapitalizationsnake-casekebab-casecamel-casepascal-casetitle-casesentence-casejamesmessinger• 1.2.1 • 5 years ago •  4 dependents •  Apache-2.0published version 1.2.1, 5 years ago4 dependents licensed under $Apache-2.08941234»\n\n\n\nSearch results7 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616text-header-caseConvert into a dash separated text of capitalized wordsheadercaseheadercaseheader-casedashhyphencapitalizeconverttransformdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT13,225change-case-legacyTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseguoyunhe• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT203vue-caseA collection of Vue.js case filterscamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.7 • 5 years ago •  1 dependents •  MITpublished version 1.0.7, 5 years ago1 dependents licensed under $MIT146@suchipi/change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casesuchipi• 5.4.4 • 8 months ago •  0 dependents •  MITpublished version 5.4.4, 8 months ago0 dependents licensed under $MIT6\n\nSearch results7 packages foundSort by: DefaultDefaultMost downloaded this weekMost downloaded this monthMost dependentsRecently publishedchange-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseblakeembrey• 5.4.4 • a year ago •  4,306 dependents •  MITpublished version 5.4.4, a year ago4306 dependents licensed under $MIT43,129,115change-case-commonjsTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casemartinshaw• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT14,956text-caseConvert text between `camelCase`, `PascalCase`, `Capital Case`, `Header-Case`, `Title Case`, `path/case`, `snake_case`, `param-case`, `dot.case`, `CONSTANT_CASE`, `lower case`, `lOWER CASE FIRST`, `UPPER CASE`, `Upper case first` and othercamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.9 • 5 years ago •  11 dependents •  MITpublished version 1.0.9, 5 years ago11 dependents licensed under $MIT12,616text-header-caseConvert into a dash separated text of capitalized wordsheadercaseheadercaseheader-casedashhyphencapitalizeconverttransformdimetrix• 1.0.2 • 5 years ago •  1 dependents •  MITpublished version 1.0.2, 5 years ago1 dependents licensed under $MIT13,225change-case-legacyTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-caseguoyunhe• 5.4.4 • a year ago •  1 dependents •  MITpublished version 5.4.4, a year ago1 dependents licensed under $MIT203vue-caseA collection of Vue.js case filterscamel-caseconstant-casecapital-casepascal-casechange-casesnake-casedot-casetitle-caseswap-casesentence-casepath-caseno-caseheader-caseparam-caseView moredimetrix• 1.0.7 • 5 years ago •  1 dependents •  MITpublished version 1.0.7, 5 years ago1 dependents licensed under $MIT146@suchipi/change-caseTransform a string between `camelCase`, `PascalCase`, `Capital Case`, `snake_case`, `kebab-case`, `CONSTANT_CASE` and otherschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casesuchipi• 5.4.4 • 8 months ago •  0 dependents •  MITpublished version 5.4.4, 8 months ago0 dependents licensed under $MIT6\n\n\n\nblakeembreyBlake Embrey@blakeembrey233 Packages0 OrganizationsPackages 233rangedThe missing JavaScript range functionblakeembreypublished 0.0.3 • 12 years agopublished version 0.0.3, 12 years agodombarsifyDOMBars precompiler plugin for Browserifyblakeembreypublished 0.0.3 • 11 years agopublished version 0.0.3, 11 years agoenvify-configBrowserify transform for replacing process.env variables with the config module settings.blakeembreypublished 0.0.1 • 11 years agopublished version 0.0.1, 11 years agozepto-componentZepto componenttjholowaychukpublished 1.0.0 • 13 years agopublished version 1.0.0, 13 years agotip-componentTip componenttootallnatepublished 1.0.2 • 11 years agopublished version 1.0.2, 11 years agomenu-componentMenu componenttjholowaychukpublished 0.1.1 • 12 years agopublished version 0.1.1, 12 years agodombarsAn extension of Handlebars that generates DOM objects instead of strings.blakeembreypublished 0.6.2 • 11 years agopublished version 0.6.2, 11 years agoparseurlparse a url with memoizationdougwilsonpublished 1.3.3 • 6 years agopublished version 1.3.3, 6 years agoutil-aritySet the length of a function.blakeembreypublished 1.1.0 • 8 years agopublished version 1.1.0, 8 years agois-generatorCheck whether a value is a generator or generator functionblakeembreypublished 1.0.3 • 9 years agopublished version 1.0.3, 9 years agoon-headersExecute a listener when a response is about to write headersdougwilsonpublished 1.0.2 • 6 years agopublished version 1.0.2, 6 years agovaryManipulate the HTTP Vary headerdougwilsonpublished 1.1.2 • 8 years agopublished version 1.1.2, 8 years agoretestRequest driven library for testing HTTP serversblakeembreypublished 1.0.1 • 10 years agopublished version 1.0.1, 10 years agoco-retestWrapper for the retest library for co-like interfaces (generators)blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agokrouteModular Koa router middleware with Express-style routes and middleware mountingblakeembreypublished 1.1.0 • 10 years agopublished version 1.1.0, 10 years agolanguage-mapGitHub's Linguist YAML language map provided as JSONblakeembreypublished 1.5.0 • 4 years agopublished version 1.5.0, 4 years agoutil-partialA functional utility for doing partial application.blakeembreypublished 1.0.1 • 9 years agopublished version 1.0.1, 9 years agolanguage-commandLook up the command for executing a program in any language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agonaryEnforce function arity in JavaScriptblakeembreypublished 2.0.0 • 8 years agopublished version 2.0.0, 8 years agolanguage-detect-execAutomatically execute a file in a known programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agolanguage-execExecute a file in any programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agolanguage-spawnSpawn a file process in any programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agolanguage-detect-spawnAutomatically spawn a file in a known programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agonumberedStringify any number into words, and parse number strings back to a numberblakeembreypublished 1.1.0 • 8 years agopublished version 1.1.0, 8 years agosimulate-eventA library for triggering DOM events.blink1073published 1.4.0 • 9 years agopublished version 1.4.0, 9 years agoshow more packages\n\nblakeembreyBlake Embrey@blakeembrey233 Packages0 OrganizationsPackages 233rangedThe missing JavaScript range functionblakeembreypublished 0.0.3 • 12 years agopublished version 0.0.3, 12 years agodombarsifyDOMBars precompiler plugin for Browserifyblakeembreypublished 0.0.3 • 11 years agopublished version 0.0.3, 11 years agoenvify-configBrowserify transform for replacing process.env variables with the config module settings.blakeembreypublished 0.0.1 • 11 years agopublished version 0.0.1, 11 years agozepto-componentZepto componenttjholowaychukpublished 1.0.0 • 13 years agopublished version 1.0.0, 13 years agotip-componentTip componenttootallnatepublished 1.0.2 • 11 years agopublished version 1.0.2, 11 years agomenu-componentMenu componenttjholowaychukpublished 0.1.1 • 12 years agopublished version 0.1.1, 12 years agodombarsAn extension of Handlebars that generates DOM objects instead of strings.blakeembreypublished 0.6.2 • 11 years agopublished version 0.6.2, 11 years agoparseurlparse a url with memoizationdougwilsonpublished 1.3.3 • 6 years agopublished version 1.3.3, 6 years agoutil-aritySet the length of a function.blakeembreypublished 1.1.0 • 8 years agopublished version 1.1.0, 8 years agois-generatorCheck whether a value is a generator or generator functionblakeembreypublished 1.0.3 • 9 years agopublished version 1.0.3, 9 years agoon-headersExecute a listener when a response is about to write headersdougwilsonpublished 1.0.2 • 6 years agopublished version 1.0.2, 6 years agovaryManipulate the HTTP Vary headerdougwilsonpublished 1.1.2 • 8 years agopublished version 1.1.2, 8 years agoretestRequest driven library for testing HTTP serversblakeembreypublished 1.0.1 • 10 years agopublished version 1.0.1, 10 years agoco-retestWrapper for the retest library for co-like interfaces (generators)blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agokrouteModular Koa router middleware with Express-style routes and middleware mountingblakeembreypublished 1.1.0 • 10 years agopublished version 1.1.0, 10 years agolanguage-mapGitHub's Linguist YAML language map provided as JSONblakeembreypublished 1.5.0 • 4 years agopublished version 1.5.0, 4 years agoutil-partialA functional utility for doing partial application.blakeembreypublished 1.0.1 • 9 years agopublished version 1.0.1, 9 years agolanguage-commandLook up the command for executing a program in any language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agonaryEnforce function arity in JavaScriptblakeembreypublished 2.0.0 • 8 years agopublished version 2.0.0, 8 years agolanguage-detect-execAutomatically execute a file in a known programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agolanguage-execExecute a file in any programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agolanguage-spawnSpawn a file process in any programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agolanguage-detect-spawnAutomatically spawn a file in a known programming language.blakeembreypublished 1.0.0 • 11 years agopublished version 1.0.0, 11 years agonumberedStringify any number into words, and parse number strings back to a numberblakeembreypublished 1.1.0 • 8 years agopublished version 1.1.0, 8 years agosimulate-eventA library for triggering DOM events.blink1073published 1.4.0 • 9 years agopublished version 1.4.0, 9 years agoshow more packages\n\n\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsGet help with the npm registry or your npm account.Please contact us if you need help with the npm registry or with your npm account, if you are reporting security concerns in an npm product, or if you need to report malicious or abusive behavior in a package in the registry.How can we help?I'm reporting spam, abuse or a security issueMy Security IssueI am reporting malware in a package on npmjs.comAsterisk (*) Indicates Required Field Name *Email *Subject *Package *Version *How can we help? *Verify you are a humanSubmitnpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\nContact UsYou need to be signed in to get help with npm.Sign in for assistanceCan't sign in, or don't have an account?Choose one of these categories to continue.Account or billing issuesCopyright or trademark data removalDispute a package, org, or usernameReport a security issue or abusenpm command-lineIf you're having trouble using the npm command-line interface, or you need help with a project that you’re working on, we recommend that you check out the Software Development board of the GitHub Community forums.Giving FeedbackIf you have suggestions for how we can improve npm please open a discussion in our feedback forum.Press RelationsPress inquiries should be addressed to  press@npmjs.comPress inquiries should be addressed to press@npmjs.com\n\n\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\nAbout npm
      
        npm, Inc. is a company founded in 2014, and was acquired by GitHub in 2020. npm is a critical part of the
        JavaScript community and helps support one of the largest developer ecosystems in the world.
      
      npm is lots of things.
      
        
          
            npm is the package manager for Node.js. It was created in
            2009 as an open source project  to help JavaScript
            developers easily share packaged modules of code.
          
        
        
          
            The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps,
            mobile apps, robots, routers, and countless other needs of the JavaScript community.
          
        
        
          
            npm is the command line client that allows developers to install and publish those packages.\n\n\n\nAbout
      Press
  



    
    
    
    

    Press

    


  
    
  
    

    
        Founded in February, 2008
    
  

  
    

    
      HQ in San Francisco
    
  

  
    

    
      Product updates
    
  

  
    

    
      GitHub glossary
    
  

  
    

    
      Media resources
    
  

  
    

    
       press@github.com
     
  


  

  
      
  
    
      ZDNet Korea
      [현장] 깃허브 "코파일럿, 개발 패러다임 바꿔…ROI 달성 가능"
    
    Mar 26, 2025


      
  
    
      Practical AI Podcast
      AI-assisted coding with GitHub's COO
    
    Mar 21, 2025


      
  
    
      No Priors 
      Episode 106: GitHub CEO Thomas Dohmke
    
    Mar 13, 2025


      
  
    
      The Guardian
      How ‘AI agents’ will change the internet 
    
    Mar 9, 2025


      
  
    
      WirtschaftsWoche
      Ein Büro? Gibt’s bei uns nicht
    
    Mar 4, 2025


      
  
    
      Wall Street Journal
      How AI Tools Are Reshaping the Coding Workforce
    
    Mar 4, 2025


      
  
    
      TI Inside
      Exposição total: uma abordagem prática para lidar com vazamentos de dados sensíveis
    
    Mar 3, 2025


      
  
    
      The New York Times 
      A.I. is Prompting an Evolution, Not Extinction, for Coders 
    
    Feb 20, 2025


      
  
    
      itforum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      IT Forum
      Boticário inova com uso do GitHub Copilot, gera menos tarefas repetitivas e foca em valor ao negócio
    
    Feb 19, 2025


      
  
    
      Infosecurity Magazine
      Full Exposure: A Practical Approach to Handling Sensitive Data Leaks
    
    Feb 7, 2025


      
  
    
      TechCrunch
      GitHub Copilot brings mockups to life by generating code from images
    
    Feb 6, 2025


      
  
    
      Forbes
      GitHub code now has ‘data residency’ in Australia
    
    Feb 5, 2025


      
  
    
      Accessibility and GenAI 
      Ep 5 - Ed Summers - Head of Accessibility, GitHub
    
    Feb 4, 2025


      
  
    
      FAZ
      DLD: Technologien und Talente prägen den Arbeitsmarkt im KI-Zeitalter
    
    Jan 22, 2025


      
  
    
      Financial Express
      ‘Where developers reside, innovation blooms’
    
    Jan 20, 2025


      
  
    
      Inforchannel
      GitHub anuncia três tendências de desenvolvimento de software para 2025
    
    Jan 17, 2025


      
  
    
      Help Net Security 
      GitHub CISO on security strategy and collaborating with the open source community
    
    Jan 13, 2025


  

    
      
        Previous 1 2 3 4 5 … 58 59 Next\n\n\n\nPoliciesThese are the legal policies of npm, Inc.
Terms of UseOpen Source TermsPrivate TermsCode of ConductPackage Name Disputesnpm LicensePrivacy PolicyUnpublish PolicyCopyright and DMCA PolicyLogos and UsageSecurityReplication and web crawler policy
These are updated from time to time. Their sources are stored in a git repository at https://github.com/npm/documentation/tree/main/content/policies.\n\n\n\nPoliciesTerms of UseTerms and LicensesSee DetailsTable of contentsSoftware from npmFree to use npm servicesPaid npm servicesnpm, Inc. offers software and services under a few different licenses and terms of use.
Software from npm
License terms and notices for the npm command-line program can be found in the LICENSE file of the project's source code at https://www.github.com/npm/cli.
Free to use npm services
Free usage of https://www.npmjs.com, and the npm public registry are covered by the npm Open Source Terms at https://docs.npmjs.com/policies/open-source-terms. These terms include several important policies, including:


What npm considers acceptable package content.


npm's Code of Conduct, which includes our policy on harassment.


npm's Privacy Policy, which limits use and sharing of information about you collected by npm Services.


npm's policy on copyright including how to report violations thereof.


npm's Dispute Policy which addresses how to resolve disputes over the control of a package name, user name, or organization name in the Public Registry. This includes our policy on users "squatting" on these names.


Use of npm's trademarks is governed by our Trademark Policy. If you have concerns about your own trademark's use on npm please see our Disputes Policy.


Paid npm services
npm's paid products, including the npm Solo and Orgs plans, are covered by the npm Paid Services Terms at https://docs.npmjs.com/policies/private-terms.
The npm Solo Payment Plan and the npm Orgs Payment Plan govern payment for these services.\n\n\n\nPoliciesCode of Conductnpm Code of ConductSee DetailsTable of contentstl;drScopeFriendly Harassment-Free SpaceAcceptable UseReporting Violations of this Code of ConductConsequencesAppeal and ReinstatementContact InfoChangesCredit and Licensenpm exists to facilitate sharing code, by making it easy for JavaScript module developers to publish and distribute packages.
npm is a piece of technology, but more importantly, it is a community.
We believe that our mission is best served in an environment that is friendly, safe, and accepting; free from intimidation or harassment.
Towards this end, certain behaviors and practices will not be tolerated.
tl;dr

Be respectful.
We're here to help
Abusive behavior is never tolerated.
Data published to npm is hosted at the discretion of the service administrators, and may be removed.
Violations of this code may result in swift and permanent expulsion from the npm community.

Scope
We expect all members of the npm community, including paid and unpaid agents, administrators, users, and customers of npm, Inc., to abide by this Code of Conduct at all times in all npm community venues, online and in person, and in one-on-one communications pertaining to npm affairs.
This policy covers the usage of the npm registry, as well as the npm website, npm related events, and any other services offered by or on behalf of npm, Inc. (collectively, the "Service"). It also applies to behavior in the context of the npm Open Source project communities, including but not limited to public GitHub repositories, IRC channels, social media, mailing lists, and public events.
This Code of Conduct is in addition to, and does not in any way nullify or invalidate, any other terms or conditions related to use of the Service.
The definitions of various subjective terms such as "discriminatory", "hateful", or "confusing" will be decided at the sole discretion of the npm abuse team.
Friendly Harassment-Free Space
We are committed to providing a friendly, safe and welcoming environment for all, regardless of gender identity, sexual orientation, ability, ethnicity, religion, age, physical appearance, body size, race, or similar personal characteristics.
We ask that you please respect that people have differences of opinion regarding technical choices, and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a single right answer. A difference of technology preferences is not a license to be rude.
Disputes over package rights must be handled respectfully, according to the terms described in the Disputes Policy. There is never a good reason to be rude over package name disputes.
Any spamming, trolling, flaming, baiting, or other attention-stealing behavior is not welcome, and will not be tolerated.
Harassing other users of the Service is never tolerated, whether via public or private media.
Avoid using offensive or harassing package names, nicknames, or other identifiers that might detract from a friendly, safe, and welcoming environment for all.
Harassment includes, but is not limited to: harmful or prejudicial verbal or written comments related to gender identity, sexual orientation, ability, ethnicity, religion, age, physical appearance, body size, race, or similar personal characteristics; inappropriate use of nudity, sexual images, and/or sexually explicit language in public spaces; threats of physical or non-physical harm; deliberate intimidation, stalking or following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention.
Acceptable Use
The Service administrators reserve the right to make judgment calls about what is and isn't appropriate in published packages, package names, user and organization names, and other public content. Package that violates the npm Service's Acceptable Use rules including its Acceptable Content rules will be deleted, at the discretion of npm.
Reporting Violations of this Code of Conduct
Please select the method of contact you think is most appropriate for the form of violation:


For urgent security issues, please open a ticket at https://npmjs.com/support. Requests to un-publish packages are not usually considered urgent security issues, as it is possible to un-publish a package within 24 hours of its first publish. Any publicly published package is immediately replicated to thousands of third-party mirrors, so any confidential information contained in a package should be considered immediately compromised.


If you believe someone is harassing you or is demonstrating some other form of malicious or inappropriate behavior, open a support ticket at https://npmjs.com/support. If this is the initial report of a problem, please include as much detail as possible. It is easiest for us to address issues when we have more context.


If you have concerns about a potential copyright violation, please refer to our Copyright Policy and take action as recommended by that policy.


If you think a package or other content is "squatting" on a name, follow the process described in the Disputes Policy.


For any other issues, or if in doubt, contact support.
Consequences
All content published to the Service, including user account credentials, is hosted at the sole discretion of the npm administrators.
Unacceptable behavior from any community member, including sponsors, employees, customers, or others with decision-making authority, will not be tolerated.
Anyone asked to stop unacceptable behavior is expected to comply immediately.
If a community member engages in unacceptable behavior, the npm administrators may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event or service).
Appeal and Reinstatement
If your content or account has been disabled or restricted and you seek reinstatement or wish to appeal, please review GitHub's Appeal and Reinstatement page for information about the process and use the Appeal and Reinstatement form to submit a request.
Contact Info
Please open a support ticket at https://npmjs.com/support if you need to report a problem or address a grievance related to an abuse report.
You are also encouraged to contact us if you are curious about something that might be "on the line" between appropriate and inappropriate content. We are happy to provide guidance to help you be a successful part of our community.
Changes
This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes.
Credit and License
This Code of Conduct borrows heavily from the Stumptown Syndicate Citizen's Code of Conduct, and the Rust Project Code of Conduct.
This document may be reused under a Creative Commons Attribution-ShareAlike License.\n\n\n\nPoliciesPrivacy PolicyPrivacy Questions and AnswersSee DetailsTable of contentsWhat's most important?How does npm collect data about me?What data does npm collect about me, and why?npm collects data about how you use npm software and registriesnpm collects data about how you use the websitenpm collects account datanpm collects package datanpm collects payment card datanpm collects data about correspondencenpm collects data about use of npm.communityDoes npm share data about me with others?npm uses cookiesHow can I make choices about data collection?Where does npm keep data about me?How does npm handle data under the EU General Data Protection Regulation?How does npm handle data under the California Consumer Privacy Act?How can I see what data is publicly available about me?How can I change data about me?What is npm's policy on unpublishing packages?How does npm notify others about published data that's erased?What happens if npm merges with or is bought by another company?What are npm's information practices regarding information belonging to children?Who can I contact about npm and my privacy?How can I find out about changes?This notice describes how npm, Inc., or npm for short, collects and uses data about you.
What's most important?
That depends on your personal situation, which is why you should read on and decide for yourself. But at a minimum, absolutely every npm user should understand:
The npm public registry is for making software available to everyone online.
But: Software comes from people, and says something about us.
So: Think carefully about what packages to publish, what data you put in those packages, and what others might do with that data.
When you create an account, certain contact information is displayed publicly in the npm platform. And when you upload a package, your name and contact information may become associated with that package.
If you find yourself in a jam, open a support ticket.
How does npm collect data about me?
npm collects data about you:


when you use the npm command, the npx command or another program to access the npm public registry, Enterprise registries that npm hosts, private packages, such as when you're publishing a software package, and APIs for functionality like account and permissions management


when you browse the npm website, npmjs.com


when you use either the npm command or the website to create an npm account, update your account, and sign up for npm services


when you send support, privacy, legal, and other requests to npm


when working with and researching current and potential customers


When researching potential customers, npm staff sometimes search the public World Wide Web or paid business databases. Otherwise, npm doesn't buy or receive data about you from data brokers or other private services.
npm may inadvertently collect data about you if it is included in software packages that you or others upload.
What data does npm collect about me, and why?
npm collects data about how you use npm software and registries
When you use the npm command, the npx command, or other software to work with the npm public registry, an Enterprise registry that npm hosts, or private packages, npm logs data that might be identified to you:


a random, unique identifier, called npm-session, for each time you run commands like npm install


the names and versions of your project's dependencies, their dependencies, and so on, that come from the npm public registry, but not of other dependencies, like Git dependencies


the versions of Node.js, the npm command, and the operating system you are using


an npm-in-ci header, showing whether the command was run on a continuous integration server


the scope of the package for which you ran npm install, as an npm-scope header


a referrer header that shows the command you ran, with any file or directory paths redacted


data about the software you're using to access the registry, such as the User-Agent string


network request data, such as the date and time, your IP address, and the URL


npm uses this data to:


fulfill your requests, such as by sending the packages you ask for


send you alerts about security vulnerabilities that may affect the software you're building, when you run npm install or npm audit


keep registries working quickly and reliably


debug and develop the npm command and other software


defend registries from abuse and technical attacks


compile statistics on package usage and popularity


prepare reports on trends in the developer community


improve search results on the website


recommend packages that may be relevant to your work


npm collects data about how you use the website
When you visit www.npmjs.com, docs.npmjs.com, and other npm websites, npm uses cookies, server logs, and other methods to collect data about what pages you visit, and when. npm also collects technical information about the software and computer you use, such as:


your IP address


your preferred language


the web browser software you use


the kind of computer you use


the website that referred you


npm uses data about how you use the website to:


optimize the website, so that it's quick and easy to use


diagnose and debug technical errors


defend the website from abuse and technical attacks


compile statistics on package popularity


compile statistics on the kinds of software and computers visitors use


compile statistics on visitor searches and needs, to guide development of new website pages and functionality


decide who to contact about about product announcements, service changes, and new features


npm collects account data
Many features of npm services require an npm account. For example, you must have an npm account to publish packages to the npm public registry.
To create an npm account, npm requires a working email address and an available user name. npm uses this data to provide you access to features and identify you across npm services, publicly and within npm.
You do not have to give your personal or legal name to create an npm account. You can use a pseudonym instead. You can also open more than one account.
If you sign up for an account, then npm will publish account data for the whole world to see on user pages like this one. npm also publishes account data through the npm public registry, which is available for everyone to see, and Enterprise registries that npm hosts for others to find with commands like npm owner ls tap.
If you give npm a personal name or names on social media like GitHub and Twitter through the website, like when you include this on your profile or user page, npm publishes that data along with the email address and user name for the account. You don't have to give npm a personal name or any social media names, and you can remove this data at any time by updating your user page.
npm uses your email to:


notify you about packages published using your account


reset your password and help keep your account secure


add metadata to packages that you publish


contact you in special circumstances related to your account or packages


contact you about support requests


contact you about legal requests, like DMCA takedown requests and privacy complaints


announce new npm product offerings, service changes, and features


send you tips about how to better use free and paid services


send you messages about paid services you might want


npm collects package data
When you use npm publish or other software to publish packages to the npm public registry, an Enterprise registry that npm hosts, or as a private package, npm collects the contents of the package, plus metadata, including your account data. Other npm users may also publish packages that include data about you, such as the fact that you contributed code to a package.
npm uses data in packages to provide those packages to you and others who request them:


When you publish a package to the npm public registry, or change a package from private to public, npm makes the package and metadata available to everyone, online.


When you publish a package to an Enterprise registry that npm hosts, or as a private package, npm makes all of that data available to other users according to how the registry or the private packages account is configured. You may be able to configure who can access the package, or that may be up to others, such as the administrator of your company's Enterprise registry.


Making package data available to others allows them to download, build on, and depend on your work.
npm collects payment card data
To sign up for paid services, npm requires your payment card data. npm itself does not collect or store enough information to charge your card itself. Rather, Stripe collects that data on npm's behalf, and gives npm security tokens that allow npm to create charges and subscriptions.
npm uses your payment card data only to charge for npm services.
npm instructs Stripe to store your payment card data only as long as you use paid npm services.
npm collects data about correspondence
npm collects data about you when you send npm support requests, legal complaints, privacy inquiries, and business inquiries. Those data usually include your name and email address, and may include your company or other affiliation.
npm uses contact data to:


respond to you


compile aggregate statistics about correspondence


train support staff and other npm personnel


review the performance of npm personnel who respond


defend npm from legal claims


npm collects data about use of npm.community
npm collects data about visits, user accounts, and forum data on npm.community, the discussion forum for users of npm products and services. npm uses data from npm.community to collaborate with the development community, and to inform development decisions about the command-line interface and other software.
Does npm share data about me with others?
npm shares account data with others as mentioned in the section about account data.
npm shares package data with others as mentioned in the section about package data.
npm publishes posts and other content you submit to npm.community.
npm does not sell information about you to others. However, npm uses services provided by other companies to provide npm services. The types of service providers that npm uses include:


Companies that enable us to offer features on our website, such as to display your avatar


Companies that facilitate the efficient distribution of content


Cloud computing platforms and services that host our discussion forums


Services that assist with the detection of spam, scams, abuse others, or other violations of our terms of service


Payment processors


Platforms to help us receive, manage, and respond to support requests


Platforms for internal communication


npm uses cookies
npm's website only uses cookies strictly necessary to provide, optimize and secure the website. For example, we use them to keep you logged in, remember your preferences, authenticate your device for security purposes, analyze your use of the service, compile statistical reports, and provide information for future development of npm. The website uses internal cookies for analytics purposes, not any third-party analytics or service providers.
By using the website, you agree that we can place these types of cookies on your computer or device. If you disable your browser or device’s ability to accept these cookies, you will not be able to log in or use the website.
How can I make choices about data collection?
You choose what data the npm publish command includes in package data. You can use an .npmignore file in your package to keep specific files out of the package. You can also use a files list in package.json files to instruct npm to include only specific files that you name, in addition to standard files like README files, LICENSE files, and package.json.
To double check the data that you will share in a package that you plan to publish, run the npm publish --dry-run command. If you are running an older version of the npm command, run the npm pack command to create a tarball, then check its contents, such as with tar tvzf $tarball.
To publish a package to the npm public registry, npm's terms of service require you to license npm to share it. If a package is made public, it is available for everyone online to see. However, your choice of public license for your package may affect what others can do with data about you in your package.
npm does not respond to the Do Not Track HTTP header.
Where does npm keep data about me?
npm stores account data, data about website use, data about registry use, and private packages on servers in the United States of America. metadata about those packages worldwide, via content delivery networks.
npm stores package data published to Enterprise registries that npm hosts, plus metadata about them, in cloud computing zones of customers' choosing.
By using the npm platform, you consent to the collection and storage of your data as outlined in this section.
How does npm handle data under the EU General Data Protection Regulation?
npm respects privacy rights under Regulation (EU) 2016/679, the European Union's General Data Protection Regulation (GDPR). npm processes "Personal Data" on the following legal bases: (1) with your consent; (2) as necessary to perform our agreement to provide our services; and (3) as necessary for our legitimate interests in providing our services where those interests do not override your fundamental rights and freedom related to data privacy. Information we collect may be transferred to, and stored and processed in, the United States or any other country in which we or our affiliates or subcontractors maintain facilities, as described above.
If you reside in the EEA, Switzerland, or United Kingdom, you are entitled to certain rights, like the right to:


complain about our data collection or processing actions with the supervisor authority concerned. You can find a list of data protection authorities here.


access to information held about you.


ask us to correct or amend inaccurate or incomplete information we have about you.


ask us to erase data that under certain circumstances, like (1) when it is no longer necessary for the purpose for which it was collected, (2) you withdraw consent and no other legal basis for processing exists, or (3) you believe your fundamental rights to data privacy and protection outweigh our legitimate interest in continuing the processing.


request that we restrict our processing if we are processing your data based on legitimate interests or the performance of a task in the public interest as an exercise of official authority (including profiling); using your data for direct marketing (including profiling); or processing your data for purposes of scientific or historical research and statistics.


When you exercise your rights, npm may need to verify your identity and provide us with information before we access records containing your information. If you want to exercise your rights, please contact npm by opening a support ticket. We may have a reason under the law why we do not have to comply with your request or may comply with it in a more limited way than you anticipated. If we do, we will explain that to you in our response.
How does npm handle data under the California Consumer Privacy Act?
npm respects the rights of California residents under the California Consumer Privacy Act (CCPA). Where we collect information that is subject to the CCPA, that information we collect and your rights are described below.
Categories of personal information we collect:


Personal Identifiers:


Name and email address when you create an account. You will also be asked to create a username and we will assign one or more unique identifiers to your profile. We use this information to provide our services, respond to your requests, and send information to you.


We also collect your social media handle and basic account information if you provide it to us or interact with our services, such as our help desk, through social media.


We collect your payment information through our service provider, Stripe, as described above.




Internet or Other Electronic Network Activity Information: device identifiers such as IP address and user agent; the assigned unique IDs in cookies (as described below); information about how you arrived at and navigated through our Services.


Geolocation Data: We do not collect your specific longitude and latitude. However, we do collect imprecise location (e.g., your IP address).


Professional or employment-related information: If you apply for employment with us, information about your employment history.


Education information: If you apply for employment with us, information about your educational history.


We may collect any other information about you contained in software packages uploaded to our site, as described above under the "npm collects package data" section. We also collect the contents of your communications with us, e.g., when you submit a question to us through a web form or comments to us on social media.
We may disclose any of the categories of personal information listed above and use them for the above-listed purposes or for other business or operational purposes compatible with the context in which the personal information was collected. Our disclosures of personal information include disclosures to our "service providers," which are companies that we engage for business purposes to conduct activities on our behalf. The categories of service providers with whom we share information and the services they provide are described below.
Rights under CCPA:


Access/Right to Know: You have the right to request access to personal information we collected about you and information regarding the source of that personal information, the purposes for which we collect it, and the third parties and service providers with whom we share it.


Deletion: You have the right to request that we erase data we have collected from you. Please note that we may have a reason to deny your deletion request or delete data in a more limited way than you anticipated, e.g., because of a legal obligation to retain it.


To exercise your rights above, you can open a support ticket. When we process your request, we must verify your identity by asking you to (1) provide personal identifiers that we can match against information we may have collected from you previously; and (2) confirm your request using the email stated in the request.
Opt-out of sale:
California residents have the right to request that we stop "selling" their personal information. A "sale" of personal information is defined broadly: "selling, renting, releasing, disclosing, disseminating, making available, transferring, or otherwise communicating orally, in writing, or by electronic or other means, a consumer's personal information by the business to another business or a third party for monetary or other valuable consideration." We do not sell your information as defined by the CCPA.
Please note that your right to opt out does not apply to our sharing of personal information with service providers, who are parties we engage to perform a function on our behalf and are contractually obligated to use the Personal Information only for that function.
We may also disclose information to other entities who are not listed here when required by law or to protect our Company or other persons, as described in our Privacy Policy.
How can I see what data is publicly available about me?
You can access your account data at any time by visiting your account page on www.npmjs.com. Your account page also lists all the packages published under your account or other accounts.
You can access package data by downloading the packages, as long as they're public or you have permission to access them.
You can see metadata about packages by running npm info $package, or by accessing the appropriate registry's API. Registry APIs provide metadata in standard JSON format, and packages as tarballs.
How can I change data about me?
You can change your personal account data and payment card data at any time by visiting your account settings page on www.npmjs.com. You can change account and payment data for Enterprise by contacting support.
You can close your npm account at any time by e-mailing contacting support. Closing your account removes the profile from the public registry but does not automatically erase packages published under your account. We may retain some data about you internally even where you close your account.
npm's unpublish policy determines when you can erase packages from the npm public registry. The unpublish policy strikes a difficult balance between the purpose of publishing and hosting packages, others' reliance on what has been made public, and individual rights and freedoms.
If another user improperly publishes personal data about you, in a package or otherwise, open a support ticket.
Please note that while npm publishes notices about published data that's been erased, npm can't make everyone who has downloaded published package data or account data erase that data on your behalf. Choosing a public license, such as an open source software license, may encourage and allow storage, distribution, and use of package data indefinitely. Nearly all popular open source software licenses actually require preserving personal data that attributes the software to you, such as copyright notices, as a condition of permission for the software.
What is npm's policy on unpublishing packages?
Please see our policy on "unpublishing" packages or our terms of service for more information on erasing packages.
If you accidentally publish a package that threatens your privacy, or discover someone else has published a package that does, open a support ticket. npm can and will take down packages in specific, exceptional situations to protect you, especially if others violate your privacy. Using npm to violate others' privacy is against our terms of service.
How does npm notify others about published data that's erased?
npm takes a few steps to notify others who may be copying data from the npm public registry that published data has been erased:


npm publishes new placeholder versions of some erased packages, with README files that mention the package has been erased, and why.


npm's registry APIs, special software services that others use to copy data from the npm public registry, send update messages about packages that have been erased.


What happens if npm merges with or is bought by another company?
We may transfer to another entity or its affiliates or service providers some or all information about you in connection with, or during negotiations of, any merger, acquisition, sale of assets or any line of business, change in ownership control, or financing transaction. We cannot promise that an acquiring party or the merged entity will have the same privacy practices or treat your information the same as described in this Policy.
What are npm's information practices regarding information belonging to children?
npm's site and services are intended for users age sixteen and older. npm does not knowingly collect information from children. If we discover that we have inadvertently collected information from anyone younger than the age of 16, we will delete that information.
Who can I contact about npm and my privacy?
Please open a support ticket. You may also contact our Data Protection Officer directly.
Our United States HQ:
GitHub Data Protection Officer
Attention: npm Data Protection
88 Colin P. Kelly Jr. St.
San Francisco, CA 94107
United States
or our EU Office:
GitHub BV
Vijzelstraat 68-72
1017 HL Amsterdam
The Netherlands
How can I find out about changes?
This version of npm's privacy questions and answers took effect June 3, 2020.
npm will announce the next version on the npm blog. In the meantime, npm may update its contact information by updating the page at https://docs.npmjs.com/privacy, without an announcement. npm may change how it announces changes in future privacy versions.
You can review the history of changes in the Git repository for npm's public policies.\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\nnpm Pro
        
          Publish your own packages to the world's most popular software ecosystem
        
        
          Get started
        
        
          
            
          
          Unlimited public packages
          Bring the best of open source JavaScript development to your own projects.
        
        
          
            
          
          Unlimited private packages
          Seamlessly integrate public and private packages into your development cycle.
        
        
          
            
          
          Package-based permissions
          Add collaborators to work on your public and private packages together.
        
      
    
  
  
    
      
        
      
      Working on a team?
      Try npm Teams.
      Team-based access controls to manage package permissions across your organization.
       Learn about Teams 
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      Get Started
      
        
        
          1
          Create an account
          
            If you don't have one yet,
             create a free npm account 
          
        
      
      
        
        
          2
          Upgrade your account
          
            Log into your account and
             upgrade your plan\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\nnpm Teams
      
        Share code and collaborate with the tools that make JavaScript the world's best software ecosystem
      
      
        Get started
      
    
  
  
    
      
        
          
        
        Unlimited public packages
        Bring the best of open source JavaScript development to your own projects.
      
      
        
          
        
        Unlimited private packages
        Seamlessly integrate public and private packages into your development cycle.
      
      
        
          
        
        Package-based permissions
        Add collaborators to work on your public and private packages together.
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support 
    
  
  
    
      
        Get Started\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\nPricing
    
    
      
        
          
            For Public Package Authors
          
          
            
              
            
          
          
            Free
            
              $
              0
            
            
              
                Unlimited 
                  public packages
              
            
             Create 
          
        
      
      
        
          
            For Individual 
            Creators
          
          
            
          
          
            Pro
            
              $
              7
            
            per month
             
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Package-based 
                  permissions
              
            
            
              Get Started With Pro
            
          
        
      
      
        
          
            For Teams & 
            Organizations
          
          
            
          
          
            Teams
            
              $
              7
            
            per user 
              per month
            
              
                Unlimited 
                  public packages
              
              
                Unlimited 
                  private packages
              
              
                Team-based 
                  permissions
              
            
            
              Get Started With Teams
            
          
        
      
    
  
  
    
      
        
        
          Feature Comparison
        
        
          
            Unlimited public packages &
            automatic security warnings
          
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited private packages
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
          Unlimited team-based management
          
            
              Free
              
                
              
            
            
              Pro
              
                
              
            
            
              Teams
              
                
              
            
          
        
        
      
       All versions include basic support\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\nBuild amazing thingsWe're GitHub, the company behind the npm Registry and npm CLI. We offer those to the community for free, but our day job is building and selling useful tools for developers like you.Take your JavaScript development up a notchGet started today for free, or step up to npm Pro to enjoy a premium JavaScript development experience, with features like private packages.Sign up for freeLearn about ProBring the best of open source to you, your team, and your companyRelied upon by more than 17 million developers worldwide, npm is committed to making JavaScript development elegant, productive, and safe. The free npm Registry has become the center of JavaScript code sharing, and with more than two million packages, the largest software registry in the world. Our other tools and services take the Registry, and the work you do around it, to the next level.\n\n\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\nSign InUsernameForgot password?PasswordShowSign InCreate Account\n\n\n\nReset PasswordEnter the email address or username you use to sign in.Email address or username *Get Password Reset LinkBack to Sign In\n\nReset PasswordEnter the email address or username you use to sign in.Email address or username *Get Password Reset LinkBack to Sign In\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
ReadmeKeywordschangecaseconverttransformcamel-casepascal-caseparam-casekebab-caseheader-casePackage SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
/change-case//change-case/Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\nChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\nchange-case5.4.4 • Public • Published a year ago ReadmeCode Beta0 Dependencies4,309 Dependents45 VersionsChange Case

Transform a string between camelCase, PascalCase, Capital Case, snake_case, kebab-case, CONSTANT_CASE and others.

Installation
npm install change-case --save

Usage
import * as changeCase from "change-case";

changeCase.camelCase("TEST_VALUE"); //=> "testValue"
Included case functions:



Method
Result




camelCase
twoWords


capitalCase
Two Words


constantCase
TWO_WORDS


dotCase
two.words


kebabCase
two-words


noCase
two words


pascalCase
TwoWords


pascalSnakeCase
Two_Words


pathCase
two/words


sentenceCase
Two words


snakeCase
two_words


trainCase
Two-Words



All methods accept an options object as the second argument:


delimiter?: string The character to use between words. Default depends on method, e.g. _ in snake case.

locale?: string[] | string | false Lower/upper according to specified locale, defaults to host environment. Set to false to disable.

split?: (value: string) => string[] A function to define how the input is split into words. Defaults to split.

prefixCharacters?: string Retain at the beginning of the string. Defaults to "". Example: use "_" to keep the underscores in __typename.

suffixCharacters?: string Retain at the end of the string. Defaults to "". Example: use "_" to keep the underscore in type_.

By default, pascalCase and snakeCase separate ambiguous characters with _. For example, V1.2 would become V1_2 instead of V12. If you prefer them merged you can set mergeAmbiguousCharacters to true.
Split
Change case exports a split utility which can be used to build other case functions. It accepts a string and returns each "word" as an array. For example:
split("fooBar")
  .map((x) => x.toLowerCase())
  .join("_"); //=> "foo_bar"
Change Case Keys
import * as changeKeys from "change-case/keys";

changeKeys.camelCase({ TEST_KEY: true }); //=> { testKey: true }
Change case keys wraps around the core methods to transform object keys to any case.
API


input: any Any JavaScript value.

depth: number Specify the depth to transfer for case transformation. Defaults to 1.

options: object Same as base case library.

TypeScript and ESM
This package is a pure ESM package and ships with TypeScript definitions. It cannot be require'd or used with CommonJS module resolution in TypeScript.
License
MIT
Dependencies (0)Dev Dependencies (0)Package SidebarInstallnpm i change-caseRepositorygithub.com/blakeembrey/change-caseHomepagegithub.com/blakeembrey/change-case/tree/master/packages/change-case#readmeWeekly Downloads10,026,749Version5.4.4LicenseMITUnpacked Size35.9 kBTotal Files8Last publisha year agoCollaboratorsTry on RunKitReport malware\n\n\n\n