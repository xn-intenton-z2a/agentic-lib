DocsLanguage APIs & SDKsJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser).This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.WarningClient instrumentation for the browser is experimental and mostly
unspecified. If you are interested in helping out, get in touch with the
Client Instrumentation SIG.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\nHigh-quality, ubiquitous, and portable telemetry to enable effective observabilityLearn moreTry the demoGet started based on your roleDevOpsOpenTelemetry is a collection of APIs, SDKs, and tools. Use it to instrument,
generate, collect, and export telemetry data (metrics, logs, and traces) to help
you analyze your software’s performance and behavior.OpenTelemetry is generally available across
several languages and is suitable for production use.Traces, Metrics, LogsCreate and collect telemetry from your services and software, then forward it to
a variety of analysis tools.Read moreDrop-in Instrumentation & IntegrationsOpenTelemetry integrates with many popular libraries and frameworks, and
supports code-based and zero-code instrumentation.Open Source, Vendor Neutral100% free and open source, OpenTelemetry is adopted and supported by industry
leaders in the observability space.OpenTelemetry is a CNCF incubating project.Formed through a
merger of the OpenTracing and OpenCensus projects.\n\n\n\nDocsDocumentationOpenTelemetry, also known as OTel, is a vendor-neutral open source
Observability framework
for instrumenting, generating, collecting, and exporting telemetry data such as
traces, metrics, and
logs.As an industry-standard, OpenTelemetry is
supported by more than 40 observability vendors,
integrated by many libraries, services, and apps,
and adopted by numerous end users.What is OpenTelemetry?A brief explanation of what OpenTelemetry is and isn’t.Getting StartedGet started with OpenTelemetry based on your role.OpenTelemetry ConceptsKey concepts in OpenTelemetryOpenTelemetry Demo DocsLanguage APIs & SDKsOpenTelemetry code instrumentation is supported for many popular programming languagesPlatforms and environmentsHardware & software platforms and environments supporting OpenTelemetryZero-code InstrumentationCollectorVendor-agnostic way to receive, process and export telemetry data.MigrationHow to migrate to OpenTelemetrySpecificationsSecurityContributingFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified June 8, 2024: [i18n & ja] Improved fallback config and normalize `en` doc links (#4627) (e7a62891)\n\nWhat is OpenTelemetry?A brief explanation of what OpenTelemetry is and isn’t.Getting StartedGet started with OpenTelemetry based on your role.OpenTelemetry ConceptsKey concepts in OpenTelemetryOpenTelemetry Demo DocsLanguage APIs & SDKsOpenTelemetry code instrumentation is supported for many popular programming languagesPlatforms and environmentsHardware & software platforms and environments supporting OpenTelemetryZero-code InstrumentationCollectorVendor-agnostic way to receive, process and export telemetry data.MigrationHow to migrate to OpenTelemetrySpecificationsSecurityContributing\n\n\n\nEcosystemOpenTelemetry EcosystemOpenTelemetry’s thriving ecosystem of components, examples, integrations and vendorsOpenTelemetry DemoThe OpenTelemetry Demo is a microservice-based distributed system intended to illustrate the implementation of OpenTelemetry in a near real-world environment.RegistryFind libraries, plugins, integrations, and other useful tools for using and extending OpenTelemetry.AdoptersOrganizations that use OpenTelemetryDistributionsList of open source OpenTelemetry distributions maintained by third parties.IntegrationsLibraries, services, and apps with first-party support for OpenTelemetry.VendorsVendors who natively support OpenTelemetryFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 24, 2023: Add ecosystem section (#2185) (9fbbc238)\n\nOpenTelemetry DemoThe OpenTelemetry Demo is a microservice-based distributed system intended to illustrate the implementation of OpenTelemetry in a near real-world environment.RegistryFind libraries, plugins, integrations, and other useful tools for using and extending OpenTelemetry.AdoptersOrganizations that use OpenTelemetryDistributionsList of open source OpenTelemetry distributions maintained by third parties.IntegrationsLibraries, services, and apps with first-party support for OpenTelemetry.VendorsVendors who natively support OpenTelemetry\n\n\n\nStatusStatusMaturity-level of the main OpenTelemetry componentsOpenTelemetry is made up of several components,
some language-specific and others language-agnostic. When looking for a
status, make sure to look for the
status from the right component page. For example, the status of a signal in the
specification may not be the same as the signal status in a particular language
SDK.Language APIs & SDKsFor the development status, or maturity level, of a
language API or SDK, see the following table:LanguageTracesMetricsLogsC++StableStableStableC#/.NETStableStableStableErlang/ElixirStableDevelopmentDevelopmentGoStableStableBetaJavaStableStableStableJavaScriptStableStableDevelopmentPHPStableStableStablePythonStableStableDevelopmentRubyStableDevelopmentDevelopmentRustBetaBetaBetaSwiftStableDevelopmentDevelopmentFor more details on the specification compliance per implementation, see the
Spec Compliance Matrix.CollectorThe collector status is: mixed, since
core collector components currently have mixed
stability levels.Collector components differ in their maturity levels. Each component has its
stability documented in its README.md. You can find a list of all available
collector components in the registry.Kubernetes OperatorThe OpenTelemetry Operator status is
mixed, since it deploys components of
differing statuses.The Operator itself is in a mixed
state with components in v1alpha1 and v1beta1 states.SpecificationsFor the development status, or maturity level, of the
specification, see the following:
Specification Status Summary.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 12, 2025: Improve Status and Training page layout, some copyedits (#6296) (1f83b9ff)\n\n\n\nCommunityCommunityOpenTelemetry is an open source project that anyone in the community can use, improve, and enjoy. We'd love you to join us!Learn and ConnectUsing or want to use OpenTelemetry? Find out more here: Mailing Lists: List of mailing lists that the project uses. Bluesky: Follow us on Bluesky to get the latest news! Mastodon: Follow us on Mastodon to get the latest news! Stack Overflow: Practical questions and curated answers OTel logos: Official OpenTelemetry logos Meeting Recordings: Watch our meeting recordings on Zoom Cloud Site analytics: Google analytics for opentelemetry.ioDevelop and ContributeTo learn how to contribute to OpenTelemetry documentation,
see Contributing. Other useful links: GitHub: Find us on GitHub. Slack #opentelemetry: Chat with other project developers. Sign up via slack.cncf.io. Also see other channels starting with a #otel- prefix. CNCF DevStats: See our activity on CNCF DevStats Privacy Policy: CNCF and Linux Foundation privacy policy. Trademark Usage: Linux Foundation’s trademarks policy and guidelines. Marketing Guidelines: Important information on how to represent your personal or corporate contributions or participation in the OpenTelemetry project. Site-build info: Site-build information.For our documentation style guide and more, see Contributing.Participate in End User GroupsInterested in connecting with other end-users and providing feedback to
OpenTelemetry maintainers? Check out the
End User Resources to learn more.Special Interest GroupsWe organize the community into Special Interest Groups (SIGs) in order to
improve our workflow and more easily manage a community project.
Read more
from our community repository.EcosystemLooking for components, examples, integrations and more? See
Ecosystem.OpenTelemetry mission, vision, and valuesOpenTelemetry Project RoadmapMembers of the OpenTelemetry ProjectEnd-user resourcesVendor-agnostic resources for OpenTelemetry usersOpenTelemetry Marketing Guidelines for Contributing OrganizationsFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified July 12, 2023: Introduce additional textlint rules (#3011) (8023bf0b)\n\nOpenTelemetry mission, vision, and valuesOpenTelemetry Project RoadmapMembers of the OpenTelemetry ProjectEnd-user resourcesVendor-agnostic resources for OpenTelemetry usersOpenTelemetry Marketing Guidelines for Contributing Organizations\n\n\n\nTrainingTrainingOpenTelemetry certifications and coursesThis page showcases the growing training resources for OpenTelemetry. Check back
often for updates!CertificationsDemonstrate your expertise in OpenTelemetry by becoming an OpenTelemetry
Certified Associate (OTCA), available from Cloud Native Certifications:CoursesA FREE course available from Cloud Native Training Courses for
OpenTelemetry and offered by the Linux Foundation:FREE
Getting Started with OpenTelemetryA course designed for software developers, DevOps engineers, site reliability engineers (SREs), and anyone looking to implement telemetry solutions across apps and environments.Online, self-paced, 8-10 hrs,
learn more.RegisterLast modified February 14, 2025: [training] Improve page design for desktop and mobile (#6321) (2ae7cbaa)\n\n\n\nBlogBlogPosts in 2025OTel Sucks (But Also Rocks!)Thursday, April 03, 2025 in 2025OpenTelemetry (OTel) is often touted as the future of observability, promising vendor neutrality and comprehensive data collection. But what’s the reality for those who use it daily? We sat down with several engineers and SREs to get their …Read moreInsights from the OpenTelemetry Developer Experience SurveyWednesday, April 02, 2025 in 2025The OpenTelemetry Developer Experience SIG recently surveyed the community to better understand where the SIG could have the most impact on improving the developer experience. We received 218 responses, which we will use to guide our prioritization …Read moreAnnouncing the OpenTelemetry JavaScript SDK 2.0Wednesday, March 26, 2025 in 2025Exciting news: OpenTelemetry JavaScript has released SDK 2.0!
Migration guide For a detailed description of breaking changes, see the migration guide: Upgrade to OpenTelemetry JS SDK 2.x.
What is JS SDK 2.x? JS SDK 2.x encompasses new releases of the …Read moreReflecting on my Outreachy JourneyMonday, March 24, 2025 in 2025Hello world! I’m Richard Chukwu, a Computer Engineering graduate from the University of Benin, Nigeria. My journey into tech has been fueled by a blend of curiosity and an unwavering commitment to growth. These are the pillars that not only uphold my …Read moreAI Agent Observability - Evolving Standards and Best PracticesThursday, March 06, 2025 in 20252025: Year of AI agents AI Agents are becoming the next big leap in artificial intelligence in 2025. From autonomous workflows to intelligent decision making, AI Agents will power numerous applications across industries. However, with this evolution …Read moreJoin us for OpenTelemetry Talks and Activities at KubeCon + CloudNativeCon Europe 2025Tuesday, March 04, 2025 in 2025The OpenTelemetry governance and technical committees, along with the project’s maintainers, invite you to join them and other members of the OpenTelemetry community at KubeCon + CloudNativeCon Europe (registration) and at the co-located …Read moreOpenTelemetry Is Expanding Into CI/CD ObservabilityMonday, February 24, 2025 in 2025We’ve been talking about the need for a common “language” for reporting and observing CI/CD pipelines for years, and finally, we see the first “words” of this language entering the “dictionary” of observability—the OpenTelemetry open specification. …Read moreAnnouncing the OpenTelemetry Demo 2.0Friday, February 21, 2025 in 2025We’re thrilled to announce that OpenTelemetry Demo 2.0 is here! We’ve been busy behind the scenes, polishing up the demo to make it more complete, robust, and user-friendly. We believe these exciting features and improvements deserve a …Read moreOTTL contexts just got easier with context inferenceThursday, February 20, 2025 in 2025Selecting the right OTTL context for running statements can be challenging, even for experienced users. Choosing the correct option impacts both accuracy and efficiency, as using higher-level OTTL contexts can avoid unnecessary iterations through …Read moreThe OpenTelemetry Contributor Experience Survey is open!Monday, February 17, 2025 in 2025TL;DR Take our OpenTelemetry Contributor Survey and help us enhance the contributor experience. We appreciate your time and feedback!
Since its founding, OpenTelemetry has had thousands of contributors from around the world, including end users, …Read more«««12345»»»\n\n\n\nDocsLanguage APIs & SDKsJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser).This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.WarningClient instrumentation for the browser is experimental and mostly
unspecified. If you are interested in helping out, get in touch with the
Client Instrumentation SIG.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\nDocsAPIs y SDKs para lenguajesJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser). You are
viewing the English version of this page because it has not yet been fully
translated. Interested in helping out? See Contributing.This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.WarningClient instrumentation for the browser is experimental and mostly
unspecified. If you are interested in helping out, get in touch with the
Client Instrumentation SIG.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptComentarios¿Fue útil esta página?Si
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Última modificación March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\nDocsLanguage APIs & SDKsJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser). You are
viewing the English version of this page because it has not yet been fully
translated. Interested in helping out? See Contributing.This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.WarningClient instrumentation for the browser is experimental and mostly
unspecified. If you are interested in helping out, get in touch with the
Client Instrumentation SIG.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptFeedbackCette page est-elle utile?Oui
NonThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Dernière modification March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\nドキュメント言語API & SDKJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser). You are
viewing the English version of this page because it has not yet been fully
translated. Interested in helping out? See Contributing.This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.WarningClient instrumentation for the browser is experimental and mostly
unspecified. If you are interested in helping out, get in touch with the
Client Instrumentation SIG.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptフィードバックこのページは役に立ちましたか?役に立った
役に立たなかったThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!最終更新 March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\nDocsAPIs e SDKs de LinguagensJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser). Você está
visualizando a versão em versão em inglês desta página porque ela ainda não
foi traduzida. Possui interesse em ajudar? Veja
como contribuir.This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.AvisoA instrumentação do cliente para o navegador é experimental e, em grande
parte, não está especificada. Caso possua interesse em auxiliar, entre em
contato com o SIG de Instrumentação do Cliente.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsPrimeiros PassosComece a utilizar OpenTelemetry em Node.js e no navegador.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nPrimeiros PassosComece a utilizar OpenTelemetry em Node.js e no navegador.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\n文档Language APIs & SDKsJavaScriptJavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser). You are
viewing the English version of this page because it has not yet been fully
translated. Interested in helping out? See Contributing.This is the OpenTelemetry JavaScript documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry JavaScript.Status and ReleasesThe current status of the major functional components for OpenTelemetry
JavaScript is as follows:TracesMetricsLogsStableStableDevelopmentFor releases, including the latest release, see Releases.WarningClient instrumentation for the browser is experimental and mostly
unspecified. If you are interested in helping out, get in touch with the
Client Instrumentation SIG.Version SupportOpenTelemetry JavaScript supports all active or maintenance LTS versions of
Node.js. Previous versions of Node.js may work, but are not tested by
OpenTelemetry.OpenTelemetry JavaScript has no official supported list of browsers. It is aimed
to work on currently supported versions of major browsers.OpenTelemetry JavaScript follows DefinitelyType’s support policy for TypeScript
which sets a support window of 2 years. Support for TypeScript versions older
than 2 years will be dropped in minor releases of OpenTelemetry JavaScript.For more details on runtime support see
this overview.RepositoriesOpenTelemetry JavaScript consists of the following repositories:opentelemetry-js, core
repository containing the core distribution API and SDK.opentelemetry-js-contrib,
contributions that are not part of the core distribution of the API and SDK.Help or FeedbackIf you have questions about OpenTelemetry JavaScript, please reach out via
GitHub Discussions
or the [#otel-js] channel on CNCF Slack.If you want to contribute to OpenTelemetry JavaScript, see the
contributing instructionsGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScriptFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 17, 2025: [javascript] move to SDK 2.x (#6441) (546f3e88)\n\nGetting StartedGet started with OpenTelemetry in Node.js and in the browser.InstrumentationInstrumentation for OpenTelemetry JavaScriptUsing instrumentation librariesHow to instrument libraries an app depends onExportersProcess and export your telemetry dataContextOpenTelemetry JavaScript Context API DocumentationPropagationContext propagation for the JS SDKResourcesAdd details about your applications’ environment to your telemetrySamplingReduce the amount of telemetry createdServerlessInstrument your serverless functions with OpenTelemetry JavaScriptBenchmarksAPI referenceRead the OpenTelemetry JavaScript API reference (external page)ExamplesExplore more examples for OpenTelemetry JavaScript (external page)RegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry JavaScript\n\n\n\nDocsWhat is OpenTelemetry?What is OpenTelemetry?A brief explanation of what OpenTelemetry is and isn’t.OpenTelemetry is:An observability framework and toolkit designed to facilitate theGenerationExportCollectionof telemetry data such as traces, metrics, and logs.Open source, as well as vendor- and tool-agnostic, meaning that it can
be used with a broad variety of observability backends, including open source
tools like Jaeger and Prometheus, as well as commercial offerings.
OpenTelemetry is not an observability backend itself.A major goal of OpenTelemetry is to enable easy instrumentation of your
applications and systems, regardless of the programming language,
infrastructure, and runtime environments used.The backend (storage) and the frontend (visualization) of telemetry data are
intentionally left to other tools.For more videos in this series and additional resources, see
What next?What is observability?Observability is the ability to understand the internal state of a system by
examining its outputs. In the context of software, this means being able to
understand the internal state of a system by examining its telemetry data, which
includes traces, metrics, and logs.To make a system observable, it must be instrumented. That is, the code
must emit traces, metrics, or logs. The instrumented data must then be
sent to an observability backend.Why OpenTelemetry?With the rise of cloud computing, microservices architectures, and increasingly
complex business requirements, the need for software and infrastructure
observability is greater than ever.OpenTelemetry satisfies the need for observability while following two key
principles:You own the data that you generate. There’s no vendor lock-in.You only have to learn a single set of APIs and conventions.Both principles combined grant teams and organizations the flexibility they need
in today’s modern computing world.If you want to learn more, take a look at OpenTelemetry’s
mission, vision, and values.Main OpenTelemetry componentsOpenTelemetry consists of the following major components:A specification for all componentsA standard protocol that defines the shape of telemetry dataSemantic conventions that define a standard naming scheme
for common telemetry data typesAPIs that define how to generate telemetry dataLanguage SDKs that implement the specification, APIs, and
export of telemetry dataA library ecosystem that implements instrumentation for
common libraries and frameworksAutomatic instrumentation components that generate telemetry data without
requiring code changesThe OpenTelemetry Collector, a proxy that receives, processes,
and exports telemetry dataVarious other tools, such as the
OpenTelemetry Operator for Kubernetes,
OpenTelemetry Helm Charts, and
community assets for FaaSOpenTelemetry is used by a wide variety of
libraries, services and apps that have OpenTelemetry
integrated to provide observability by default.OpenTelemetry is supported by numerous vendors, many of
whom provide commercial support for OpenTelemetry and contribute to the project
directly.ExtensibilityOpenTelemetry is designed to be extensible. Some examples of how it can be
extended include:Adding a receiver to the OpenTelemetry Collector to support telemetry data
from a custom sourceLoading custom instrumentation libraries into an SDKCreating a distribution of an SDK or the
Collector tailored to a specific use caseCreating a new exporter for a custom backend that doesn’t yet support the
OpenTelemetry protocol (OTLP)Creating a custom propagator for a nonstandard context propagation formatAlthough most users might not need to extend OpenTelemetry, the project is
designed to make it possible at nearly every level.HistoryOpenTelemetry is a Cloud Native Computing Foundation (CNCF) project that is
the result of a merger between two prior projects,
OpenTracing and OpenCensus.
Both of these projects were created to solve the same problem: the lack of a
standard for how to instrument code and send telemetry data to an Observability
backend. As neither project was fully able to solve the problem independently,
they merged to form OpenTelemetry and combine their strengths while offering a
single solution.If you are currently using OpenTracing or OpenCensus, you can learn how to
migrate to OpenTelemetry in the Migration guide.What next?Getting started — jump right in!Learn about OpenTelemetry concepts.Watch videos from the OTel for beginners or other playlists.Sign up for training, including the free course
Getting started with OpenTelemetry.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 14, 2025: Add video link to what-is-opentelemetry page (#6550) (44d2ea25)\n\n\n\nDocsGetting StartedGetting StartedGet started with OpenTelemetry based on your role.Select a role1 to get started:DevOpsYou can also try out the official OpenTelemetry demo to see what
observability with OpenTelemetry looks like!Try the demoIf none of these roles apply to you, let us know. ↩︎FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified June 8, 2024: [i18n & ja] Improved fallback config and normalize `en` doc links (#4627) (e7a62891)\n\n\n\nDocsGetting StartedDevGetting started for DevelopersThis is the getting-started page for you if:You develop software.Your goal is to get observability by writing code.You want to have your dependencies emit telemetry for you automatically.OpenTelemetry can help you! To accomplish your goals of having your dependencies
instrumented automatically and instrumenting your own code with our API
manually, we recommend that you learn the following concepts first:What is OpenTelemetry?How can I add instrumentation to my code base?If you develop libraries, frameworks or middleware that is used as a dependency
within other software, we recommend that you learn how you can provide telemetry
natively:How can I add native instrumentation to my library?If you are looking for a set of applications to try things out, you will find
our official OpenTelemetry demo useful.Next, you can deep dive into the documentations for the
language you are using:C++.NETErlang / ElixirGoJavaJavaScript / TypeScriptPHPPythonRubyRustSwiftOtherFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified April 14, 2025: Add Otel demo link to Getting Started Dev (#6683) (f1ccafef)\n\n\n\nDocsGetting StartedOpsGetting started for OpsThis is the getting-started page for you if:You run a set of applications in production.Your goal is to get telemetry out of them without touching their code.You want to collect traces, metrics, and logs from several services and send
them off to your observability backend.OpenTelemetry can help you! To accomplish your goal of getting telemetry out of
applications without touching their code, we recommend that you learn the
following:What is OpenTelemetry?How can I instrument applications without touching their code?How can I set up a collector?How can I get automation for Kubernetes with the OpenTelemetry Operator?If you are looking for a set of applications to try things out, you will find
our official OpenTelemetry demo useful.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 6, 2025: [IA] Link normalization step of (#6232) (99a39c5e)\n\n\n\nDocsConceptsOpenTelemetry ConceptsKey concepts in OpenTelemetryThis section covers data sources and key components of the OpenTelemetry
project, which can help you understand how OpenTelemetry works.Observability primerCore observability concepts.Context propagationLearn about the concept that enables Distributed Tracing.SignalsLearn about the categories of telemetry supported by OpenTelemetryInstrumentationHow OpenTelemetry facilitates instrumentationComponentsThe main components that make up OpenTelemetrySemantic ConventionsCommon names for different kinds of operations and data.ResourcesInstrumentation scopeSamplingLearn about sampling and the different sampling options available in OpenTelemetry.DistributionsA distribution, not to be confused with a fork, is a customized version of an OpenTelemetry component.GlossaryDefinitions and conventions for telemetry terms as used in OpenTelemetry.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified June 3, 2024: [i18n] Docs section ordering fix (#4573) (d638c386)\n\nObservability primerCore observability concepts.Context propagationLearn about the concept that enables Distributed Tracing.SignalsLearn about the categories of telemetry supported by OpenTelemetryInstrumentationHow OpenTelemetry facilitates instrumentationComponentsThe main components that make up OpenTelemetrySemantic ConventionsCommon names for different kinds of operations and data.ResourcesInstrumentation scopeSamplingLearn about sampling and the different sampling options available in OpenTelemetry.DistributionsA distribution, not to be confused with a fork, is a customized version of an OpenTelemetry component.GlossaryDefinitions and conventions for telemetry terms as used in OpenTelemetry.\n\n\n\nDocsConceptsObservability primerObservability primerCore observability concepts.What is Observability?Observability lets you understand a system from the outside by letting you ask
questions about that system without knowing its inner workings. Furthermore, it
allows you to easily troubleshoot and handle novel problems, that is, “unknown
unknowns”. It also helps you answer the question “Why is this happening?”To ask those questions about your system, your application must be properly
instrumented. That is, the application code must emit
signals such as
traces,
metrics, and
logs. An application is properly instrumented
when developers don’t need to add more instrumentation to troubleshoot an issue,
because they have all of the information they need.OpenTelemetry is the mechanism by which
application code is instrumented to help make a system observable.Reliability and metricsTelemetry refers to data emitted from a system and its behavior. The data
can come in the form of traces,
metrics, and
logs.Reliability answers the question: “Is the service doing what users expect it
to be doing?” A system could be up 100% of the time, but if, when a user clicks
“Add to Cart” to add a black pair of shoes to their shopping cart, the system
doesn’t always add black shoes, then the system could be unreliable.Metrics are aggregations over a period of time of numeric data about your
infrastructure or application. Examples include: system error rate, CPU
utilization, and request rate for a given service. For more on metrics and how
they relate to OpenTelemetry, see Metrics.SLI, or Service Level Indicator, represents a measurement of a service’s
behavior. A good SLI measures your service from the perspective of your users.
An example SLI can be the speed at which a web page loads.SLO, or Service Level Objective, represents the means by which reliability
is communicated to an organization/other teams. This is accomplished by
attaching one or more SLIs to business value.Understanding distributed tracingDistributed tracing lets you observe requests as they propagate through complex,
distributed systems. Distributed tracing improves the visibility of your
application or system’s health and lets you debug behavior that is difficult to
reproduce locally. It is essential for distributed systems, which commonly have
nondeterministic problems or are too complicated to reproduce locally.To understand distributed tracing, you need to understand the role of each of
its components: logs, spans, and traces.LogsA log is a timestamped message emitted by services or other components.
Unlike traces, they aren’t necessarily associated with
any particular user request or transaction. You can find logs almost everywhere
in software. Logs have been heavily relied on in the past by both developers and
operators to help them understand system behavior.Sample log:I, [2021-02-23T13:26:23.505892 #22473]  INFO -- : [6459ffe1-ea53-4044-aaa3-bf902868f730] Started GET "/" for ::1 at 2021-02-23 13:26:23 -0800
Logs aren’t enough for tracking code execution, as they usually lack contextual
information, such as where they were called from.They become far more useful when they are included as part of a span,
or when they are correlated with a trace and a span.For more on logs and how they pertain to OpenTelemetry, see
Logs.SpansA span represents a unit of work or operation. Spans track specific
operations that a request makes, painting a picture of what happened during the
time in which that operation was executed.A span contains name, time-related data,
structured log messages, and
other metadata (that is, Attributes)
to provide information about the operation it tracks.Span attributesSpan attributes are metadata attached to a span.The following table contains examples of span attributes:KeyValuehttp.request.method"GET"network.protocol.version"1.1"url.path"/webshop/articles/4"url.query"?s=1"server.address"example.com"server.port8080url.scheme"https"http.route"/webshop/articles/:article_id"http.response.status_code200client.address"192.0.2.4"client.socket.address"192.0.2.5" (the client goes through a proxy)user_agent.original"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0"For more on spans and how they relate to OpenTelemetry, see
Spans.Distributed tracesA distributed trace, more commonly known as a trace, records the paths
taken by requests (made by an application or end-user) as they propagate through
multi-service architectures, like microservice and serverless applications.A trace is made of one or more spans. The first span represents the root span.
Each root span represents a request from start to finish. The spans underneath
the parent provide a more in-depth context of what occurs during a request (or
what steps make up a request).Without tracing, finding the root cause of performance problems in a distributed
system can be challenging. Tracing makes debugging and understanding distributed
systems less daunting by breaking down what happens within a request as it flows
through a distributed system.Many Observability backends visualize traces as waterfall diagrams that look
like this:Waterfall diagrams show the parent-child relationship between a root span and
its child spans. When a span encapsulates another span, this also represents a
nested relationship.For more on traces and how they pertain to OpenTelemetry, see
Traces.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified May 28, 2024: Style edits for Concepts section (#4550) (2f34c456)\n\n\n\nDocsConceptsContext propagationContext propagationLearn about the concept that enables Distributed Tracing.With context propagation, signals can be correlated with each
other, regardless of where they are generated. Although not limited to tracing,
context propagation allows traces to build causal
information about a system across services that are arbitrarily distributed
across process and network boundaries.To understand context propagation, you need to understand two separate concepts:
context and propagation.ContextContext is an object that contains the information for the sending and receiving
service, or execution unit, to
correlate one signal with another.For example, if service A calls service B, then a span from service A whose ID
is in context will be used as the parent span for the next span created in
service B. The trace ID that is in context will be used for the next span
created in service B as well, which means that the span is part of the same
trace as the span from service A.PropagationPropagation is the mechanism that moves context between services and processes.
It serializes or deserializes the context object and provides the relevant
information to be propagated from one service to another.Propagation is usually handled by instrumentation libraries and is transparent
to the user. In the event that you need to manually propagate context, you can
use the Propagators API.OpenTelemetry maintains several official propagators. The default propagator is
using the headers specified by the
W3C TraceContext specification.SpecificationTo learn more about Context Propagation, see the
Context specification.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 22, 2025: [editorial] Normalize section-local paths in context-propagation (#6030) (934b6fcf)\n\n\n\nDocsConceptsSignalsSignalsLearn about the categories of telemetry supported by OpenTelemetryThe purpose of OpenTelemetry is to collect, process, and export signals.
Signals are system outputs that describe the underlying activity of the
operating system and applications running on a platform. A signal can be
something you want to measure at a specific point in time, like temperature or
memory usage, or an event that goes through the components of your distributed
system that you’d like to trace. You can group different signals together to
observe the inner workings of the same piece of technology under different
angles.OpenTelemetry currently supports:TracesMetricsLogsBaggageAlso under development or at the proposal stage:Events, a specific type of logProfiles are being worked on by the Profiling Working Group.TracesThe path of a request through your application.MetricsA measurement captured at runtime.LogsA recording of an event.BaggageContextual information that is passed between signals.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 24, 2025: Fix Signals alias paths (#6070) (c370886c)\n\nTracesThe path of a request through your application.MetricsA measurement captured at runtime.LogsA recording of an event.BaggageContextual information that is passed between signals.\n\n\n\nDocsConceptsSignalsTracesTracesThe path of a request through your application.Traces give us the big picture of what happens when a request is made to an
application. Whether your application is a monolith with a single database or a
sophisticated mesh of services, traces are essential to understanding the full
“path” a request takes in your application.Let’s explore this with three units of work, represented as Spans:NoteThe following JSON examples do not represent a specific format, and especially
not OTLP/JSON, which is more
verbose.hello span:{
  "name": "hello",
  "context": {
    "trace_id": "5b8aa5a2d2c872e8321cf37308d69df2",
    "span_id": "051581bf3cb55c13"
  },
  "parent_id": null,
  "start_time": "2022-04-29T18:52:58.114201Z",
  "end_time": "2022-04-29T18:52:58.114687Z",
  "attributes": {
    "http.route": "some_route1"
  },
  "events": [
    {
      "name": "Guten Tag!",
      "timestamp": "2022-04-29T18:52:58.114561Z",
      "attributes": {
        "event_attributes": 1
      }
    }
  ]
}
This is the root span, denoting the beginning and end of the entire operation.
Note that it has a trace_id field indicating the trace, but has no
parent_id. That’s how you know it’s the root span.hello-greetings span:{
  "name": "hello-greetings",
  "context": {
    "trace_id": "5b8aa5a2d2c872e8321cf37308d69df2",
    "span_id": "5fb397be34d26b51"
  },
  "parent_id": "051581bf3cb55c13",
  "start_time": "2022-04-29T18:52:58.114304Z",
  "end_time": "2022-04-29T22:52:58.114561Z",
  "attributes": {
    "http.route": "some_route2"
  },
  "events": [
    {
      "name": "hey there!",
      "timestamp": "2022-04-29T18:52:58.114561Z",
      "attributes": {
        "event_attributes": 1
      }
    },
    {
      "name": "bye now!",
      "timestamp": "2022-04-29T18:52:58.114585Z",
      "attributes": {
        "event_attributes": 1
      }
    }
  ]
}
This span encapsulates specific tasks, like saying greetings, and its parent is
the hello span. Note that it shares the same trace_id as the root span,
indicating it’s a part of the same trace. Additionally, it has a parent_id
that matches the span_id of the hello span.hello-salutations span:{
  "name": "hello-salutations",
  "context": {
    "trace_id": "5b8aa5a2d2c872e8321cf37308d69df2",
    "span_id": "93564f51e1abe1c2"
  },
  "parent_id": "051581bf3cb55c13",
  "start_time": "2022-04-29T18:52:58.114492Z",
  "end_time": "2022-04-29T18:52:58.114631Z",
  "attributes": {
    "http.route": "some_route3"
  },
  "events": [
    {
      "name": "hey there!",
      "timestamp": "2022-04-29T18:52:58.114561Z",
      "attributes": {
        "event_attributes": 1
      }
    }
  ]
}
This span represents the third operation in this trace and, like the previous
one, it’s a child of the hello span. That also makes it a sibling of the
hello-greetings span.These three blocks of JSON all share the same trace_id, and the parent_id
field represents a hierarchy. That makes it a Trace!Another thing you’ll note is that each Span looks like a structured log. That’s
because it kind of is! One way to think of Traces is that they’re a collection
of structured logs with context, correlation, hierarchy, and more baked in.
However, these “structured logs” can come from different processes, services,
VMs, data centers, and so on. This is what allows tracing to represent an
end-to-end view of any system.To understand how tracing in OpenTelemetry works, let’s look at a list of
components that will play a part in instrumenting our code.Tracer ProviderA Tracer Provider (sometimes called TracerProvider) is a factory for
Tracers. In most applications, a Tracer Provider is initialized once and its
lifecycle matches the application’s lifecycle. Tracer Provider initialization
also includes Resource and Exporter initialization. It is typically the first
step in tracing with OpenTelemetry. In some language SDKs, a global Tracer
Provider is already initialized for you.TracerA Tracer creates spans containing more information about what is happening for a
given operation, such as a request in a service. Tracers are created from Tracer
Providers.Trace ExportersTrace Exporters send traces to a consumer. This consumer can be standard output
for debugging and development-time, the OpenTelemetry Collector, or any open
source or vendor backend of your choice.Context PropagationContext Propagation is the core concept that enables Distributed Tracing. With
Context Propagation, Spans can be correlated with each other and assembled into
a trace, regardless of where Spans are generated. To learn more about this
topic, see the concept page on Context Propagation.SpansA span represents a unit of work or operation. Spans are the building blocks
of Traces. In OpenTelemetry, they include the following information:NameParent span ID (empty for root spans)Start and End TimestampsSpan ContextAttributesSpan EventsSpan LinksSpan StatusSample span:{
  "name": "/v1/sys/health",
  "context": {
    "trace_id": "7bba9f33312b3dbb8b2c2c62bb7abe2d",
    "span_id": "086e83747d0e381e"
  },
  "parent_id": "",
  "start_time": "2021-10-22 16:04:01.209458162 +0000 UTC",
  "end_time": "2021-10-22 16:04:01.209514132 +0000 UTC",
  "status_code": "STATUS_CODE_OK",
  "status_message": "",
  "attributes": {
    "net.transport": "IP.TCP",
    "net.peer.ip": "172.17.0.1",
    "net.peer.port": "51820",
    "net.host.ip": "10.177.2.152",
    "net.host.port": "26040",
    "http.method": "GET",
    "http.target": "/v1/sys/health",
    "http.server_name": "mortar-gateway",
    "http.route": "/v1/sys/health",
    "http.user_agent": "Consul Health Check",
    "http.scheme": "http",
    "http.host": "10.177.2.152:26040",
    "http.flavor": "1.1"
  },
  "events": [
    {
      "name": "",
      "message": "OK",
      "timestamp": "2021-10-22 16:04:01.209512872 +0000 UTC"
    }
  ]
}
Spans can be nested, as is implied by the presence of a parent span ID: child
spans represent sub-operations. This allows spans to more accurately capture the
work done in an application.Span ContextSpan context is an immutable object on every span that contains the following:The Trace ID representing the trace that the span is a part ofThe span’s Span IDTrace Flags, a binary encoding containing information about the traceTrace State, a list of key-value pairs that can carry vendor-specific trace
informationSpan context is the part of a span that is serialized and propagated alongside
Distributed Context and Baggage.Because Span Context contains the Trace ID, it is used when creating
Span Links.AttributesAttributes are key-value pairs that contain metadata that you can use to
annotate a Span to carry information about the operation it is tracking.For example, if a span tracks an operation that adds an item to a user’s
shopping cart in an eCommerce system, you can capture the user’s ID, the ID of
the item to add to the cart, and the cart ID.You can add attributes to spans during or after span creation. Prefer adding
attributes at span creation to make the attributes available to SDK sampling. If
you have to add a value after span creation, update the span with the value.Attributes have the following rules that each language SDK implements:Keys must be non-null string valuesValues must be a non-null string, boolean, floating point value, integer, or
an array of these valuesAdditionally, there are
Semantic Attributes, which are known
naming conventions for metadata that is typically present in common operations.
It’s helpful to use semantic attribute naming wherever possible so that common
kinds of metadata are standardized across systems.Span EventsA Span Event can be thought of as a structured log message (or annotation) on a
Span, typically used to denote a meaningful, singular point in time during the
Span’s duration.For example, consider two scenarios in a web browser:Tracking a page loadDenoting when a page becomes interactiveA Span is best used to the first scenario because it’s an operation with a start
and an end.A Span Event is best used to track the second scenario because it represents a
meaningful, singular point in time.When to use span events versus span attributesSince span events also contain attributes, the question of when to use events
instead of attributes might not always have an obvious answer. To inform your
decision, consider whether a specific timestamp is meaningful.For example, when you’re tracking an operation with a span and the operation
completes, you might want to add data from the operation to your telemetry.If the timestamp in which the operation completes is meaningful or relevant,
attach the data to a span event.If the timestamp isn’t meaningful, attach the data as span attributes.Span LinksLinks exist so that you can associate one span with one or more spans, implying
a causal relationship. For example, let’s say we have a distributed system where
some operations are tracked by a trace.In response to some of these operations, an additional operation is queued to be
executed, but its execution is asynchronous. We can track this subsequent
operation with a trace as well.We would like to associate the trace for the subsequent operations with the
first trace, but we cannot predict when the subsequent operations will start. We
need to associate these two traces, so we will use a span link.You can link the last span from the first trace to the first span in the second
trace. Now, they are causally associated with one another.Links are optional but serve as a good way to associate trace spans with one
another.For more information regarding Span Links, see
Link.Span StatusEach span has a status. The three possible values are:UnsetErrorOkThe default value is Unset. A span status that is Unset means that the
operation it tracked successfully completed without an error.When a span status is Error, then that means some error occurred in the
operation it tracks. For example, this could be due to an HTTP 500 error on a
server handling a request.When a span status is Ok, then that means the span was explicitly marked as
error-free by the developer of an application. Although this is unintuitive,
it’s not required to set a span status as Ok when a span is known to have
completed without error, as this is covered by Unset. What Ok does is
represent an unambiguous “final call” on the status of a span that has been
explicitly set by a user. This is helpful in any situation where a developer
wishes for there to be no other interpretation of a span other than
“successful”.To reiterate: Unset represents a span that completed without an error. Ok
represents when a developer explicitly marks a span as successful. In most
cases, it is not necessary to explicitly mark a span as Ok.Span KindWhen a span is created, it is one of Client, Server, Internal, Producer,
or Consumer. This span kind provides a hint to the tracing backend as to how
the trace should be assembled. According to the OpenTelemetry specification, the
parent of a server span is often a remote client span, and the child of a client
span is usually a server span. Similarly, the parent of a consumer span is
always a producer and the child of a producer span is always a consumer. If not
provided, the span kind is assumed to be internal.For more information regarding SpanKind, see
SpanKind.ClientA client span represents a synchronous outgoing remote call such as an outgoing
HTTP request or database call. Note that in this context, “synchronous” does not
refer to async/await, but to the fact that it is not queued for later
processing.ServerA server span represents a synchronous incoming remote call such as an incoming
HTTP request or remote procedure call.InternalInternal spans represent operations which do not cross a process boundary.
Things like instrumenting a function call or an Express middleware may use
internal spans.ProducerProducer spans represent the creation of a job which may be asynchronously
processed later. It may be a remote job such as one inserted into a job queue or
a local job handled by an event listener.ConsumerConsumer spans represent the processing of a job created by a producer and may
start long after the producer span has already ended.SpecificationFor more information, see the
traces specification.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 24, 2025: Editorial changes to Concepts > Signals (#6067) (7c0e4db0)\n\n\n\nDocsConceptsSignalsMetricsMetricsA measurement captured at runtime.A metric is a measurement of a service captured at runtime. The moment
of capturing a measurements is known as a metric event, which consists not
only of the measurement itself, but also the time at which it was captured and
associated metadata.Application and request metrics are important indicators of availability and
performance. Custom metrics can provide insights into how availability
indicators impact user experience or the business. Collected data can be used to
alert of an outage or trigger scheduling decisions to scale up a deployment
automatically upon high demand.To understand how metrics in OpenTelemetry works, let’s look at a list of
components that will play a part in instrumenting our code.Meter ProviderA Meter Provider (sometimes called MeterProvider) is a factory for Meters.
In most applications, a Meter Provider is initialized once and its lifecycle
matches the application’s lifecycle. Meter Provider initialization also includes
Resource and Exporter initialization. It is typically the first step in metering
with OpenTelemetry. In some language SDKs, a global Meter Provider is already
initialized for you.MeterA Meter creates metric instruments, capturing
measurements about a service at runtime. Meters are created from Meter
Providers.Metric ExporterMetric Exporters send metric data to a consumer. This consumer can be standard
output for debugging during development, the OpenTelemetry Collector, or any
open source or vendor backend of your choice.Metric InstrumentsIn OpenTelemetry measurements are captured by metric instruments. A metric
instrument is defined by:NameKindUnit (optional)Description (optional)The name, unit, and description are chosen by the developer or defined via
semantic conventions for common ones
like request and process metrics.The instrument kind is one of the following:Counter: A value that accumulates over time – you can think of this like
an odometer on a car; it only ever goes up.Asynchronous Counter: Same as the Counter, but is collected once for
each export. Could be used if you don’t have access to the continuous
increments, but only to the aggregated value.UpDownCounter: A value that accumulates over time, but can also go down
again. An example could be a queue length, it will increase and decrease with
the number of work items in the queue.Asynchronous UpDownCounter: Same as the UpDownCounter, but is
collected once for each export. Could be used if you don’t have access to the
continuous changes, but only to the aggregated value (e.g., current queue
size).Gauge: Measures a current value at the time it is read. An example would
be the fuel gauge in a vehicle. Gauges are synchronous.Asynchronous Gauge: Same as the Gauge, but is collected once for each
export. Could be used if you don’t have access to the continuous changes, but
only to the aggregated value.Histogram: A client-side aggregation of values, such as request latencies.
A histogram is a good choice if you are interested in value statistics. For
example: How many requests take fewer than 1s?For more on synchronous and asynchronous instruments, and which kind is best
suited for your use case, see
Supplementary Guidelines.AggregationIn addition to the metric instruments, the concept of aggregations is an
important one to understand. An aggregation is a technique whereby a large
number of measurements are combined into either exact or estimated statistics
about metric events that took place during a time window. The OTLP protocol
transports such aggregated metrics. The OpenTelemetry API provides a default
aggregation for each instrument which can be overridden using the Views. The
OpenTelemetry project aims to provide default aggregations that are supported by
visualizers and telemetry backends.Unlike request tracing, which is intended to capture request
lifecycles and provide context to the individual pieces of a request, metrics
are intended to provide statistical information in aggregate. Some examples of
use cases for metrics include:Reporting the total number of bytes read by a service, per protocol type.Reporting the total number of bytes read and the bytes per request.Reporting the duration of a system call.Reporting request sizes in order to determine a trend.Reporting CPU or memory usage of a process.Reporting average balance values from an account.Reporting current active requests being handled.ViewsA view provides SDK users with the flexibility to customize the metrics output
by the SDK. You can customize which metric instruments are to be processed or
ignored. You can also customize aggregation and what attributes you want to
report on metrics.Language SupportMetrics are a stable signal
in the OpenTelemetry specification. For the individual language specific
implementations of the Metrics API & SDK, the status is as follows:LanguageMetricsC++StableC#/.NETStableErlang/ElixirDevelopmentGoStableJavaStableJavaScriptStablePHPStablePythonStableRubyDevelopmentRustBetaSwiftDevelopmentSpecificationTo learn more about metrics in OpenTelemetry, see the
metrics specification.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 24, 2025: Editorial changes to Concepts > Signals (#6067) (7c0e4db0)\n\n\n\nDocsConceptsSignalsLogsLogsA recording of an event.A log is a timestamped text record, either structured (recommended) or
unstructured, with optional metadata. Of all telemetry signals, logs have the
biggest legacy. Most programming languages have built-in logging capabilities or
well-known, widely used logging libraries.OpenTelemetry logsOpenTelemetry does not define a bespoke API or SDK to create logs. Instead,
OpenTelemetry logs are the existing logs you already have from a logging
framework or infrastructure component. OpenTelemetry SDKs and
autoinstrumentation utilize several components to automatically correlate logs
with traces.OpenTelemetry’s support for logs is designed to be fully compatible with what
you already have, providing capabilities to wrap those logs with additional
context and a common toolkit to parse and manipulate logs into a common format
across many different sources.OpenTelemetry logs in the OpenTelemetry CollectorThe OpenTelemetry Collector provides several tools to work
with logs:Several receivers which parse logs from specific, known sources of log data.The filelogreceiver, which reads logs from any file and provides features to
parse them from different formats or use a regular expression.Processors like the transformprocessor which lets you parse nested data,
flatten nested structures, add/remove/update values, and more.Exporters that let you emit log data in a non-OpenTelemetry format.The first step in adopting OpenTelemetry frequently involves deploying a
Collector as a general-purposes logging agent.OpenTelemetry logs for applicationsIn applications, OpenTelemetry logs are created with any logging library or
built-in logging capabilities. When you add autoinstrumentation or activate an
SDK, OpenTelemetry will automatically correlate your existing logs with any
active trace and span, wrapping the log body with their IDs. In other words,
OpenTelemetry automatically correlates your logs and traces.Language supportLogs are a stable signal in
the OpenTelemetry specification. For the individual language specific
implementations of the Logs API & SDK, the status is as follows:LanguageLogsC++StableC#/.NETStableErlang/ElixirDevelopmentGoBetaJavaStableJavaScriptDevelopmentPHPStablePythonDevelopmentRubyDevelopmentRustBetaSwiftDevelopmentStructured, unstructured, and semistructured logsOpenTelemetry does not technically distinguish between structured and
unstructured logs. You can use any log you have with OpenTelemetry. However, not
all log formats are equally useful! Structured logs, in particular, are
recommended for production observability because they are easy to parse and
analyze at scale. The following section explains the differences between
structured, unstructured, and semistructured logs.Structured logsA structured log is a log whose textual format follows a consistent,
machine-readable format. For applications, one of the most common formats is
JSON:{
  "timestamp": "2024-08-04T12:34:56.789Z",
  "level": "INFO",
  "service": "user-authentication",
  "environment": "production",
  "message": "User login successful",
  "context": {
    "userId": "12345",
    "username": "johndoe",
    "ipAddress": "192.168.1.1",
    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"
  },
  "transactionId": "abcd-efgh-ijkl-mnop",
  "duration": 200,
  "request": {
    "method": "POST",
    "url": "/api/v1/login",
    "headers": {
      "Content-Type": "application/json",
      "Accept": "application/json"
    },
    "body": {
      "username": "johndoe",
      "password": "******"
    }
  },
  "response": {
    "statusCode": 200,
    "body": {
      "success": true,
      "token": "jwt-token-here"
    }
  }
}
and for infrastructure components, Common Log Format (CLF) is commonly used:127.0.0.1 - johndoe [04/Aug/2024:12:34:56 -0400] "POST /api/v1/login HTTP/1.1" 200 1234
It is also common to have different structured log formats mixed together. For
example, an Extended Log Format (ELF) log can mix JSON with the
whitespace-separated data in a CLF log.192.168.1.1 - johndoe [04/Aug/2024:12:34:56 -0400] "POST /api/v1/login HTTP/1.1" 200 1234 "http://example.com" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36" {"transactionId": "abcd-efgh-ijkl-mnop", "responseTime": 150, "requestBody": {"username": "johndoe"}, "responseHeaders": {"Content-Type": "application/json"}}
To make the most use of this log, parse both the JSON and the ELF-related pieces
into a shared format to make analysis on an observability backend easier. The
filelogreceiver in the OpenTelemetry Collector contains
standardized ways to parse logs like this.Structured logs are the preferred way to use logs. Because structured logs are
emitted in a consistent format, they are straightforward to parse, which makes
them easier to preprocess in an OpenTelemetry Collector, correlate with other
data, and ultimate analyze in an Observability backend.Unstructured logsUnstructured logs are logs that don’t follow a consistent structure. They may be
more human-readable, and are often used in development. However, it is not
preferred to use unstructured logs for production observability purposes, since
they are much more difficult to parse and analyze at scale.Examples of unstructured logs:[ERROR] 2024-08-04 12:45:23 - Failed to connect to database. Exception: java.sql.SQLException: Timeout expired. Attempted reconnect 3 times. Server: db.example.com, Port: 5432

System reboot initiated at 2024-08-04 03:00:00 by user: admin. Reason: Scheduled maintenance. Services stopped: web-server, database, cache. Estimated downtime: 15 minutes.

DEBUG - 2024-08-04 09:30:15 - User johndoe performed action: file_upload. Filename: report_Q3_2024.pdf, Size: 2.3 MB, Duration: 5.2 seconds. Result: Success
It is possible to store and analyze Unstructured logs in production, although
you may need to do substantial work to parse or otherwise pre-process them to be
machine-readable. For example, the above three logs will require a regular
expression to parse their timestamps and custom parsers to consistently extract
the bodies of the log message. This will typically be necessary for a logging
backend to know how to sort and organize the logs by timestamp. Although it’s
possible to parse unstructured logs for analysis purposes, doing this may be
more work than switching to structured logging, such as via a standard logging
framework in your applications.Semistructured logsA semistructured log is a log that does use some self-consistent patterns to
distinguish data so that it’s machine-readable, but may not use the same
formatting and delimiters between data across different systems.Example of a semistructured log:2024-08-04T12:45:23Z level=ERROR service=user-authentication userId=12345 action=login message="Failed login attempt" error="Invalid password" ipAddress=192.168.1.1 userAgent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"
Although machine-readable, semistructured logs may require several different
parsers to allow for analysis at scale.OpenTelemetry logging componentsThe following lists of concepts and components power OpenTelemetry’s logging
support.Log Appender / BridgeAs an application developer, the Logs Bridge API should not be called by you
directly, as it is provided for logging library authors to build log appenders /
bridges. Instead, you just use your preferred logging library and configure it
to use a log appender (or log bridge) that is able to emit logs into an
OpenTelemetry LogRecordExporter.OpenTelemetry language SDKs offer this functionality.Logger ProviderPart of the Logs Bridge API and should only be used if you are the author
of a logging library.A Logger Provider (sometimes called LoggerProvider) is a factory for
Loggers. In most cases, the Logger Provider is initialized once and its
lifecycle matches the application’s lifecycle. Logger Provider initialization
also includes Resource and Exporter initialization.LoggerPart of the Logs Bridge API and should only be used if you are the author
of a logging library.A Logger creates log records. Loggers are created from Log Providers.Log Record ExporterLog Record Exporters send log records to a consumer. This consumer can be
standard output for debugging and development-time, the OpenTelemetry Collector,
or any open source or vendor backend of your choice.Log RecordA log record represents the recording of an event. In OpenTelemetry a log record
contains two kinds of fields:Named top-level fields of specific type and meaningResource and attributes fields of arbitrary value and typeThe top-level fields are:Field NameDescriptionTimestampTime when the event occurred.ObservedTimestampTime when the event was observed.TraceIdRequest trace ID.SpanIdRequest span ID.TraceFlagsW3C trace flag.SeverityTextThe severity text (also known as log level).SeverityNumberNumerical value of the severity.BodyThe body of the log record.ResourceDescribes the source of the log.InstrumentationScopeDescribes the scope that emitted the log.AttributesAdditional information about the event.For more details on log records and log fields, see
Logs Data Model.SpecificationTo learn more about logs in OpenTelemetry, see the logs specification.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 24, 2025: Editorial changes to Concepts > Signals (#6067) (7c0e4db0)\n\n\n\nDocsConceptsSignalsBaggageBaggageContextual information that is passed between signals.In OpenTelemetry, Baggage is contextual information that resides next to
context. Baggage is a key-value store, which means it lets you
propagate any data you like alongside
context.Baggage means you can pass data across services and processes, making it
available to add to traces, metrics, or
logs in those services.ExampleBaggage is often used in tracing to propagate additional data across services.For example, imagine you have a clientId at the start of a request, but you’d
like for that ID to be available on all spans in a trace, some metrics in
another service, and some logs along the way. Because the trace may span
multiple services, you need some way to propagate that data without copying the
clientId across many places in your codebase.By using Context Propagation to pass baggage
across these services, the clientId is available to add to any additional
spans, metrics, or logs. Additionally, instrumentations automatically propagate
baggage for you.What should OTel Baggage be used for?Baggage is best used to include information typically available only at the
start of a request further downstream. This can include things like Account
Identification, User IDs, Product IDs, and origin IPs, for example.Propagating this information using baggage allows for deeper analysis of
telemetry in a backend. For example, if you include information like a User ID
on a span that tracks a database call, you can much more easily answer questions
like “which users are experiencing the slowest database calls?” You can also log
information about a downstream operation and include that same User ID in the
log data.Baggage security considerationsSensitive Baggage items can be shared with unintended resources, like
third-party APIs. This is because automatic instrumentation includes Baggage in
most of your service’s network requests. Specifically, Baggage and other parts
of trace context are sent in HTTP headers, making it visible to anyone
inspecting your network traffic. If traffic is restricted within your network,
then this risk may not apply, but keep in mind that downstream services could
propagate Baggage outside your network.Also, there are no built-in integrity checks to ensure that Baggage items are
yours, so exercise caution when reading them.Baggage is not the same as attributesAn important thing to note about baggage is that it is a separate key-value
store and is unassociated with attributes on spans, metrics, or logs without
explicitly adding them.To add baggage entries to attributes, you need to explicitly read the data from
baggage and add it as attributes to your spans, metrics, or logs.Because a common use cases for Baggage is to add data to
Span Attributes across a whole trace, several languages
have Baggage Span Processors that add data from baggage as attributes on span
creation.For more information, see the baggage specification.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 24, 2025: Editorial changes to Concepts > Signals (#6067) (7c0e4db0)\n\n\n\nDocsConceptsInstrumentationInstrumentationHow OpenTelemetry facilitates instrumentationFor a system to be observable, it must be instrumented: that is, code from
the system’s components must emit signals, such as traces, metrics, and
logs.Using OpenTelemetry, you can instrument your code in two primary ways:Code-based solutions via official
APIs and SDKs for most languagesZero-code solutionsCode-based solutions allow you to get deeper insight and rich telemetry from
your application itself. They let you use the OpenTelemetry API to generate
telemetry from your application, which acts as an essential complement to the
telemetry generated by zero-code solutions.Zero-code solutions are great for getting started, or when you can’t modify
the application you need to get telemetry out of. They provide rich telemetry
from libraries you use and/or the environment your application runs in. Another
way to think of it is that they provide information about what’s happening at
the edges of your application.You can use both solutions simultaneously.Additional OpenTelemetry BenefitsOpenTelemetry provides more than just zero-code and code-based telemetry
solutions. The following things are also a part of OpenTelemetry:Libraries can leverage the OpenTelemetry API as a dependency, which will have
no impact on applications using that library, unless the OpenTelemetry SDK is
imported.For each of the signals you have several methods at your disposal to create,
process, and export them.With context propagation built into the
implementations, you can correlate signals regardless of where they are
generated.Resources and
Instrumentation Scopes allow grouping of signals,
by different entities, like, the host,
operating system or
K8s clusterEach language-specific implementation of the API and SDK follows the
requirements and expectations of the
OpenTelemetry specification.Semantic Conventions provide a common naming
schema that can be used for standardization across code bases and platforms.Zero-codeLearn how to add observability to an application without the need to write codeCode-basedLearn the essential steps in setting up code-based instrumentationLibrariesLearn how to add native instrumentation to your library.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 17, 2025: docs: Update links for metrics and logs in _index.md (#6558) (efeda2d8)\n\nZero-codeLearn how to add observability to an application without the need to write codeCode-basedLearn the essential steps in setting up code-based instrumentationLibrariesLearn how to add native instrumentation to your library.\n\n\n\nDocsConceptsInstrumentationZero-codeZero-codeLearn how to add observability to an application without the need to write codeAs ops you might want to add observability to one
or more applications without having to edit the source. OpenTelemetry lets you
quickly gain some observability for a service without having to use the
OpenTelemetry API & SDK for
code-based instrumentation.Zero-code instrumentation adds the OpenTelemetry API and SDK capabilities to
your application typically as an agent or agent-like installation. The specific
mechanisms involved may differ by language, ranging from bytecode manipulation,
monkey patching, or eBPF to inject calls to the OpenTelemetry API and SDK into
your application.Typically, zero-code instrumentation adds instrumentation for the libraries
you’re using. This means that requests and responses, database calls, message
queue calls, and so forth are what are instrumented. Your application’s code,
however, is not typically instrumented. To instrument your code, you’ll need to
use code-based instrumentation.Additionally, zero-code instrumentation lets you configure the
Instrumentation Libraries and
exporters loaded.You can configure zero-code instrumentation through environment variables and
other language-specific mechanisms, such as system properties or arguments
passed to initialization methods. To get started, you only need a service name
configured so that you can identify the service in the observability backend of
your choice.Other configuration options are available, including:Data source specific configurationExporter configurationPropagator configurationResource configurationAutomatic instrumentation is available for the following languages:.NETGoJavaJavaScriptPHPPythonFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 21, 2025: [IA] Rename `net` to `dotnet` in `/docs/{languages,zero-code}/net`, add redirects and adjust links (#6590) (d1ef521e)\n\n\n\nDocsConceptsInstrumentationCode-basedCode-basedLearn the essential steps in setting up code-based instrumentationImport the OpenTelemetry API and SDKYou’ll first need to import OpenTelemetry to your service code. If you’re
developing a library or some other component that is intended to be consumed by
a runnable binary, then you would only take a dependency on the API. If your
artifact is a standalone process or service, then you would take a dependency on
the API and the SDK. For more information about the OpenTelemetry API and SDK,
see the specification.Configure the OpenTelemetry APIIn order to create traces or metrics, you’ll need to first create a tracer
and/or meter provider. In general, we recommend that the SDK should provide a
single default provider for these objects. You’ll then get a tracer or meter
instance from that provider, and give it a name and version. The name you choose
here should identify what exactly is being instrumented – if you’re writing a
library, for example, then you should name it after your library (for example
com.example.myLibrary) as this name will namespace all spans or metric events
produced. It is also recommended that you supply a version string (i.e.,
semver:1.0.0) that corresponds to the current version of your library or
service.Configure the OpenTelemetry SDKIf you’re building a service process, you’ll also need to configure the SDK with
appropriate options for exporting your telemetry data to some analysis backend.
We recommend that this configuration be handled programmatically through a
configuration file or some other mechanism. There are also per-language tuning
options you may wish to take advantage of.Create Telemetry DataOnce you’ve configured the API and SDK, you’ll then be free to create traces and
metric events through the tracer and meter objects you obtained from the
provider. Make use of Instrumentation Libraries for your dependencies – check
out the registry or your language’s repository for more
information on these.Export DataOnce you’ve created telemetry data, you’ll want to send it somewhere.
OpenTelemetry supports two primary methods of exporting data from your process
to an analysis backend, either directly from a process or by proxying it through
the OpenTelemetry Collector.In-process export requires you to import and take a dependency on one or more
exporters, libraries that translate OpenTelemetry’s in-memory span and metric
objects into the appropriate format for telemetry analysis tools like Jaeger or
Prometheus. In addition, OpenTelemetry supports a wire protocol known as OTLP,
which is supported by all OpenTelemetry SDKs. This protocol can be used to send
data to the OpenTelemetry Collector, a standalone binary process that can be run
as a proxy or sidecar to your service instances or run on a separate host. The
Collector can then be configured to forward and export this data to your choice
of analysis tools.In addition to open source tools such as Jaeger or Prometheus, a growing list of
companies support ingesting telemetry data from OpenTelemetry. For details, see
Vendors.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2024: Concepts pages: copyedits for instrumentation pages (#4066) (8d7aa298)\n\n\n\nDocsConceptsInstrumentationLibrariesLibrariesLearn how to add native instrumentation to your library.OpenTelemetry provides instrumentation libraries for many libraries, which
is typically done through library hooks or monkey-patching library code.Native library instrumentation with OpenTelemetry provides better observability
and developer experience for users, removing the need for libraries to expose
and document hooks. Other advantages provided by native instrumentation include:Custom logging hooks can be replaced by common and easy to use OpenTelemetry
APIs, users will only interact with OpenTelemetry.Traces, logs, metrics from library and application code are correlated and
coherent.Common conventions allow users to get similar and consistent telemetry within
same technology and across libraries and languages.Telemetry signals can be fine tuned (filtered, processed, aggregated) for
various consumption scenarios using a wide variety of well-documented
OpenTelemetry extensibility points.Semantic conventionsSemantic conventions are the main source
of truth about what information is included on spans produced by web frameworks,
RPC clients, databases, messaging clients, infrastructure, and more. Conventions
make instrumentation consistent: users who work with telemetry don’t have to
learn library specifics and observability vendors can build experiences for a
wide variety of technologies, for example databases or messaging systems. When
libraries follow conventions, many scenarios can be enabled without the user’s
input or configuration.Semantic conventions are always evolving and new conventions are constantly
added. If some don’t exist for your library, consider
adding them.
Pay special attention to span names: strive to use meaningful names and consider
cardinality when defining them. Also set the
schema_url attribute that you can use
to record what version of the semantic conventions you’re using.If you have any feedback or want to add a new convention, contribute by joining
the Instrumentation Slack
or by opening an issue or pull request in the
Specification repository.Defining spansThink of your library from the perspective of a library user and what the user
might be interested in knowing about the behavior and activity of the library.
As the library maintainer, you know the internals, but the user will most likely
be less interested in the inner workings of the library and more interested in
the functionality of their application. Think about what information can be
helpful in analyzing the usage of your library, then think about an appropriate
way to model that data. Some aspects to consider include:Spans and span hierarchiesNumerical attributes on spans, as an alternative to aggregated metricsSpan eventsAggregated MetricsFor example, if your library is making requests to a database, create spans only
for the logical request to the database. The physical requests over the network
should be instrumented within the libraries implementing that functionality. You
should also favor capturing other activities, like object/data serialization as
span events, rather than as additional spans.Follow the semantic conventions when setting span attributes.When not to instrumentSome libraries are thin clients wrapping network calls. Chances are that
OpenTelemetry has an instrumentation library for the underlying RPC client.
Check out the registry to find existing libraries. If a
library exists, instrumenting the wrapper library might not be necessary.As a general guideline, only instrument your library at its own level. Don’t
instrument if all the following cases apply:Your library is a thin proxy on top of documented or self-explanatory APIs.OpenTelemetry has instrumentation for underlying network calls.There are no conventions your library should follow to enrich telemetry.When in doubt, don’t instrument. If you choose not to instrument, it might still
be useful to provide a way to configure OpenTelemetry handlers for your internal
RPC client instance. It’s essential in languages that don’t support fully
automatic instrumentation and still useful in others.The rest of this document provides guidance on what and how to instrument your
application.OpenTelemetry APIThe first step when instrumenting an application is to include the OpenTelemetry
API package as a dependency.OpenTelemetry has two main modules: API and SDK.
OpenTelemetry API is a set of abstractions and non-operational implementations.
Unless your application imports the OpenTelemetry SDK, your instrumentation does
nothing and does not impact application performance.Libraries should only use the OpenTelemetry APIIf you’re concerned about adding new dependencies, here are some considerations
to help you decide how to minimize dependency conflicts:OpenTelemetry Trace API reached stability in early 2021. It follows
Semantic Versioning 2.0.Use the earliest stable OpenTelemetry API (1.0.*) and avoid updating it
unless you have to use new features.While your instrumentation stabilizes, consider shipping it as a separate
package, so that it never causes issues for users who don’t use it. You can
keep it in your repository, or
add it to OpenTelemetry,
so it ships with other instrumentation libraries.Semantic conventions are stable, but subject to evolution: while this does
not cause any functional issues, you might need to update your instrumentation
every once in a while. Having it in a preview plugin or in OpenTelemetry
contrib repository may help keeping conventions up-to-date without breaking
changes for your users.Getting a tracerAll application configuration is hidden from your library through the Tracer
API. Libraries might allow applications to pass instances of TracerProvider to
facilitate dependency injection and ease of testing, or obtain it from
global TracerProvider.
OpenTelemetry language implementations might have different preferences for
passing instances or accessing the global based on what’s idiomatic in each
programming language.When obtaining the tracer, provide your library (or tracing plugin) name and
version: they show up on the telemetry and help users process and filter
telemetry, understand where it came from, and debug or report instrumentation
issues.What to instrumentPublic APIsPublic APIs are good candidates for tracing: spans created for public API calls
allow users to map telemetry to application code, understand the duration and
outcome of library calls. Which calls to trace include:Public methods that make network calls internally or local operations that
take significant time and may fail, for example I/O.Handlers that process requests or messages.Instrumentation exampleThe following example shows how to instrument a Java application:private static Tracer tracer =  getTracer(TracerProvider.noop());

public static void setTracerProvider(TracerProvider tracerProvider) {
    tracer = getTracer(tracerProvider);
}

private static Tracer getTracer(TracerProvider tracerProvider) {
    return tracerProvider.getTracer("demo-db-client", "0.1.0-beta1");
}

private Response selectWithTracing(Query query) {
    // check out conventions for guidance on span names and attributes
    Span span = tracer.spanBuilder(String.format("SELECT %s.%s", dbName, collectionName))
            .setSpanKind(SpanKind.CLIENT)
            .setAttribute("db.name", dbName)
            ...
            .startSpan();

    // makes span active and allows correlating logs and nest spans
    try (Scope unused = span.makeCurrent()) {
        Response response = query.runWithRetries();
        if (response.isSuccessful()) {
            span.setStatus(StatusCode.OK);
        }

        if (span.isRecording()) {
           // populate response attributes for response codes and other information
        }
    } catch (Exception e) {
        span.recordException(e);
        span.setStatus(StatusCode.ERROR, e.getClass().getSimpleName());
        throw e;
    } finally {
        span.end();
    }
}
Follow conventions to populate attributes. If there is no applicable one, see
general conventions.Nested network and other spansNetwork calls are usually traced with OpenTelemetry auto-instrumentations
through corresponding client implementation.If OpenTelemetry does not support tracing your network client, here are some
considerations to help you decide the best course of action:Would tracing network calls improve observability for users or your ability to
support them?Is your library a wrapper on top of public, documented RPC API? Would users
need to get support from the underlying service in case of issues?Instrument the library and make sure to trace individual network tries.Would tracing those calls with spans be very verbose? or would it noticeably
impact performance?Use logs with verbosity or span events: logs can be correlated to parent
(public API calls), while span events should be set on public API span.If they have to be spans (to carry and propagate unique trace context), put
them behind a configuration option and disable them by default.If OpenTelemetry already supports tracing your network calls, you probably don’t
want to duplicate it. There might be some exceptions:To support users without auto-instrumentation, which might not work in certain
environments or when users have concerns with monkey-patching.To enable custom or legacy correlation and context propagation protocols with
underlying service.Enrich RPC spans with essential library or service-specific information not
covered by auto-instrumentation.A generic solution to avoid duplication is under construction.EventsTraces are a kind of signal that your apps can emit. Events (or logs) and traces
complement, not duplicate, each other. Whenever you have something that should
have a certain level of verbosity, logs are a better choice than traces.If your app uses logging or some similar module, the logging module might
already have OpenTelemetry integration. To find out, see the
registry. Integrations usually stamp active trace
context on all logs, so users can correlate them.If your language and ecosystem don’t have common logging support, use span
events to share additional app details. Events maybe more convenient if you
want to add attributes as well.As a rule of thumb, use events or logs for verbose data instead of spans. Always
attach events to the span instance that your instrumentation created. Avoid
using the active span if you can, since you don’t control what it refers to.Context propagationExtracting contextIf you work on a library or a service that receives upstream calls, such as a
web framework or a messaging consumer,extract context from the incoming request
or message. OpenTelemetry provides the Propagator API, which hides specific
propagation standards and reads the trace Context from the wire. In case of a
single response, there is just one context on the wire, which becomes the parent
of the new span the library creates.After you create a span, pass new trace context to the application code
(callback or handler), by making the span active; if possible, do this
explicitly. The following Java example shows how to add trace context and
activate a span. See the
Context extraction in Java, for
more examples.// extract the context
Context extractedContext = propagator.extract(Context.current(), httpExchange, getter);
Span span = tracer.spanBuilder("receive")
            .setSpanKind(SpanKind.SERVER)
            .setParent(extractedContext)
            .startSpan();

// make span active so any nested telemetry is correlated
try (Scope unused = span.makeCurrent()) {
  userCode();
} catch (Exception e) {
  span.recordException(e);
  span.setStatus(StatusCode.ERROR);
  throw e;
} finally {
  span.end();
}
In the case of a messaging system, you might receive more than one message at
once. Received messages become links on the span you create. Refer to
messaging conventions for
details.Injecting contextWhen you make an outbound call, you usually want to propagate context to the
downstream service. In this case, create a new span to trace the outgoing call
and use Propagator API to inject context into the message. There might be
other cases where you might want to inject context, for example when creating
messages for async processing. The following Java example shows how to propagate
context. See
Context injection in Java
for more examples.Span span = tracer.spanBuilder("send")
            .setSpanKind(SpanKind.CLIENT)
            .startSpan();

// make span active so any nested telemetry is correlated
// even network calls might have nested layers of spans, logs or events
try (Scope unused = span.makeCurrent()) {
  // inject the context
  propagator.inject(Context.current(), transportLayer, setter);
  send();
} catch (Exception e) {
  span.recordException(e);
  span.setStatus(StatusCode.ERROR);
  throw e;
} finally {
  span.end();
}
There might be some exceptions where you don’t need to propagate context:Downstream service does not support metadata or prohibits unknown fields.Downstream service does not define correlation protocols. Consider adding
support for context propagation in a future version.Downstream service supports custom correlation protocol.Best effort with custom propagator: use OpenTelemetry trace context if
compatible or generate and stamp custom correlation IDs on the span.In-processMake your spans active or current, as this enables correlating spans with logs
and any nested auto-instrumentations.If the library has a notion of context, support optional explicit trace
context propagation in addition to active spans.Put spans (trace context) created by library in the context explicitly,
document how to access it.Allow users to pass trace context in your context.Within the library, propagate trace context explicitly. Active spans might
change during callbacks.Capture active context from users on the public API surface as soon as you
can, use it as a parent context for your spans.Pass context around and stamp attributes, exceptions, events on explicitly
propagated instances.This is essential if you start threads explicitly, do background processing
or other things that can break due to async context flow limitations in your
language.Additional considerationsInstrumentation registryAdd your instrumentation library to the
OpenTelemetry registry so users can find it.PerformanceOpenTelemetry API is no-op and very performant when there is no SDK in the
application. When OpenTelemetry SDK is configured, it
consumes bound resources.Real-life applications, especially on the high scale, would frequently have
head-based sampling configured. Sampled-out spans are affordable and you can
check if the span is recording to avoid extra allocations and potentially
expensive calculations while populating attributes. The following Java example
shows to provide attributes for sampling and check span recording.// some attributes are important for sampling, they should be provided at creation time
Span span = tracer.spanBuilder(String.format("SELECT %s.%s", dbName, collectionName))
        .setSpanKind(SpanKind.CLIENT)
        .setAttribute("db.name", dbName)
        ...
        .startSpan();

// other attributes, especially those that are expensive to calculate
// should be added if span is recording
if (span.isRecording()) {
    span.setAttribute("db.statement", sanitize(query.statement()))
}
Error handlingOpenTelemetry API does not fail on invalid arguments, never throws, and swallows
exceptions, which means it’s
forgiving at runtime.
This way instrumentation issues do not affect application logic. Test the
instrumentation to notice issues OpenTelemetry hides at runtime.TestingSince OpenTelemetry has a variety of auto-instrumentations, try how your
instrumentation interacts with other telemetry: incoming requests, outgoing
requests, logs, and so on. Use a typical application, with popular frameworks
and libraries and all tracing enabled when trying out your instrumentation.
Check out how libraries similar to yours show up.For unit testing, you can usually mock or fake SpanProcessor and
SpanExporter as in the following Java example:@Test
public void checkInstrumentation() {
  SpanExporter exporter = new TestExporter();

  Tracer tracer = OpenTelemetrySdk.builder()
           .setTracerProvider(SdkTracerProvider.builder()
              .addSpanProcessor(SimpleSpanProcessor.create(exporter)).build()).build()
           .getTracer("test");
  // run test ...

  validateSpans(exporter.exportedSpans);
}

class TestExporter implements SpanExporter {
  public final List<SpanData> exportedSpans = Collections.synchronizedList(new ArrayList<>());

  @Override
  public CompletableResultCode export(Collection<SpanData> spans) {
    exportedSpans.addAll(spans);
    return CompletableResultCode.ofSuccess();
  }
  ...
}
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 14, 2025: fix: remove duplucated `)`in content/en/docs/concepts/instrumentation/libraries page (#6324) (d8e58463)\n\n\n\nDocsConceptsComponentsComponentsThe main components that make up OpenTelemetryOpenTelemetry is currently made up of several main components:SpecificationCollectorLanguage-specific API & SDK implementationsInstrumentation LibrariesExportersZero-Code InstrumentationResource DetectorsCross Service PropagatorsSamplersKubernetes operatorFunction as a Service assetsOpenTelemetry lets you replace the need for vendor-specific SDKs and tools for
generating and exporting telemetry data.SpecificationDescribes the cross-language requirements and expectations for all
implementations. Beyond a definition of terms, the specification defines the
following:API: Defines data types and operations for generating and correlating
tracing, metrics, and logging data.SDK: Defines requirements for a language-specific implementation of the
API. Configuration, data processing, and exporting concepts are also defined
here.Data: Defines the OpenTelemetry Protocol (OTLP) and vendor-agnostic
semantic conventions that a telemetry backend can provide support for.For more information, see the specifications.CollectorThe OpenTelemetry Collector is a vendor-agnostic proxy that can receive,
process, and export telemetry data. It supports receiving telemetry data in
multiple formats (for example, OTLP, Jaeger, Prometheus, as well as many
commercial/proprietary tools) and sending data to one or more backends. It also
supports processing and filtering telemetry data before it gets exported.For more information, see Collector.Language-specific API & SDK implementationsOpenTelemetry also has language SDKs that let you use the OpenTelemetry API to
generate telemetry data with your language of choice and export that data to a
preferred backend. These SDKs also let you incorporate instrumentation libraries
for common libraries and frameworks that you can use to connect to manual
instrumentation in your application.For more information, see Instrumenting.Instrumentation librariesOpenTelemetry supports a broad number of components that generate relevant
telemetry data from popular libraries and frameworks for supported languages.
For example, inbound and outbound HTTP requests from an HTTP library generate
data about those requests.An aspirational goal of OpenTelemetry is that all popular libraries are built to
be observable by default, so that separate dependencies are not required.For more information, see
Instrumenting libraries.ExportersSend telemetry to the
OpenTelemetry Collector to make sure it’s exported
correctly. Using the Collector in production environments is a best practice. To
visualize your telemetry, export it to a backend such as
Jaeger, Zipkin,
Prometheus, or a
vendor-specific backend.The registry contains the list of language specific exporters.Among exporters, OpenTelemetry Protocol (OTLP) exporters are designed
with the OpenTelemetry data model in mind, emitting OTel data without any loss
of information. Furthermore, many tools that operate on telemetry data support
OTLP (such as Prometheus, Jaeger, and most vendors), providing you with a
high degree of flexibility when you need it. To learn more about OTLP, see OTLP
Specification.Zero-code instrumentationIf applicable, a language specific implementation of OpenTelemetry provides a
way to instrument your application without touching your source code. While the
underlying mechanism depends on the language, zero-code instrumentation adds the
OpenTelemetry API and SDK capabilities to your application. Additionally, it
might add a set of instrumentation libraries and exporter dependencies.For more information, see
Zero-code instrumentation.Resource detectorsA resource represents the entity producing
telemetry as resource attributes. For example, a process that produces telemetry
that is running in a container on Kubernetes has a Pod name, a namespace, and
possibly a deployment name. You can include all these attributes in the
resource.The language specific implementations of OpenTelemetry provide resource
detection from the OTEL_RESOURCE_ATTRIBUTES environment variable and for many
common entities, like process runtime, service, host, or operating system.For more information, see Resources.Cross-service propagatorsPropagation is the mechanism that moves data between services and processes.
Although not limited to tracing, propagation allows traces to build causal
information about a system across services that are arbitrarily distributed
across process and network boundaries.For the vast majority of the use cases, context propagation happens through
instrumentation libraries. If needed, you can use propagators yourself to
serialize and deserialize cross-cutting concerns such as the context of a span
and baggage.SamplersSampling is a process that restricts the amount of traces that are generated by
a system. Each language-specific implementation of OpenTelemetry offers several
head samplers.For more information, see Sampling.Kubernetes operatorThe OpenTelemetry Operator is an implementation of a Kubernetes Operator. The
operator manages the OpenTelemetry Collector and auto-instrumentation of the
workloads using OpenTelemetry.For more information, see K8s Operator.Function as a Service assetsOpenTelemetry supports various methods of monitoring Function-as-a-Service
provided by different cloud vendors. The OpenTelemetry community currently
provides pre-built Lambda layers able to auto-instrument your application as
well as the option of a standalone Collector Lambda layer that can be used when
instrumenting applications manually or automatically.For more information, see Functions as a Service.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 6, 2025: [IA] Link normalization step of (#6232) (99a39c5e)\n\n\n\nDocsConceptsSemantic ConventionsSemantic ConventionsCommon names for different kinds of operations and data.OpenTelemetry defines Semantic Conventions, sometimes
called Semantic attributes, that specify common names for different kinds of
operations and data. The benefit of using Semantic conventions is in following a
common naming scheme that can be standardized across a codebase, libraries, and
platforms.Semantic conventions are available for traces, metrics, logs, and resources:Trace semantic conventionsMetric semantic conventionsLog semantic conventionsResource semantic conventionsFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified May 28, 2024: Style edits for Concepts section (#4550) (2f34c456)\n\n\n\nDocsConceptsResourcesResourcesIntroductionA resource represents the entity producing telemetry as
resource attributes. For example, a process producing telemetry that is
running in a container on Kubernetes has a process name, a pod name, a
namespace, and possibly a deployment name. All four of these attributes can be
included in the resource.In your observability backend, you can use resource information to better
investigate interesting behavior. For example, if your trace or metrics data
indicate latency in your system, you can narrow it down to a specific container,
pod, or Kubernetes deployment.If you use Jaeger as your observability
backend, resource attributes are grouped under the Process tab:A resource is added to the TracerProvider or MetricProvider when they are
created during initialization. This association cannot be changed later. After a
resource is added, all spans and metrics produced from a Tracer or Meter
from the provider will have the resource associated with them.Semantic Attributes with SDK-provided Default ValueThere are attributes provided by the OpenTelemetry SDK. One of them is the
service.name, which represents the logical name of the service. By default,
SDKs will assign the value unknown_service for this value, so it is
recommended to set it explicitly, either in code or via setting the environment
variable OTEL_SERVICE_NAME.Additionally, the SDK will also provides the following resource attributes to
identify itself: telemetry.sdk.name, telemetry.sdk.language and
telemetry.sdk.version.Resource DetectorsMost language-specific SDKs provide a set of resource detectors that can be used
to automatically detect resource information from the environment. Common
resource detectors include:Operating SystemHostProcess and Process RuntimeContainerKubernetesCloud-Provider-Specific Attributesand moreCustom resourcesYou can also provide your own resource attributes. You can either provide them
in code or via populating the environment variable OTEL_RESOURCE_ATTRIBUTES.
If applicable, use the
semantic conventions for your resource attributes.
For example, you can provide the name of your
deployment environment
using deployment.environment:env OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production yourApp
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 18, 2025: Fix typo traceProvider -> tracerProvider (#6369) (86d2fbde)\n\n\n\nDocsConceptsInstrumentation scopeInstrumentation scopeThe Instrumentation scope
represents a logical unit within the application code with which the emitted
telemetry can be associated.Developers can decide what denotes a reasonable instrumentation scope. For
example, they can select a module, a package, or a class as the instrumentation
scope. In the case of a library or framework, a common approach is to use an
identifier as scope that is unique to the library or framework, such as a fully
qualified name and version of the library or framework. If the library itself
doesn’t have built-in OpenTelemetry instrumentation, and an instrumentation
library is used instead, use the name and version of the instrumentation library
as the instrumentation scope.The instrumentation scope is defined by a name and version pair when a tracer,
meter or logger instance is obtained from a provider. Each span, metric, or log
record created by the instance is then associated with the provided
instrumentation scope.In your observability backend, scoping allows you to slice and dice your
telemetry data by scope, for example to see which of your users are using which
version of a library and what the performance of that library version is or to
pin point a problem to a specific module of your application.The following diagram illustrates a trace with multiple instrumentation scopes.
The different scopes are represented by different colors:At the top the /api/placeOrder span is generated by the used HTTP framework.The spans in green (CheckoutService::placeOrder, prepareOrderItems and
checkout) are application code, grouped by the CheckoutService class.The spans for CartService::getCart and ProductService::getProduct are also
application code, grouped by the CartService and ProductService classes.The spans in orange (Cache::find) and light blue (DB::query) are library
code, grouped by the library name and version.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified May 28, 2024: Style edits for Concepts section (#4550) (2f34c456)\n\n\n\nDocsConceptsSamplingSamplingLearn about sampling and the different sampling options available in OpenTelemetry.With traces, you can observe requests as they
move from one service to another in a distributed system. Tracing is highly
practical for both high-level and in-depth analysis of systems.However, if the large majority of your requests are successful and finish with
acceptable latency and no errors, you do not need 100% of your traces to
meaningfully observe your applications and systems. You just need the right
sampling.TerminologyIt’s important to use consistent terminology when discussing sampling. A trace
or span is considered “sampled” or “not sampled”:Sampled: A trace or span is processed and exported. Because it is chosen
by the sampler as a representative of the population, it is considered
“sampled”.Not sampled: A trace or span is not processed or exported. Because it is
not chosen by the sampler, it is considered “not sampled”.Sometimes, the definitions of these terms get mixed up. You might find someone
states that they are “sampling out data” or that data not processed or exported
is considered “sampled”. These are incorrect statements.Why sampling?Sampling is one of the most effective ways to reduce the costs of observability
without losing visibility. Although there are other ways to lower costs, such as
filtering or aggregating data, these other methods do not adhere to the concept
of representativeness, which is crucial when performing in-depth analysis of
application or system behavior.Representativeness is the principle that a smaller group can accurately
represent a larger group. Additionally, representativeness can be mathematically
verified, meaning that you can have high confidence that a smaller sample of
data accurately represents the larger group.Additionally, the more data you generate, the less data you actually need to
have a representative sample. For high-volume systems, is quite common for a
sampling rate of 1% or lower to very accurately represent the other 99% of data.When to sampleConsider sampling if you meet any of the following criteria:You generate 1000 or more traces per second.Most of your trace data represents healthy traffic with little variation in
data.You have some common criteria, like errors or high latency, that usually means
something is wrong.You have domain-specific criteria you can use to determine relevant data
beyond errors and latency.You can describe some common rules that determine if data should be sampled or
dropped.You have a way to tell your services apart, so that high- and low-volume
services are sampled differently.You have the ability to route unsampled data (for “just in case” scenarios) to
low-cost storage systems.Finally, consider your overall budget. If you have limited budget for
observability, but can afford to spend time to effectively sample, then sampling
can generally be worth it.When not to sampleSampling might not be appropriate for you. You might want to avoid sampling if
you meet any of the following criteria:You generate very little data (tens of small traces per second or lower).You only use observability data in aggregate, and can thus pre-aggregate data.You are bound by circumstances such as regulation that prohibit dropping data
(and cannot route unsampled data to low-cost storage).Finally, consider the following three costs associated with sampling:The direct cost of compute to effectively sample data, such as a tail
sampling proxy.The indirect engineering cost of maintaining effective sampling methodologies
as more application, systems, and data are involved.The indirect opportunity cost of missing critical information with
ineffective sampling techniques.Sampling, while effective at reducing observability costs, might introduce other
unexpected costs if not performed well. It could be cheaper to allocate more
resources for observability instead, either with a vendor or compute when
self-hosting, depending on your observability backend, the nature of your data,
and your attempts to sample effectively.Head SamplingHead sampling is a sampling technique used to make a sampling decision as early
as possible. A decision to sample or drop a span or trace is not made by
inspecting the trace as a whole.For example, the most common form of head sampling is
Consistent Probability Sampling.
This is also be referred to as Deterministic Sampling. In this case, a sampling
decision is made based on the trace ID and the desired percentage of traces to
sample. This ensures that whole traces are sampled - no missing spans - at a
consistent rate, such as 5% of all traces.The upsides to head sampling are:Easy to understandEasy to configureEfficientCan be done at any point in the trace collection pipelineThe primary downside to head sampling is that it is not possible to make a
sampling decision based on data in the entire trace. For example, you cannot
ensure that all traces with an error within them are sampled with head sampling
alone. For this situation and many others, you need tail sampling.Tail SamplingTail sampling is where the decision to sample a trace takes place by considering
all or most of the spans within the trace. Tail Sampling gives you the option to
sample your traces based on specific criteria derived from different parts of a
trace, which isn’t an option with Head Sampling.Some examples of how you can use Tail Sampling include:Always sampling traces that contain an errorSampling traces based on overall latencySampling traces based on the presence or value of specific attributes on one
or more spans in a trace; for example, sampling more traces originating from a
newly deployed serviceApplying different sampling rates to traces based on certain criteria, such as
when traces only come from low-volume services versus traces with high-volume
services.As you can see, tail sampling allows for a much higher degree of sophistication
in how you sample data. For larger systems that must sample telemetry, it is
almost always necessary to use Tail Sampling to balance data volume with the
usefulness of that data.There are three primary downsides to tail sampling today:Tail sampling can be difficult to implement. Depending on the kind of
sampling techniques available to you, it is not always a “set and forget”
kind of thing. As your systems change, so too will your sampling strategies.
For a large and sophisticated distributed system, rules that implement
sampling strategies can also be large and sophisticated.Tail sampling can be difficult to operate. The component(s) that implement
tail sampling must be stateful systems that can accept and store a large
amount of data. Depending on traffic patterns, this can require dozens or
even hundreds of compute nodes that all utilize resources differently.
Furthermore, a tail sampler might need to “fall back” to less computationally
intensive sampling techniques if it is unable to keep up with the volume of
data it is receiving. Because of these factors, it is critical to monitor
tail-sampling components to ensure that they have the resources they need to
make the correct sampling decisions.Tail samplers often end up as vendor-specific technology today. If you’re
using a paid vendor for Observability, the most effective tail sampling
options available to you might be limited to what the vendor offers.Finally, for some systems, tail sampling might be used in conjunction with Head
Sampling. For example, a set of services that produce an extremely high volume
of trace data might first use head sampling to sample only a small percentage of
traces, and then later in the telemetry pipeline use tail sampling to make more
sophisticated sampling decisions before exporting to a backend. This is often
done in the interest of protecting the telemetry pipeline from being overloaded.SupportCollectorThe OpenTelemetry Collector includes the following sampling processors:Probabilistic Sampling ProcessorTail Sampling ProcessorLanguage SDKsFor the individual language-specific implementations of the OpenTelemetry API &
SDK, you will find support for sampling in the respective documentation pages:Erlang/ElixirGoJavaScriptRubyVendorsMany vendors offer comprehensive sampling solutions that
incorporate head sampling, tail sampling, and other features that can support
sophisticated sampling needs. These solutions may also be optimized specifically
for the vendor’s backend. If you are sending telemetry to a vendor, consider
using their sampling solutions.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified September 17, 2024: Update opentelemetry-specification version to v1.37.0 (#5195) (49879d0c)\n\n\n\nDocsConceptsDistributionsDistributionsA distribution, not to be confused with a fork, is a customized version of an OpenTelemetry component.The OpenTelemetry projects consists of multiple components that
support multiple signals. The reference implementation of
OpenTelemetry is available as:Language-specific instrumentation librariesA Collector binaryAny reference implementation can be customized as a distribution.What is a distribution?A distribution is a customized version of an OpenTelemetry component. A
distribution is a wrapper around an upstream OpenTelemetry repository with some
customizations. Distributions are not to be confused with forks.Customizations in a distribution may include:Scripts to ease use or customize use for a specific backend or vendorChanges to default settings required for a backend, vendor, or end-userAdditional packaging options that may be vendor or end-user specificTest, performance, and security coverage beyond what OpenTelemetry providesAdditional capabilities beyond what OpenTelemetry providesLess capabilities from what OpenTelemetry providesDistributions broadly fall into the following categories:“Pure”: These distributions provide the same functionality as upstream and
are 100% compatible. Customizations typically enhance the ease of use or
packaging. These customizations may be backend, vendor, or end-user specific.“Plus”: These distributions provide added functionalities on top of
upstream through additional components. Examples include instrumentation
libraries or vendor exporters not upstreamed to the OpenTelemetry project.“Minus”: These distributions provide a subset of functionality from
upstream. Examples of this include the removal of instrumentation libraries or
receivers, processors, exporters, or extensions found in the OpenTelemetry
Collector project. These distributions may be provided to increase
supportability and security considerations.Who can create a distribution?Anyone can create a distribution. Today, several vendors
offer distributions. In addition, end-users can
consider creating a distribution if they want to use components in the
Registry that are not upstreamed to the OpenTelemetry
project.Contribution or distribution?Before you read on and learn how you can create your own distribution, ask
yourself if your additions on top of an OpenTelemetry component would be
beneficial for everyone and therefore should be included in the reference
implementations:Can your scripts for “ease of use” be generalized?Can your changes to default settings be the better option for everyone?Are your additional packaging options really specific?Might your test, performance and security coverage work with the reference
implementation as well?Have you checked with the community if your additional capabilities could be
part of the standard?Creating your own distributionCollectorA guide on how to create your own distribution is available in this blog post:
“Building your own OpenTelemetry Collector distribution”If you are building your own distribution, the
OpenTelemetry Collector Builder
might be a good starting point.Language specific instrumentation librariesThere are language specific extensibility mechanisms to customize the
instrumentation libraries:Java agentFollow the guidelinesWhen using OpenTelemetry project collateral such as logo and name for your
distribution, make sure that you are in line with the OpenTelemetry Marketing
Guidelines for Contributing Organizations.The OpenTelemetry project does not certify distributions at this time. In the
future, OpenTelemetry may certify distributions and partners similarly to the
Kubernetes project. When evaluating a distribution, ensure using the
distribution does not result in vendor lock-in.Any support for a distribution comes from the distribution authors and not the
OpenTelemetry authors.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified April 11, 2025: add missing word to title (#6679) (55f9c9d0)\n\n\n\nDocsConceptsGlossaryGlossaryDefinitions and conventions for telemetry terms as used in OpenTelemetry.This glossary defines terms and concepts that are new to the
OpenTelemetry project, and clarifies OpenTelemetry-specific uses of terms common
in the observability field.We also comment on spelling and capitalization when helpful. For example, see
OpenTelemetry and OTel.TermsAggregationThe process of combining multiple measurements into exact or estimated
statistics about the measurements that took place during an interval of time,
during program execution. Used by the Metric
Data source.APIApplication Programming Interface. In the OpenTelemetry project, used to define
how telemetry data is generated per Data source.ApplicationOne or more Services designed for end users or other applications.APMApplication Performance Monitoring is about monitoring software applications,
their performance (speed, reliability, availability, and so on) to detect
issues, alerting and tooling for finding the root cause.AttributeOpenTelemetry term for Metadata. Adds key-value information to the
entity producing telemetry. Used across Signals and
Resources. See attribute spec.Automatic instrumentationRefers to telemetry collection methods that do not require the end-user to
modify application’s source code. Methods vary by programming language, and
examples include bytecode injection or monkey patching.BaggageA mechanism for propagating Metadata to help establish a causal
relationship between events and services. See baggage spec.Client librarySee Instrumented library.Client-side appA component of an Application that is not running inside a
private infrastructure and is typically used directly by end-users. Examples of
client-side apps are browser apps, mobile apps, and apps running on IoT devices.CollectorThe OpenTelemetry Collector, or Collector for short, is a vendor-agnostic
implementation on how to receive, process, and export telemetry data. A single
binary that can be deployed as an agent or gateway.Spelling: When referring to the OpenTelemetry Collector, always
capitalize Collector. Use just “Collector” if you are using Collector as an
adjective — for example, “Collector configuration”.ContribSeveral Instrumentation Libraries and the
Collector offer a set of core capabilities as well as a dedicated
contrib repository for non-core capabilities including vendor Exporters.Context propagationAllows all Data sources to share an underlying context mechanism
for storing state and accessing data across the lifespan of a
Transaction. See context propagation
spec.DAGDirected Acyclic Graph.Data sourceSee SignalDimensionA term used specifically by Metrics. See Attribute.Distributed tracingTracks the progression of a single Request, called a
Trace, as it is handled by Services that make up an
Application. A Distributed trace
transverses process, network and security boundaries.See Distributed tracing.DistributionA distribution is a wrapper around an upstream OpenTelemetry repository with
some customizations. See more.EventAn Event is a Log Record with an event name and a well-known
structure. For example, browser events in OpenTelemetry follow a particular
naming convention and carry particular data in a common structure.ExporterProvides functionality to emit telemetry to consumers. Exporters can be push- or
pull-based.FieldA term used specifically by Log Records. Metadata
can be added through defined fields, including Attributes and
Resource. Other fields may also be considered Metadata, including
severity and trace information. See the field spec.gRPCA high-performance, open source universal RPC framework. More on gRPC
here.HTTPShort for Hypertext Transfer Protocol.Instrumented libraryDenotes the Library for which the telemetry signals
(Traces, Metrics, Logs) are gathered. See
more.Instrumentation libraryDenotes the Library that provides the instrumentation for a given
Instrumented library.
Instrumented library and
Instrumentation library can be the same
Library if it has built-in OpenTelemetry instrumentation. See the
lib specification.JSONShort for JavaScript Object Notation.LabelA term used specifically by Metrics. See Metadata.LanguageProgramming Language.LibraryA language-specific collection of behavior invoked by an interface.LogSometimes used to refer to a collection of Log records. Can be
ambiguous since people also sometimes use Log to refer to a single
Log record. Where ambiguity is possible, use additional
qualifiers, for example, Log record. See moreLog recordA recording of data with a timestamp and a severity. May also have a
Trace ID and Span ID when correlated with a trace. See
more.MetadataA key-value pair, for example foo="bar", added to an entity producing
telemetry. OpenTelemetry calls these pairs Attributes. In
addition, Metrics have Dimensions an Labels,
while Logs have Fields.MetricRecords a data point, either raw measurements or predefined aggregation, as time
series with Metadata. See more.OCShort form for OpenCensus.OpAMPAbbreviation for the
Open Agent Management Protocol.Spelling: Write OpAMP, not OPAMP nor opamp in descriptions or
instructions.OpenCensusPrecursor to OpenTelemetry. For details, see
History.OpenTelemetryFormed through a merger of the OpenTracing and
OpenCensus projects, OpenTelemetry — the subject of this
website — is a collection of APIs, SDKs, and tools that
you can use to instrument, generate,
collect, and
export
telemetry data such as metrics,
logs, and traces.Spelling: OpenTelemetry should always be a single unhyphenated word and
capitalized as shown.OpenTracingPrecursor to OpenTelemetry. For details, see
History.OTShort form for OpenTracing.OTelShort form for OpenTelemetry.Spelling: Write OTel, not OTEL.OTelColShort form for OpenTelemetry Collector.OTEPAn acronym for OpenTelemetry Enhancement Proposal.Spelling: Write “OTEPs” as plural form. Don’t write OTep or otep in
descriptions.OTLPShort for OpenTelemetry Protocol.PropagatorsUsed to serialize and deserialize specific parts of telemetry data such as span
context and Baggage in Spans. See more.ProtoLanguage independent interface types. See more.ReceiverThe term used by the Collector to
define how telemetry data is received. Receivers can be push- or pull-based. See
more.RequestSee Distributed Tracing.ResourceCaptures information about the entity producing telemetry as
Attributes. For example, a process producing telemetry that is
running in a container on Kubernetes has a process name, a pod name, a
namespace, and possibly a deployment name. All these attributes can be included
in the Resource.RESTShort for Representational State Transfer.RPCShort for Remote Procedure Call.SamplingA mechanism to control the amount of data exported. Most commonly used with the
Tracing Data Source. See more.SDKShort for Software Development Kit. Refers to a telemetry SDK that denotes a
Library that implement the OpenTelemetry API.Semantic conventionsDefines standard names and values of Metadata in order to provide
vendor-agnostic telemetry data.ServiceA component of an Application. Multiple instances of a
Service are typically deployed for high availability and
scalability. A Service can be deployed in multiple locations.SignalOne of Traces, Metrics or Logs. More on Signals
here.SpanRepresents a single operation within a Trace. See more.Span linkA span link is a link between causally-related spans. For details see
Links between spans and
Specifying Links.SpecificationDescribes the cross-language requirements and expectations for all
implementations. See more.StatusThe result of the operation. Typically used to indicate whether an error
occurred. See more.TagSee Metadata.TraceA DAG of Spans, where the edges between Spans are
defined as parent-child relationship. See more.TracerResponsible for creating Spans. See more.TransactionSee Distributed Tracing.zPagesAn in-process alternative to external exporters. When included, they collect and
aggregate tracing and metrics information in the background; this data is served
on web pages when requested. See more.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 17, 2025: Clarify event and log glossary defs (#6363) (389e0231)\n\n\n\nDocsDemoOpenTelemetry Demo DocsWelcome to the OpenTelemetry Demo documentation, which
covers how to install and run the demo, and some scenarios you can use to view
OpenTelemetry in action.Running the DemoWant to deploy the demo and see it in action? Start here.DockerKubernetesLanguage Feature ReferenceWant to understand how a particular language’s instrumentation works? Start
here.LanguageAutomatic InstrumentationInstrumentation LibrariesManual Instrumentation.NETAccounting ServiceCart ServiceCart ServiceC++Currency ServiceGoCheckout Service, Product Catalog ServiceCheckout Service, Product Catalog ServiceJavaAd ServiceAd ServiceJavaScriptPayment ServiceTypeScriptFrontend, React Native AppFrontendKotlinFraud Detection ServicePHPQuote ServiceQuote ServicePythonRecommendation ServiceRecommendation ServiceRubyEmail ServiceEmail ServiceRustShipping ServiceShipping ServiceService DocumentationSpecific information about how OpenTelemetry is deployed in each service can be
found here:Accounting ServiceAd ServiceCart ServiceCheckout ServiceEmail ServiceFrontendLoad GeneratorPayment ServiceProduct Catalog ServiceQuote ServiceRecommendation ServiceShipping ServiceImage Provider ServiceReact Native AppScenariosHow can you solve problems with OpenTelemetry? These scenarios walk you through
some pre-configured problems and show you how to interpret OpenTelemetry data to
solve them.We’ll be adding more scenarios over time.Generate a Product Catalog error for GetProduct requests
with product ID: OLJCESPC7Z using the Feature Flag serviceDiscover a memory leak and diagnose it using metrics and traces.
Read moreReferenceProject reference documentation, like requirements and feature matrices.ArchitectureDevelopmentFeature Flags ReferenceMetric Feature MatrixRequirementsScreenshotsServicesSpan Attributes ReferenceTestsTrace Feature MatrixDemo ArchitectureCollector Data Flow DashboardDevelopmentDocker deploymentFeature FlagsForking the demo repositoryKubernetes deploymentDemo RequirementsScenariosDemo ScreenshotsServicesTelemetry FeaturesTestsFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 17, 2025: [i18n] Support localization of page-not-translated banner (#6339) (7811e854)\n\nDemo ArchitectureCollector Data Flow DashboardDevelopmentDocker deploymentFeature FlagsForking the demo repositoryKubernetes deploymentDemo RequirementsScenariosDemo ScreenshotsServicesTelemetry FeaturesTests\n\n\n\nDocsDemoArchitectureDemo ArchitectureOpenTelemetry Demo is composed of microservices written in different
programming languages that talk to each other over gRPC and HTTP; and a load
generator which uses Locust to fake user traffic.graph TD
subgraph Service Diagram
accounting(Accounting):::dotnet
ad(Ad):::java
cache[(Cache<br/>&#40Valkey&#41)]
cart(Cart):::dotnet
checkout(Checkout):::golang
currency(Currency):::cpp
email(Email):::ruby
flagd(Flagd):::golang
flagd-ui(Flagd-ui):::typescript
fraud-detection(Fraud Detection):::kotlin
frontend(Frontend):::typescript
frontend-proxy(Frontend Proxy <br/>&#40Envoy&#41):::cpp
image-provider(Image Provider <br/>&#40nginx&#41):::cpp
load-generator([Load Generator]):::python
payment(Payment):::javascript
product-catalog(Product Catalog):::golang
quote(Quote):::php
recommendation(Recommendation):::python
shipping(Shipping):::rust
queue[(queue<br/>&#40Kafka&#41)]:::java
react-native-app(React Native App):::typescript

ad ---->|gRPC| flagd

checkout -->|gRPC| cart
checkout --->|TCP| queue
cart --> cache
cart -->|gRPC| flagd

checkout -->|gRPC| shipping
checkout -->|gRPC| payment
checkout --->|HTTP| email
checkout -->|gRPC| currency
checkout -->|gRPC| product-catalog

fraud-detection -->|gRPC| flagd

frontend -->|gRPC| ad
frontend -->|gRPC| cart
frontend -->|gRPC| checkout
frontend ---->|gRPC| currency
frontend ---->|gRPC| recommendation
frontend -->|gRPC| product-catalog

frontend-proxy -->|gRPC| flagd
frontend-proxy -->|HTTP| frontend
frontend-proxy -->|HTTP| flagd-ui
frontend-proxy -->|HTTP| image-provider

Internet -->|HTTP| frontend-proxy

load-generator -->|HTTP| frontend-proxy

payment -->|gRPC| flagd

queue -->|TCP| accounting
queue -->|TCP| fraud-detection

recommendation -->|gRPC| product-catalog
recommendation -->|gRPC| flagd

shipping -->|HTTP| quote

react-native-app -->|HTTP| frontend-proxy
end

classDef dotnet fill:#178600,color:white;
classDef cpp fill:#f34b7d,color:white;
classDef golang fill:#00add8,color:black;
classDef java fill:#b07219,color:white;
classDef javascript fill:#f1e05a,color:black;
classDef kotlin fill:#560ba1,color:white;
classDef php fill:#4f5d95,color:white;
classDef python fill:#3572A5,color:white;
classDef ruby fill:#701516,color:white;
classDef rust fill:#dea584,color:black;
classDef typescript fill:#e98516,color:black;graph TD
subgraph Service Legend
  dotnetsvc(.NET):::dotnet
  cppsvc(C++):::cpp
  golangsvc(Go):::golang
  javasvc(Java):::java
  javascriptsvc(JavaScript):::javascript
  kotlinsvc(Kotlin):::kotlin
  phpsvc(PHP):::php
  pythonsvc(Python):::python
  rubysvc(Ruby):::ruby
  rustsvc(Rust):::rust
  typescriptsvc(TypeScript):::typescript
end

classDef dotnet fill:#178600,color:white;
classDef cpp fill:#f34b7d,color:white;
classDef golang fill:#00add8,color:black;
classDef java fill:#b07219,color:white;
classDef javascript fill:#f1e05a,color:black;
classDef kotlin fill:#560ba1,color:white;
classDef php fill:#4f5d95,color:white;
classDef python fill:#3572A5,color:white;
classDef ruby fill:#701516,color:white;
classDef rust fill:#dea584,color:black;
classDef typescript fill:#e98516,color:black;Follow these links for the current state of
metric and
trace instrumentation of the
demo applications.The collector is configured in
otelcol-config.yml,
alternative exporters can be configured here.graph TB
subgraph tdf[Telemetry Data Flow]
    subgraph subgraph_padding [ ]
        style subgraph_padding fill:none,stroke:none;
        %% padding to stop the titles clashing
        subgraph od[OpenTelemetry Demo]
        ms(Microservice)
        end

        ms -.->|"OTLP<br/>gRPC"| oc-grpc
        ms -.->|"OTLP<br/>HTTP POST"| oc-http

        subgraph oc[OTel Collector]
            style oc fill:#97aef3,color:black;
            oc-grpc[/"OTLP Receiver<br/>listening on<br/>grpc://localhost:4317"/]
            oc-http[/"OTLP Receiver<br/>listening on <br/>localhost:4318<br/>"/]
            oc-proc(Processors)
            oc-prom[/"OTLP HTTP Exporter"/]
            oc-otlp[/"OTLP Exporter"/]

            oc-grpc --> oc-proc
            oc-http --> oc-proc

            oc-proc --> oc-prom
            oc-proc --> oc-otlp
        end

        oc-prom -->|"localhost:9090/api/v1/otlp"| pr-sc
        oc-otlp -->|gRPC| ja-col

        subgraph pr[Prometheus]
            style pr fill:#e75128,color:black;
            pr-sc[/"Prometheus OTLP Write Receiver"/]
            pr-tsdb[(Prometheus TSDB)]
            pr-http[/"Prometheus HTTP<br/>listening on<br/>localhost:9090"/]

            pr-sc --> pr-tsdb
            pr-tsdb --> pr-http
        end

        pr-b{{"Browser<br/>Prometheus UI"}}
        pr-http ---->|"localhost:9090/graph"| pr-b

        subgraph ja[Jaeger]
            style ja fill:#60d0e4,color:black;
            ja-col[/"Jaeger Collector<br/>listening on<br/>grpc://jaeger:4317"/]
            ja-db[(Jaeger DB)]
            ja-http[/"Jaeger HTTP<br/>listening on<br/>localhost:16686"/]

            ja-col --> ja-db
            ja-db --> ja-http
        end

        subgraph gr[Grafana]
            style gr fill:#f8b91e,color:black;
            gr-srv["Grafana Server"]
            gr-http[/"Grafana HTTP<br/>listening on<br/>localhost:3000"/]

            gr-srv --> gr-http
        end

        pr-http --> |"localhost:9090/api"| gr-srv
        ja-http --> |"localhost:16686/api"| gr-srv

        ja-b{{"Browser<br/>Jaeger UI"}}
        ja-http ---->|"localhost:16686/search"| ja-b

        gr-b{{"Browser<br/>Grafana UI"}}
        gr-http -->|"localhost:3000/dashboard"| gr-b
    end
endFind the Protocol Buffer Definitions in the /pb/ directory.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoCollector Data Flow DashboardCollector Data Flow DashboardMonitoring data flow through the OpenTelemetry Collector is crucial for several
reasons. Gaining a macro-level perspective on incoming data, such as sample
counts and cardinality, is essential for comprehending the collector’s internal
dynamics. However, when delving into the details, the interconnections can
become complex. The Collector Data Flow Dashboard aims to demonstrate the
capabilities of the OpenTelemetry demo application, offering a solid foundation
for users to build upon. Collector Data Flow Dashboard provides valuable
guidance on which metrics to monitor. Users can tailor their own dashboard
variations by adding necessary metrics specific to their use cases, such as
memory_delimiter processor or other data flow indicators. This demo dashboard
serves as a starting point, enabling users to explore diverse usage scenarios
and adapt the tool to their unique monitoring needs.Data Flow OverviewThe diagram below provides an overview of the system components, showcasing the
configuration derived from the OpenTelemetry Collector (otelcol) configuration
file utilized by the OpenTelemetry demo application. Additionally, it highlights
the observability data (traces and metrics) flow within the system.Ingress/Egress MetricsThe metrics depicted in the diagram below are employed to monitor both egress
and ingress data flows. These metrics are generated by the otelcol process,
exported on port 8888, and subsequently scraped by Prometheus. The namespace
associated with these metrics is “otelcol,” and the job name is labeled as
otel.Labels serve as a valuable tool for identifying specific metric sets (such as
exporter, receiver, or job), enabling differentiation among metric sets within
the overall namespace. It is important to note that you will only encounter
refused metrics if the memory limits, as defined in the memory delimiter
processor, are exceeded.Ingress Traces Pipelineotelcol_receiver_accepted_spansotelcol_receiver_refused_spansby (receiver,transport)Ingress Metrics Pipelineotelcol_receiver_accepted_metric_pointsotelcol_receiver_refused_metric_pointsby (receiver,transport)ProcessorCurrently, the only processor present in the demo application is a batch
processor, which is used by both traces and metrics pipelines.otelcol_processor_batch_batch_send_size_sumEgress Traces Pipelineotelcol_exporter_sent_spansotelcol_exporter_send_failed_spansby (exporter)Egress Metrics Pipelineotelcol_exporter_sent_metric_pointsotelcol_exporter_send_failed_metric_pointsby (exporter)Prometheus Scrapingscrape_samples_scrapedby (job)DashboardYou can access the dashboard by navigating to the Grafana UI, selecting the
OpenTelemetry Collector Data Flow dashboard under browse icon on the
left-hand side of the screen.The dashboard has four main sections:Process MetricsTraces PipelineMetrics PipelinePrometheus ScrapingSections 2,3 and 4 represent overall data flow using the metrics mentioned
above. Additionally, export ratio is calculated for each pipeline to understand
the data flow.Export RatioExport ratio is basically the ratio between receiver and exporter metrics. You
can notice over the dashboard screenshot above that the export ratio on metrics
is way too high than the received metrics. This is because the demo application
is configured to generate span metrics which is a processor that generates
metrics from spans inside collector as illustrated in overview diagram.Process MetricsVery limited but informative process metrics are added to dashboard. For
example, you might observe more than one instance of otelcol running on the
system during restarts or similar. This can be useful for understanding spikes
on dataflow.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 22, 2025: [chore] Spelling: dashboard...id (#6018) (1f6a173c)\n\n\n\nDocsDemoDevelopmentDevelopmentOpenTelemetry Demo GitHub repositoryDevelopment for this demo requires tooling in several programming languages.
Minimum required versions will be noted where possible, but it is recommended to
update to the latest version for all tooling. The OpenTelemetry demo team will
attempt to keep the services in this repository up to date with the latest
version for dependencies and tooling when possible.Generate protobuf filesThe make generate-protobuf command is provided to generate protobuf files for
all services. This can be used to compile code locally (without Docker) and
receive hints from IDEs such as IntelliJ or VS Code. It may be necessary to run
npm install within the frontend source folder before generating the files.Development tooling requirements.NET.NET 8.0+C++build-essentialcmakelibcurl4-openssl-devlibprotobuf-devnlohmann-json3-devpkg-configprotobuf-compilerGoGo 1.19+protoc-gen-goprotoc-gen-go-grpcJavaJDK 17+Gradle 7+JavaScriptNode.js 16+PHPPHP 8.1+Composer 2.4+PythonPython 3.10grpcio-tools 1.48+RubyRuby 3.1+RustRust 1.61+protoc 3.21+protobuf-devFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 17, 2025: Demo - update required .NET version to .NET8 (#6359) (7c112ea4)\n\n\n\nDocsDemoDockerDocker deploymentPrerequisitesDockerDocker Compose v2.0.0+Make (optional)6 GB of RAM for the applicationGet and run the demoClone the Demo repository:git clone https://github.com/open-telemetry/opentelemetry-demo.git
Change to the demo folder:cd opentelemetry-demo/
Start the demo1:
Make
Dockermake start
docker compose up --force-recreate --remove-orphans --detach
(Optional) Enable API observability-driven testing1:
Make
Dockermake run-tracetesting
docker compose -f docker-compose-tests.yml run traceBasedTests
Verify the web store and TelemetryOnce the images are built and containers are started you can access:Web store: http://localhost:8080/Grafana: http://localhost:8080/grafana/Load Generator UI: http://localhost:8080/loadgen/Jaeger UI: http://localhost:8080/jaeger/ui/Tracetest UI: http://localhost:11633/, only when using
make run-tracetestingFlagd configurator UI: http://localhost:8080/featureChanging the demo’s primary port numberBy default, the demo application will start a proxy for all browser traffic
bound to port 8080. To change the port number, set the ENVOY_PORT environment
variable before starting the demo.For example, to use port 80811:
Make
DockerENVOY_PORT=8081 make start
ENVOY_PORT=8081 docker compose up --force-recreate --remove-orphans --detach
Bring your own backendLikely you want to use the web store as a demo application for an observability
backend you already have (e.g., an existing instance of Jaeger, Zipkin, or one
of the vendors of your choice).OpenTelemetry Collector can be used to export telemetry data to multiple
backends. By default, the collector in the demo application will merge the
configuration from two files:otelcol-config.ymlotelcol-config-extras.ymlTo add your backend, open the file
src/otel-collector/otelcol-config-extras.yml
with an editor.Start by adding a new exporter. For example, if your backend supports OTLP
over HTTP, add the following:exporters:
  otlphttp/example:
    endpoint: <your-endpoint-url>
Then override the exporters for telemetry pipelines that you want to use for
your backend.service:
  pipelines:
    traces:
      exporters: [spanmetrics, otlphttp/example]
NoteWhen merging YAML values with the
Collector, objects are merged and arrays are replaced. The spanmetrics
exporter must be included in the array of exporters for the traces pipeline if
overridden. Not including this exporter will result in an error.Vendor backends might require you to add additional parameters for
authentication, please check their documentation. Some backends require
different exporters, you may find them and their documentation available at
opentelemetry-collector-contrib/exporter.After updating the otelcol-config-extras.yml, start the demo by running
make start. After a while, you should see the traces flowing into your backend
as well.docker-compose is deprecated. For details, see
Migrate to Compose V2. ↩︎ ↩︎ ↩︎FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 6, 2025: [chore] Refresh refcache, fix external links with invalid fragments (#6206) (3f5742fb)\n\n\n\nDocsDemoFeature FlagsFeature FlagsThe demo provides several feature flags that you can use to simulate different
scenarios. These flags are managed by flagd, a simple
feature flag service that supports OpenFeature.Flag values can be changed through the user interface provided at
http://localhost:8080/feature when running the demo. Changing the values
through this user interface will be reflected in the flagd service.There are two options when it comes to changing the feature flags through the
user interface:Basic View: A user friendly view in which default variants (the same
options that need to be changed when configuring through the raw file) can be
selected and saved for each feature flag. Currently, the basic view does not
support fractional targeting.Advanced View: A view in which the raw configuration JSON file is loaded
and can be edited within the browser. The view provides the flexibility that
comes with editing a raw JSON file, however it also provides schema checking
to ensure that the JSON is valid and that the provided configuration values
are correct.Implemented feature flagsFeature FlagService(s)DescriptionadServiceFailureAdGenerate an error for GetAds 1/10th of the timeadServiceManualGcAdTrigger full manual garbage collections in the ad serviceadServiceHighCpuAdTrigger high cpu load in the ad service. If you want to demo cpu throttling, set cpu resource limitscartServiceFailureCartGenerate an error whenever EmptyCart is calledproductCatalogFailureProduct CatalogGenerate an error for GetProduct requests with product ID: OLJCESPC7ZrecommendationServiceCacheFailureRecommendationCreate a memory leak due to an exponentially growing cache. 1.4x growth, 50% of requests trigger growth.paymentServiceFailurePaymentGenerate an error when calling the charge method.paymentServiceUnreachableCheckoutUse a bad address when calling the PaymentService to make it seem like the PaymentService is unavailable.loadgeneratorFloodHomepageLoad GeneratorStart flooding the homepage with a huge amount of requests, configurable by changing flagd JSON on state.kafkaQueueProblemsKafkaOverloads Kafka queue while simultaneously introducing a consumer side delay leading to a lag spike.imageSlowLoadFrontendUtilizes envoy fault injection, produces a delay in loading of product images in the frontend.Feature Flag ArchitecturePlease see the flagd documentation for more information on
how flagd works, and the OpenFeature website for more
information on how OpenFeature works, along with documentation for the
OpenFeature API.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoForkingForking the demo repositoryThe demo repository is designed to be forked and used as a tool to show off
what you are doing with OpenTelemetry.Setting up a fork or a demo usually only requires overriding some environment
variables and possibly replacing some container images.Live demos can be added to the demo
README.Suggestions for Fork MaintainersIf you’d like to enhance the telemetry data emitted or collected by the demo,
then we strongly encourage you to backport your changes to this repository.
For vendor or implementation specific changes, a strategy of modifying
telemetry in the pipeline via config is preferable to underlying code changes.Extend rather than replace. Adding net-new services that interface with the
existing API is a great way to add vendor-specific or tool-specific features
that can’t be accomplished through telemetry modification.To support extensibility, please use repository or facade patterns around
resources like queues, databases, caches, etc. This will allow for different
implementations of these services to be shimmed in for different platforms.Please do not attempt to backport vendor or tool-specific enhancements to this
repository.If you have any questions or would like to suggest ways that we can make your
life easier as a fork maintainer, please open an issue.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 10, 2025: [editorial] Add use of markdownlint-cli2 for linting, wrap some URLs in angle brackets (#6251) (5472965d)\n\n\n\nDocsDemoKubernetesKubernetes deploymentWe provide a
OpenTelemetry Demo Helm chart to help
deploy the demo to an existing Kubernetes cluster.Helm must be installed to use the charts. Please refer to
Helm’s documentation to get started.PrerequisitesKubernetes 1.24+6 GB of free RAM for the applicationHelm 3.14+ (for Helm installation method only)Install using Helm (recommended)Add OpenTelemetry Helm repository:helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
To install the chart with the release name my-otel-demo, run the following
command:helm install my-otel-demo open-telemetry/opentelemetry-demo
NoteThe OpenTelemetry Demo Helm chart does not support being upgraded from one
version to another. If you need to upgrade the chart, you must first delete the
existing release and then install the new version.NoteThe OpenTelemetry Demo Helm chart version 0.11.0 or greater is required to
perform all usage methods mentioned below.Install using kubectlThe following command will install the demo application to your Kubernetes
cluster.kubectl apply --namespace otel-demo -f https://raw.githubusercontent.com/open-telemetry/opentelemetry-demo/main/kubernetes/opentelemetry-demo.yaml
NoteThe OpenTelemetry Demo Kubernetes manifests do not support being upgraded from
one version to another. If you need to upgrade the demo, you must first delete
the existing resources and then install the new version.NoteThese manifests are generated from the Helm chart and are provided for
convenience. It is recommended to use the Helm chart for installation.Use the DemoThe demo application will need the services exposed outside of the Kubernetes
cluster in order to use them. You can expose the services to your local system
using the kubectl port-forward command or by configuring service types (ie:
LoadBalancer) with optionally deployed ingress resources.Expose services using kubectl port-forwardTo expose the frontend-proxy service use the following command (replace
my-otel-demo with your Helm chart release name accordingly):kubectl port-forward svc/my-otel-demo-frontend-proxy 8080:8080
Notekubectl port-forward proxies the port until the process terminates. You might
need to create separate terminal sessions for each use of
kubectl port-forward, and use Ctrl-C to terminate the process when
done.With the frontend-proxy port-forward set up, you can access:Web store: http://localhost:8080/Grafana: http://localhost:8080/grafana/Load Generator UI: http://localhost:8080/loadgen/Jaeger UI: http://localhost:8080/jaeger/ui/Flagd configurator UI: http://localhost:8080/featureExpose Demo components using service or ingress configurationsNoteWe recommend that you use a values file
when installing the Helm chart in order to specify additional configuration
options.Configure ingress resourcesNoteKubernetes clusters might not have the proper infrastructure components to
enable LoadBalancer service types or ingress resources. Verify your cluster has
the proper support before using these configuration options.Each demo component (ie: frontend-proxy) offers a way to have its Kubernetes
service type configured. By default, these will not be created, but you can
enable and configure them through the ingress property of each component.To configure the frontend-proxy component to use an ingress resource you would
specify the following in your values file:components:
  frontend-proxy:
    ingress:
      enabled: true
      annotations: {}
      hosts:
        - host: otel-demo.my-domain.com
          paths:
            - path: /
              pathType: Prefix
              port: 8080
Some ingress controllers require special annotations or service types. Refer to
the documentation from your ingress controller for more information.Configure service typesEach demo component (ie: frontend-proxy) offers a way to have its Kubernetes
service type configured. By default, these will be ClusterIP but you can
change each one using the service.type property of each component.To configure the frontend-proxy component to use a LoadBalancer service type you
would specify the following in your values file:components:
  frontend-proxy:
    service:
      type: LoadBalancer
Configure browser telemetryIn order for spans from the browser to be properly collected, you will also need
to specify the location where the OpenTelemetry Collector is exposed. The
frontend-proxy defines a route for the collector with a path prefix of
/otlp-http. You can configure the collector endpoint by setting the following
environment variable on the frontend component:components:
  frontend:
    envOverrides:
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://otel-demo.my-domain.com/otlp-http/v1/traces
Bring your own backendLikely you want to use the web store as a demo application for an observability
backend you already have (e.g. an existing instance of Jaeger, Zipkin, or one of
the vendor of your choice.The OpenTelemetry Collector’s configuration is exposed in the Helm chart. Any
additions you do will be merged into the default configuration. You can use this
to add your own exporters, and add them to the desired pipeline(s)opentelemetry-collector:
  config:
    exporters:
      otlphttp/example:
        endpoint: <your-endpoint-url>

    service:
      pipelines:
        traces:
          exporters: [spanmetrics, otlphttp/example]
NoteWhen merging YAML values with Helm,
objects are merged and arrays are replaced. The spanmetrics exporter must be
included in the array of exporters for the traces pipeline if overridden. Not
including this exporter will result in an error.Vendor backends might require you to add additional parameters for
authentication, please check their documentation. Some backends require
different exporters, you may find them and their documentation available at
opentelemetry-collector-contrib/exporter.To install the Helm chart with a custom my-values-file.yaml values file use:helm install my-otel-demo open-telemetry/opentelemetry-demo --values my-values-file.yaml
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoRequirementsDemo RequirementsThe following documents capture the Application, OpenTelemetry (OTel), and
System requirements for our shared demo application. These were decided upon in
the ongoing SIG meeting.Application RequirementsOpenTelemetry RequirementsSystem RequirementsTarget PersonasWe’re building the demo application with several different target personas in
mind:Enthusiasts at a company that can use the demo app as an individual to
advocate for OTel within their organization.Developers with specific language skills who want to see a larger picture
view.APM Vendors who can evaluate OTel in general or need to produce a demo of
their OTel capabilities for customers.Enterprises considering adopting OTel and interested in understanding
what a production-lite experience would be.ApplicationArchitecture RequirementsOpenTelemetry RequirementsSystem RequirementsFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 27, 2023: Enable Prettier check over demo docs (#2408) (f9cb26fb)\n\nApplicationArchitecture RequirementsOpenTelemetry RequirementsSystem Requirements\n\n\n\nDocsDemoRequirementsApplicationApplicationThe following requirements were decided upon to define what OpenTelemetry (OTel)
signals the application will produce & when support for future SDKs should be
added:Every supported language that has a GA Traces or Metrics SDK must have at
least 1 service example.Mobile support (Swift) is not an initial priority and not included in the
above requirement.Application processes must be language independent.gRPC is preferred where available and HTTP is to be used where it is not.Services should be architected to be modular components that can be switched
out.Individual services can and should be encouraged to have multiple language
options available.The architecture must allow for the possible integration of platform generic
components like a database, queue, or blob storage.There is no requirement for a particular component type - at least 1
generic component should be present in general.A load generator must be provided to simulate user load against the demo.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified October 19, 2023: Support page-relative aliases (#3417) (7f46ec2d)\n\n\n\nDocsDemoRequirementsArchitectureArchitecture RequirementsSummaryThe OpenTelemetry Community Demo application is intended to be a showcase for
OpenTelemetry API, SDK, and tools in a production-lite cloud native application.
The overall goal of this application is not only to provide a canonical ‘demo’
of OpenTelemetry components, but also to act as a framework for further
customization by end-users, vendors, and other stakeholders.RequirementsApplication RequirementsOpenTelemetry RequirementsSystem RequirementsApplication GoalsProvide developers with a robust sample application they can use in learning
OpenTelemetry instrumentation.Provide observability vendors with a single, well-supported, demo platform
that they can further customize (or simply use OOB).Provide the OpenTelemetry community with a living artifact that demonstrates
the features and capabilities of OTel APIs, SDKs, and tools.Provide OpenTelemetry maintainers and WGs a platform to demonstrate new
features/concepts ‘in the wild’.The following is a general description of the logical components of the demo
application.Main ApplicationThe bulk of the demo app is a self-contained microservice-based application that
does some useful ‘real-world’ work, such as an eCommerce site. This application
is composed of multiple services that communicate with each other over gRPC and
HTTP and runs on Kubernetes (or Docker, locally).Each service shall be instrumented with OpenTelemetry for traces, metrics, and
logs (as applicable/available).Each service should be interchangeable with a service that performs the same
business logic, implementing the same gRPC endpoints, but written in a different
language/implementation.Each service should be able to communicate with a feature flag service in order
to enable/disable faults that can be used to illustrate how telemetry helps
solve problems in distributed applications.Feature Flag ComponentFeature flagging is a crucial part of cloud native application development. The
demo uses OpenFeature, a CNCF incubating project, to manage feature flags.Feature flags can be set through the flagd configurator user interface.Orchestration and DeploymentAll services run on Kubernetes. The OpenTelemetry Collector should be deployed
via the OpenTelemetry Operator, and run in a sidecar + gateway mode. Telemetry
from each pod should be routed from agents to a gateway, and the gateway should
export telemetry by default to an open source trace + metrics visualizer.For local/non-Kubernetes deployment, the Collector should be deployed via
compose file and monitor not only traces/metrics from applications, but also the
docker containers via dockerstatsreceiver.A design goal of this project is to include a CI/CD pipeline for self-deployment
into cloud environments. This could be skipped for local development.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoRequirementsOTel RequirementsOpenTelemetry RequirementsThe following requirements were decided upon to define what OpenTelemetry (OTel)
signals the application will produce & when support for future SDKs should be
added:The demo must produce OTel logs, traces, & metrics out of the box for
languages that have a GA SDK.Languages that have a Beta SDK available may be included but are not required
like GA SDKs.Native OTel metrics should be produced where possible.Both manual instrumentation and instrumentation libraries
(auto-instrumentation) should be demonstrated in each language.All data should be exported to the Collector first.The Collector must be configurable to allow for a variety of consumption
experiences but default tools must be selected for each signal.The demo application architecture using the Collector should be designed to
be a best practices reference architecture.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified October 19, 2023: Support page-relative aliases (#3417) (7f46ec2d)\n\n\n\nDocsDemoRequirementsSystemSystem RequirementsTo ensure the demo runs correctly please ensure your environment meets the
following system requirements:Your system must meet Docker Desktop
system requirements or you should use your preferred Cloud Service.The demo must be able to work on the following Operating Systems (OS): Linux,
macOS and Windows with documentation provided for each OS.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified October 19, 2023: Support page-relative aliases (#3417) (7f46ec2d)\n\n\n\nDocsDemoScenariosScenariosUsing Metrics and Traces to diagnose a memory leakFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 7, 2023: Demo docs: left-nav fixes (#2275) (5884a4fe)\n\nUsing Metrics and Traces to diagnose a memory leak\n\n\n\nDocsDemoScenariosDiagnosing memory leaksUsing Metrics and Traces to diagnose a memory leakApplication telemetry, such as the kind that OpenTelemetry can provide, is very
useful for diagnosing issues in a distributed system. In this scenario, we will
walk through a scenario demonstrating how to move from high-level metrics and
traces to determine the cause of a memory leak.SetupTo run this scenario, you will need to deploy the demo application and enable
the recommendationServiceCacheFailure feature flag. Let the application run
for about 10 minutes or so after enabling the feature flag to allow for data to
populate.DiagnosisThe first step in diagnosing a problem is to determine that a problem exists.
Often the first stop will be a metrics dashboard provided by a tool such as
Grafana.A demo dashboard folder should exist
after launching the demo with two dashboards; One is to monitor your
OpenTelemetry Collector, and the other contains several queries and charts to
analyze latency and request rate from each service.This dashboard will contain a number of charts, but a few should appear
interesting:Recommendation Service (CPU% and Memory)Service Latency (from SpanMetrics)Error RateRecommendation Service charts are generated from OpenTelemetry Metrics exported
to Prometheus, while the Service Latency and Error Rate charts are generated
through the OpenTelemetry Collector Span Metrics processor.From our dashboard, we can see that there seems to be anomalous behavior in the
recommendation service – spiky CPU utilization, as well as long tail latency in
our p95, 99, and 99.9 histograms. We can also see that there are intermittent
spikes in the memory utilization of this service.We know that we’re emitting trace data from our application as well, so let’s
think about another way that we’d be able to determine that a problem exists.Jaeger allows us to search for traces and display the end-to-end latency of an
entire request with visibility into each individual part of the overall request.
Perhaps we noticed an increase in tail latency on our frontend requests. Jaeger
allows us to then search and filter our traces to include only those that
include requests to the recommendation service.By sorting by latency, we’re able to quickly find specific traces that took a
long time. Clicking on a trace in the right panel, we’re able to view the
waterfall view.We can see that the recommendation service is taking a long time to complete its
work, and viewing the details allows us to get a better idea of what’s going on.Confirming the DiagnosisWe can see in our waterfall view that the app.cache_hit attribute is set to
false, and that the app.products.count value is extremely high.Returning to the search UI, select recommendation in the Service dropdown, and
search for app.cache_hit=true in the Tags box. Notice that requests tend to be
faster when the cache is hit. Now search for app.cache_hit=false and compare
the latency. You should notice some changes in the visualization at the top of
the trace list.Now, since this is a contrived scenario, we know where to find the underlying
bug in our code. However, in a real-world scenario, we may need to perform
further searching to find out what’s going on in our code, or the interactions
between services that cause it.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoScreenshotsDemo ScreenshotsWeb storeHome PageCheckout ScreenJaegerJaeger UITrace ViewSystem ArchitecturePrometheusGrafanaPrometheus Data SourceJaeger Data SourceLoad Generator UIFlagd ConfiguratorBasic viewAdvanced viewFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 22, 2025: [chore] Spelling: dashboard...id (#6018) (1f6a173c)\n\n\n\nDocsDemoServicesServicesTo visualize request flows, see the Service Diagram.ServiceLanguageDescriptionaccounting.NETProcesses incoming orders and count the sum of all orders (mock/).adJavaProvides text ads based on given context words.cart.NETStores the items in the user’s shopping cart in Valkey and retrieves it.checkoutGoRetrieves user cart, prepares order and orchestrates the payment, shipping and the email notification.currencyC++Converts one money amount to another currency. Uses real values fetched from European Central Bank. It’s the highest QPS service.emailRubySends users an order confirmation email (mock/).fraud-detectionKotlinAnalyzes incoming orders and detects fraud attempts (mock/).frontendTypeScriptExposes an HTTP server to serve the website. Does not require sign up / login and generates session IDs for all users automatically.load-generatorPython/LocustContinuously sends requests imitating realistic user shopping flows to the frontend.paymentJavaScriptCharges the given credit card info (mock/) with the given amount and returns a transaction ID.product-catalogGoProvides the list of products from a JSON file and ability to search products and get individual products.quotePHPCalculates the shipping costs, based on the number of items to be shipped.recommendationPythonRecommends other products based on what’s given in the cart.shippingRustGives shipping cost estimates based on the shopping cart. Ships items to the given address (mock/).react-native-appTypeScriptReact Native mobile application that provides a UI on top of the shopping services.Accounting ServiceAd ServiceCart ServiceCheckout ServiceCurrency ServiceEmail ServiceFraud Detection ServiceFrontendFrontend Proxy (Envoy)Image Provider ServiceKafkaLoad GeneratorPayment ServiceProduct Catalog ServiceQuote ServiceReact Native AppRecommendation ServiceShipping ServiceFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\nAccounting ServiceAd ServiceCart ServiceCheckout ServiceCurrency ServiceEmail ServiceFraud Detection ServiceFrontendFrontend Proxy (Envoy)Image Provider ServiceKafkaLoad GeneratorPayment ServiceProduct Catalog ServiceQuote ServiceReact Native AppRecommendation ServiceShipping Service\n\n\n\nDocsDemoServicesAccountingAccounting ServiceThis service calculates the total amount of sold products. This is only mocked
and received orders are printed out.Accounting ServiceAuto-instrumentationThis service relies on the OpenTelemetry .NET Automatic Instrumentation to
automatically instrument libraries such as Kafka, and to configure the
OpenTelemetry SDK. The instrumentation is added via Nuget package
OpenTelemetry.AutoInstrumentation
and activated using environment variables that are sourced from instrument.sh.
Using this installation approach also guarantees that all instrumentation
dependencies are properly aligned with the application.PublishingAdd --use-current-runtime to the dotnet publish command to distribute
appropriate native runtime components.dotnet publish "./AccountingService.csproj" --use-current-runtime -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 16, 2025: Update services md file to remove service suffix from source link url (#5945) (98a52899)\n\n\n\nDocsDemoServicesAdAd ServiceThis service determines appropriate ads to serve to users based on context keys.
The ads will be for products available in the store.Ad service sourceAuto-instrumentationThis service relies on the OpenTelemetry Java agent to automatically instrument
libraries such as gRPC, and to configure the OpenTelemetry SDK. The agent is
passed into the process using the -javaagent command line argument. Command
line arguments are added through the JAVA_TOOL_OPTIONS in the Dockerfile,
and leveraged during the automatically generated Gradle startup script.ENV JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
TracesAdd attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span from
context.Span span = Span.current();
Adding attributes to a span is accomplished using setAttribute on the span
object. In the getAds function multiple attributes are added to the span.span.setAttribute("app.ads.contextKeys", req.getContextKeysList().toString());
span.setAttribute("app.ads.contextKeys.count", req.getContextKeysCount());
Add span eventsAdding an event to a span is accomplished using addEvent on the span object.
In the getAds function an event with an attribute is added when an exception
is caught.span.addEvent("Error", Attributes.of(AttributeKey.stringKey("exception.message"), e.getMessage()));
Setting span statusIf the result of the operation is an error, the span status should be set
accordingly using setStatus on the span object. In the getAds function the
span status is set when an exception is caught.span.setStatus(StatusCode.ERROR);
Create new spansNew spans can be created and started using
Tracer.spanBuilder("spanName").startSpan(). Newly created spans should be set
into context using Span.makeCurrent(). The getRandomAds function will create
a new span, set it into context, perform an operation, and finally end the span.// create and start a new span manually
Tracer tracer = GlobalOpenTelemetry.getTracer("ad");
Span span = tracer.spanBuilder("getRandomAds").startSpan();

// put the span into context, so if any child span is started the parent will be set properly
try (Scope ignored = span.makeCurrent()) {

  Collection<Ad> allAds = adsMap.values();
  for (int i = 0; i < MAX_ADS_TO_SERVE; i++) {
    ads.add(Iterables.get(allAds, random.nextInt(allAds.size())));
  }
  span.setAttribute("app.ads.count", ads.size());

} finally {
  span.end();
}
MetricsInitializing MetricsSimilar to creating spans, the first step in creating metrics is initializing a
Meter instance, e.g. GlobalOpenTelemetry.getMeter("ad"). From there, use the
various builder methods available on the Meter instance to create the desired
metric instrument, e.g.:meter
  .counterBuilder("app.ads.ad_requests")
  .setDescription("Counts ad requests by request and response type")
  .build();
Current Metrics ProducedNote that all the metric names below appear in Prometheus/Grafana with .
characters transformed to _.Custom metricsThe following custom metrics are currently available:app.ads.ad_requests: A counter of ad requests with dimensions describing
whether the request was targeted with context keys or not, and whether the
response was targeted or random ads.Auto-instrumented metricsThe following auto-instrumented metrics are available for the application:Runtime metrics for the JVM.Latency metrics for RPCsLogsAd Service uses Log4J, which is automatically configured by the OTel Java agent.It includes the trace context in log records, enabling log correlation with
traces.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesCartCart ServiceThis service maintains items placed in the shopping cart by users. It interacts
with a Valkey caching service for fast access to shopping cart data.Cart service sourceNote OpenTelemetry for .NET uses the System.Diagnostic.DiagnosticSource
library as its API instead of the standard OpenTelemetry API for Traces and
Metrics. Microsoft.Extensions.Logging.Abstractions library is used for Logs.TracesInitializing TracingOpenTelemetry is configured in the .NET dependency injection container. The
AddOpenTelemetry() builder method is used to configure desired instrumentation
libraries, add exporters, and set other options. Configuration of the exporter
and resource attributes is performed through environment variables.Action<ResourceBuilder> appResourceBuilder =
    resource => resource
        .AddContainerDetector()
        .AddHostDetector();

builder.Services.AddOpenTelemetry()
    .ConfigureResource(appResourceBuilder)
    .WithTracing(tracerBuilder => tracerBuilder
        .AddSource("OpenTelemetry.Demo.Cart")
        .AddRedisInstrumentation(
            options => options.SetVerboseDatabaseStatements = true)
        .AddAspNetCoreInstrumentation()
        .AddGrpcClientInstrumentation()
        .AddHttpClientInstrumentation()
        .AddOtlpExporter());
Add attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span
(activity) from context.var activity = Activity.Current;
Adding attributes (tags in .NET) to a span (activity) is accomplished using
SetTag on the activity object. In the AddItem function from
services/CartService.cs several attributes are added to the auto-instrumented
span.activity?.SetTag("app.user.id", request.UserId);
activity?.SetTag("app.product.quantity", request.Item.Quantity);
activity?.SetTag("app.product.id", request.Item.ProductId);
Add span eventsAdding span (activity) events is accomplished using AddEvent on the activity
object. In the GetCart function from services/CartService.cs a span event is
added.activity?.AddEvent(new("Fetch cart"));
MetricsInitializing MetricsSimilar to configuring OpenTelemetry Traces, the .NET dependency injection
container requires a call to AddOpenTelemetry(). This builder configures
desired instrumentation libraries, exporters, etc.Action<ResourceBuilder> appResourceBuilder =
    resource => resource
        .AddContainerDetector()
        .AddHostDetector();

builder.Services.AddOpenTelemetry()
    .ConfigureResource(appResourceBuilder)
    .WithMetrics(meterBuilder => meterBuilder
        .AddMeter("OpenTelemetry.Demo.Cart")
        .AddProcessInstrumentation()
        .AddRuntimeInstrumentation()
        .AddAspNetCoreInstrumentation()
        .SetExemplarFilter(ExemplarFilterType.TraceBased)
        .AddOtlpExporter());
ExemplarsExemplars are configured in
the Cart service with trace-based exemplar filter, which enables the
OpenTelemetry SDK to attach exemplars to metrics.First it creates a CartActivitySource, Meter and two Histograms. The
histogram keeps track from the latency of the methods AddItem and GetCart,
as those are two important methods in the Cart service.Those two methods are critical to the Cart service as users shouldn’t wait too
long when adding an item to the cart, or when viewing their cart before moving
to the checkout process.private static readonly ActivitySource CartActivitySource = new("OpenTelemetry.Demo.Cart");
private static readonly Meter CartMeter = new Meter("OpenTelemetry.Demo.Cart");
private static readonly Histogram<long> addItemHistogram = CartMeter.CreateHistogram<long>(
    "app.cart.add_item.latency",
    advice: new InstrumentAdvice<long>
    {
        HistogramBucketBoundaries = [ 500000, 600000, 700000, 800000, 900000, 1000000, 1100000 ]
    });
private static readonly Histogram<long> getCartHistogram = CartMeter.CreateHistogram<long>(
    "app.cart.get_cart.latency",
    advice: new InstrumentAdvice<long>
    {
        HistogramBucketBoundaries = [ 300000, 400000, 500000, 600000, 700000, 800000, 900000 ]
    });
Note that a custom bucket boundary is also defined, as the default values don’t
fit the microseconds results Cart service has.Once the variables are defined, the latency of the execution of each method is
tracked with a StopWatch as follows:var stopwatch = Stopwatch.StartNew();

(method logic)

addItemHistogram.Record(stopwatch.ElapsedTicks);
To connect it all together, in the Traces pipeline, it is required to add the
created source. (Already present in the snippet above, but added here to
reference):.AddSource("OpenTelemetry.Demo.Cart")
And, in the Metrics pipeline, the Meter and the ExemplarFilter:.AddMeter("OpenTelemetry.Demo.Cart")
.SetExemplarFilter(ExemplarFilterType.TraceBased)
To visualize the Exemplars, navigate to Grafana
http://localhost:8080/grafana > Dashboards > Demo > Cart Service Exemplars.Exemplars appear as special “diamond-shaped dots” on the 95th percentile chart
or as small squares on the heatmap chart. Select any exemplar to view its data,
which includes the timestamp of the measurement, the raw value, and the trace
context at the time of recording. The trace_id enables navigation to the
tracing backend (Jaeger, in this case).LogsLogs are configured in the .NET dependency injection container on
LoggingBuilder level by calling AddOpenTelemetry(). This builder configures
desired options, exporters, etc.builder.Logging
    .AddOpenTelemetry(options => options.AddOtlpExporter());
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesCheckoutCheckout ServiceThis service is responsible to process a checkout order from the user. The
checkout service will call many other services in order to process an order.Checkout service sourceTracesInitializing TracingThe OpenTelemetry SDK is initialized from main using the initTracerProvider
function.func initTracerProvider() *sdktrace.TracerProvider {
    ctx := context.Background()

    exporter, err := otlptracegrpc.New(ctx)
    if err != nil {
        log.Fatal(err)
    }
    tp := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exporter),
        sdktrace.WithResource(initResource()),
    )
    otel.SetTracerProvider(tp)
    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
    return tp
}
You should call TracerProvider.Shutdown() when your service is shutdown to
ensure all spans are exported. This service makes that call as part of a
deferred function in maintp := initTracerProvider()
defer func() {
    if err := tp.Shutdown(context.Background()); err != nil {
        log.Printf("Error shutting down tracer provider: %v", err)
    }
}()
Adding gRPC auto-instrumentationThis service receives gRPC requests, which are instrumented in the main function
as part of the gRPC server creation.var srv = grpc.NewServer(
    grpc.StatsHandler(otelgrpc.NewServerHandler()),
)
This service will issue several outgoing gRPC calls, which are all instrumented
by wrapping the gRPC client with instrumentationfunc createClient(ctx context.Context, svcAddr string) (*grpc.ClientConn, error) {
    return grpc.DialContext(ctx, svcAddr,
        grpc.WithTransportCredentials(insecure.NewCredentials()),
        grpc.WithStatsHandler(otelgrpc.NewClientHandler()),
    )
}
Adding Kafka ( Sarama ) auto-instrumentationThis service will write the processed results onto a Kafka topic which will then
be in turn be processed by other microservices. To instrument the Kafka client
the Producer has to be wrapped after it has been created.saramaConfig := sarama.NewConfig()
producer, err := sarama.NewAsyncProducer(brokers, saramaConfig)
if err != nil {
    return nil, err
}
producer = otelsarama.WrapAsyncProducer(saramaConfig, producer)
Add attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span from
context.span := trace.SpanFromContext(ctx)
Adding attributes to a span is accomplished using SetAttributes on the span
object. In the PlaceOrder function several attributes are added to the span.span.SetAttributes(
    attribute.String("app.order.id", orderID.String()), shippingTrackingAttribute,
    attribute.Float64("app.shipping.amount", shippingCostFloat),
    attribute.Float64("app.order.amount", totalPriceFloat),
    attribute.Int("app.order.items.count", len(prep.orderItems)),
)
Add span eventsAdding span events is accomplished using AddEvent on the span object. In the
PlaceOrder function several span events are added. Some events have additional
attributes, others do not.Adding a span event without attributes:span.AddEvent("prepared")
Adding a span event with additional attributes:span.AddEvent("charged",
    trace.WithAttributes(attribute.String("app.payment.transaction.id", txID)))
MetricsInitializing MetricsThe OpenTelemetry SDK is initialized from main using the initMeterProvider
function.func initMeterProvider() *sdkmetric.MeterProvider {
    ctx := context.Background()

    exporter, err := otlpmetricgrpc.New(ctx)
    if err != nil {
        log.Fatalf("new otlp metric grpc exporter failed: %v", err)
    }

    mp := sdkmetric.NewMeterProvider(sdkmetric.WithReader(sdkmetric.NewPeriodicReader(exporter)))
    global.SetMeterProvider(mp)
    return mp
}
You should call MeterProvider.Shutdown() when your service is shutdown to
ensure all records are exported. This service makes that call as part of a
deferred function in mainmp := initMeterProvider()
defer func() {
    if err := mp.Shutdown(context.Background()); err != nil {
        log.Printf("Error shutting down meter provider: %v", err)
    }
}()
Adding golang runtime auto-instrumentationGolang runtime are instrumented in the main functionerr := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))
if err != nil {
    log.Fatal(err)
}
LogsTBDFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 16, 2025: Update services md file to remove service suffix from source link url (#5945) (98a52899)\n\n\n\nDocsDemoServicesCurrencyCurrency ServiceThis service provides functionality to convert amounts between different
currencies.Currency service sourceTracesInitializing TracingThe OpenTelemetry SDK is initialized from main using the initTracer function
defined in tracer_common.hvoid initTracer()
{
  auto exporter = opentelemetry::exporter::otlp::OtlpGrpcExporterFactory::Create();
  auto processor =
      opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(std::move(exporter));
  std::vector<std::unique_ptr<opentelemetry::sdk::trace::SpanProcessor>> processors;
  processors.push_back(std::move(processor));
  std::shared_ptr<opentelemetry::sdk::trace::TracerContext> context =
      opentelemetry::sdk::trace::TracerContextFactory::Create(std::move(processors));
  std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
      opentelemetry::sdk::trace::TracerProviderFactory::Create(context);
 // Set the global trace provider
  opentelemetry::trace::Provider::SetTracerProvider(provider);

 // set global propagator
  opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(
      opentelemetry::nostd::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>(
          new opentelemetry::trace::propagation::HttpTraceContext()));
}
Create new spansNew spans can be created and started using
Tracer->StartSpan("spanName", attributes, options). After a span is created
you need to start and put it into active context using
Tracer->WithActiveSpan(span). You can find an example of this in the Convert
function.std::string span_name = "CurrencyService/Convert";
auto span =
    get_tracer("currency")->StartSpan(span_name,
                                  {{SemanticConventions::kRpcSystem, "grpc"},
                                   {SemanticConventions::kRpcService, "oteldemo.CurrencyService"},
                                   {SemanticConventions::kRpcMethod, "Convert"},
                                   {SemanticConventions::kRpcGrpcStatusCode, 0}},
                                  options);
auto scope = get_tracer("currency")->WithActiveSpan(span);
Adding attributes to spansYou can add an attribute to a span using Span->SetAttribute(key, value).span->SetAttribute("app.currency.conversion.from", from_code);
span->SetAttribute("app.currency.conversion.to", to_code);
Add span eventsAdding span events is accomplished using Span->AddEvent(name).span->AddEvent("Conversion successful, response sent back");
Set span statusMake sure to set your span status to Ok, or Error accordingly. You can do
this using Span->SetStatus(status)span->SetStatus(StatusCode::kOk);
Tracing context propagationIn C++ propagation is not automatically handled. You need to extract it from the
caller and inject the propagation context into subsequent spans. The
GrpcServerCarrier class defines a method to extract context from inbound gRPC
requests which is leveraged in the service call implementations.The GrpcServerCarrier class is defined in tracer_common.h as follows:class GrpcServerCarrier : public opentelemetry::context::propagation::TextMapCarrier
{
public:
  GrpcServerCarrier(ServerContext *context) : context_(context) {}
  GrpcServerCarrier() = default;
  virtual opentelemetry::nostd::string_view Get(
      opentelemetry::nostd::string_view key) const noexcept override
  {
    auto it = context_->client_metadata().find(key.data());
    if (it != context_->client_metadata().end())
    {
      return it->second.data();
    }
    return "";
  }

  virtual void Set(opentelemetry::nostd::string_view key,
                   opentelemetry::nostd::string_view value) noexcept override
  {
   // Not required for server
  }

  ServerContext *context_;
};
This class is leveraged in the Convert method to extract context and create a
StartSpanOptions object to contain the right context which is used when
creating new spans.StartSpanOptions options;
options.kind = SpanKind::kServer;
GrpcServerCarrier carrier(context);

auto prop        = context::propagation::GlobalTextMapPropagator::GetGlobalPropagator();
auto current_ctx = context::RuntimeContext::GetCurrent();
auto new_context = prop->Extract(carrier, current_ctx);
options.parent   = GetSpan(new_context)->GetContext();
MetricsInitializing MetricsThe OpenTelemetry MeterProvider is initialized from main() using the
initMeter() function defined in meter_common.h.void initMeter()
{
  // Build MetricExporter
  otlp_exporter::OtlpGrpcMetricExporterOptions otlpOptions;
  auto exporter = otlp_exporter::OtlpGrpcMetricExporterFactory::Create(otlpOptions);

  // Build MeterProvider and Reader
  metric_sdk::PeriodicExportingMetricReaderOptions options;
  std::unique_ptr<metric_sdk::MetricReader> reader{
      new metric_sdk::PeriodicExportingMetricReader(std::move(exporter), options) };
  auto provider = std::shared_ptr<metrics_api::MeterProvider>(new metric_sdk::MeterProvider());
  auto p = std::static_pointer_cast<metric_sdk::MeterProvider>(provider);
  p->AddMetricReader(std::move(reader));
  metrics_api::Provider::SetMeterProvider(provider);
}
Starting IntCounterA global currency_counter variable is created at main() calling the function
initIntCounter() defined in meter_common.h.nostd::unique_ptr<metrics_api::Counter<uint64_t>> initIntCounter()
{
  std::string counter_name = name + "_counter";
  auto provider = metrics_api::Provider::GetMeterProvider();
  nostd::shared_ptr<metrics_api::Meter> meter = provider->GetMeter(name, version);
  auto int_counter = meter->CreateUInt64Counter(counter_name);
  return int_counter;
}
Counting currency conversion requestsThe method CurrencyCounter() is implemented as follows:void CurrencyCounter(const std::string& currency_code)
{
    std::map<std::string, std::string> labels = { {"currency_code", currency_code} };
    auto labelkv = common::KeyValueIterableView<decltype(labels)>{ labels };
    currency_counter->Add(1, labelkv);
}
Every time the function Convert() is called, the currency code received as
to_code is used to count the conversions.CurrencyCounter(to_code);
LogsThe OpenTelemetry LoggerProvider is initialized from main() using the
initLogger() function defined in logger_common.h.void initLogger() {
  otlp::OtlpGrpcLogRecordExporterOptions loggerOptions;
  auto exporter  = otlp::OtlpGrpcLogRecordExporterFactory::Create(loggerOptions);
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  std::vector<std::unique_ptr<logs_sdk::LogRecordProcessor>> processors;
  processors.push_back(std::move(processor));
  auto context = logs_sdk::LoggerContextFactory::Create(std::move(processors));
  std::shared_ptr<logs::LoggerProvider> provider = logs_sdk::LoggerProviderFactory::Create(std::move(context));
  opentelemetry::logs::Provider::SetLoggerProvider(provider);
}
Using the LoggerProviderThe initialized Logger Provider is called from main in server.cpp:logger = getLogger(name);
It assigns the logger to a local variable called logger:nostd::shared_ptr<opentelemetry::logs::Logger> logger;
Which is then used throughout the code whenever we need to log a line:logger->Info(std::string(__func__) + " conversion successful");
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesEmailEmail ServiceThis service will send a confirmation email to the user when an order is placed.Email service sourceInitializing TracingYou will need to require the core OpenTelemetry SDK and exporter Ruby gems, as
well as any gem that will be needed for auto-instrumentation libraries (ie:
Sinatra)require "opentelemetry/sdk"
require "opentelemetry/exporter/otlp"
require "opentelemetry/instrumentation/sinatra"
The Ruby SDK uses OpenTelemetry standard environment variables to configure OTLP
export, resource attributes, and service name automatically. When initializing
the OpenTelemetry SDK, you will also specify which auto-instrumentation
libraries to leverage (ie: Sinatra)OpenTelemetry::SDK.configure do |c|
  c.use "OpenTelemetry::Instrumentation::Sinatra"
end
TracesAdd attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span from
context.current_span = OpenTelemetry::Trace.current_span
Adding multiple attributes to a span is accomplished using add_attributes on
the span object.current_span.add_attributes({
  "app.order.id" => data.order.order_id,
})
Adding only a single attribute can be accomplished using set_attribute on the
span object.span.set_attribute("app.email.recipient", data.email)
Create new spansNew spans can be created and placed into active context using in_span from an
OpenTelemetry Tracer object. When used in conjunction with a do..end block,
the span will automatically be ended when the block ends execution.tracer = OpenTelemetry.tracer_provider.tracer('email')
tracer.in_span("send_email") do |span|
  # logic in context of span here
end
MetricsTBDLogsTBDFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesFraud DetectionFraud Detection ServiceThis service analyses incoming orders and detects malicious customers. This is
only mocked and received orders are printed out.Fraud Detection service sourceAuto-instrumentationThis service relies on the OpenTelemetry Java agent to automatically instrument
libraries such as Kafka, and to configure the OpenTelemetry SDK. The agent is
passed into the process using the -javaagent command line argument. Command
line arguments are added through the JAVA_TOOL_OPTIONS in the Dockerfile,
and leveraged during the automatically generated Gradle startup script.ENV JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified April 17, 2025: [demo] add source links for fraud detection and frontend proxy (#6716) (90cfef1d)\n\n\n\nDocsDemoServicesFrontendFrontendThe frontend is responsible to provide a UI for users, as well as an API
leveraged by the UI or other clients. The application is based on
Next.JS to provide a React web-based UI and API routes.Frontend sourceServer InstrumentationIt is recommended to use a Node required module when starting your Node.js
application to initialize the SDK and auto-instrumentation. When initializing
the OpenTelemetry Node.js SDK, you optionally specify which auto-instrumentation
libraries to leverage, or make use of the getNodeAutoInstrumentations()
function which includes most popular frameworks. The
utils/telemetry/Instrumentation.js file contains all code required to
initialize the SDK and auto-instrumentation based on standard
OpenTelemetry environment variables
for OTLP export, resource attributes, and service name.const FrontendTracer = async () => {
  const { ZoneContextManager } = await import('@opentelemetry/context-zone');

  let resource = new Resource({
    [SEMRESATTRS_SERVICE_NAME]: NEXT_PUBLIC_OTEL_SERVICE_NAME,
  });
  const detectedResources = detectResourcesSync({
    detectors: [browserDetector],
  });
  resource = resource.merge(detectedResources);

  const provider = new WebTracerProvider({
    resource,
    spanProcessors: [
      new SessionIdProcessor(),
      new BatchSpanProcessor(
        new OTLPTraceExporter({
          url:
            NEXT_PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||
            'http://localhost:4318/v1/traces',
        }),
        {
          scheduledDelayMillis: 500,
        },
      ),
    ],
  });

  const contextManager = new ZoneContextManager();

  provider.register({
    contextManager,
    propagator: new CompositePropagator({
      propagators: [
        new W3CBaggagePropagator(),
        new W3CTraceContextPropagator(),
      ],
    }),
  });

  registerInstrumentations({
    tracerProvider: provider,
    instrumentations: [
      getWebAutoInstrumentations({
        '@opentelemetry/instrumentation-fetch': {
          propagateTraceHeaderCorsUrls: /.*/,
          clearTimingResources: true,
          applyCustomAttributesOnSpan(span) {
            span.setAttribute('app.synthetic_request', IS_SYNTHETIC_REQUEST);
          },
        },
      }),
    ],
  });
};
Node required modules are loaded using the --require command line argument.
This can be done in the scripts.start section of package.json and starting
the application using npm start."scripts": {
  "start": "node --require ./Instrumentation.js server.js",
},
TracesSpan Exceptions and statusYou can use the span object’s recordException function to create a span event
with the full stack trace of a handled error. When recording an exception also
be sure to set the span’s status accordingly. You can see this in the catch
block of the NextApiHandler function in the
utils/telemetry/InstrumentationMiddleware.ts file.span.recordException(error as Exception);
span.setStatus({ code: SpanStatusCode.ERROR });
Create new spansNew spans can be created and started using
Tracer.startSpan("spanName", options). Several options can be used to specify
how the span can be created.root: true will create a new trace, setting this span as the root.links are used to specify links to other spans (even within another trace)
that should be referenced.attributes are key/value pairs added to a span, typically used for
application context.span = tracer.startSpan(`HTTP ${method}`, {
  root: true,
  kind: SpanKind.SERVER,
  links: [{ context: syntheticSpan.spanContext() }],
  attributes: {
    'app.synthetic_request': true,
    [SEMATTRS_HTTP_TARGET]: target,
    [SEMATTRS_HTTP_STATUS_CODE]: response.statusCode,
    [SEMATTRS_HTTP_METHOD]: method,
    [SEMATTRS_HTTP_USER_AGENT]: headers['user-agent'] || '',
    [SEMATTRS_HTTP_URL]: `${headers.host}${url}`,
    [SEMATTRS_HTTP_FLAVOR]: httpVersion,
  },
});
Browser InstrumentationThe web-based UI that the frontend provides is also instrumented for web
browsers. OpenTelemetry instrumentation is included as part of the Next.js App
component in pages/_app.tsx. Here instrumentation is imported and initialized.import FrontendTracer from '../utils/telemetry/FrontendTracer';

if (typeof window !== 'undefined') FrontendTracer();
The utils/telemetry/FrontendTracer.ts file contains code to initialize a
TracerProvider, establish an OTLP export, register trace context propagators,
and register web specific auto-instrumentation libraries. Since the browser will
send data to an OpenTelemetry Collector that will likely be on a separate
domain, CORS headers are also setup accordingly.As part of the changes to carry over the synthetic_request attribute flag for
the backend services, the applyCustomAttributesOnSpan configuration function
has been added to the instrumentation-fetch library custom span attributes
logic that way every browser-side span will include it.import {
  CompositePropagator,
  W3CBaggagePropagator,
  W3CTraceContextPropagator,
} from '@opentelemetry/core';
import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';
import { registerInstrumentations } from '@opentelemetry/instrumentation';
import { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';
import { Resource } from '@opentelemetry/resources';
import { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';

const FrontendTracer = async () => {
  const { ZoneContextManager } = await import('@opentelemetry/context-zone');

  const provider = new WebTracerProvider({
    resource: new Resource({
      [SEMRESATTRS_SERVICE_NAME]: process.env.NEXT_PUBLIC_OTEL_SERVICE_NAME,
    }),
    spanProcessors: [new SimpleSpanProcessor(new OTLPTraceExporter())],
  });

  const contextManager = new ZoneContextManager();

  provider.register({
    contextManager,
    propagator: new CompositePropagator({
      propagators: [
        new W3CBaggagePropagator(),
        new W3CTraceContextPropagator(),
      ],
    }),
  });

  registerInstrumentations({
    tracerProvider: provider,
    instrumentations: [
      getWebAutoInstrumentations({
        '@opentelemetry/instrumentation-fetch': {
          propagateTraceHeaderCorsUrls: /.*/,
          clearTimingResources: true,
          applyCustomAttributesOnSpan(span) {
            span.setAttribute('app.synthetic_request', 'false');
          },
        },
      }),
    ],
  });
};

export default FrontendTracer;
MetricsTBDLogsTBDBaggageOpenTelemetry Baggage is leveraged in the frontend to check if the request is
synthetic (from the load generator). Synthetic requests will force the creation
of a new trace. The root span from the new trace will contain many of the same
attributes as an HTTP request instrumented span.To determine if a Baggage item is set, you can leverage the propagation API to
parse the Baggage header, and leverage the baggage API to get or set entries.const baggage = propagation.getBaggage(context.active());
if (baggage?.getEntry("synthetic_request")?.value == "true") {...}
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 28, 2025: [demo] update frontend browser sdk code (#6437) (afb7e18f)\n\n\n\nDocsDemoServicesFrontend ProxyFrontend Proxy (Envoy)The frontend proxy is used as a reverse proxy for user-facing web interfaces
such as the frontend, Jaeger, Grafana, load generator, and feature flag service.Frontend proxy configuration sourceEnabling OpenTelemetryNOTE: Only non-synthetic requests will trigger the envoy tracing.In order to enable Envoy to produce spans whenever receiving a request, the
following configuration is required:static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: ${ENVOY_PORT}
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                tracing:
                  provider:
                    name: envoy.tracers.opentelemetry
                    typed_config:
                      '@type': type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                      grpc_service:
                        envoy_grpc:
                          cluster_name: opentelemetry_collector
                        timeout: 0.250s
                      service_name: frontend-proxy

  clusters:
    - name: opentelemetry_collector
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: opentelemetry_collector
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${OTEL_COLLECTOR_HOST}
                      port_value: ${OTEL_COLLECTOR_PORT}
Where OTEL_COLLECTOR_HOST and OTEL_COLLECTOR_PORT are passed via environment
variables.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified April 17, 2025: [demo] add source links for fraud detection and frontend proxy (#6716) (90cfef1d)\n\n\n\nDocsDemoServicesImage ProviderImage Provider ServiceThis service provides the images which are used in the frontend. The images are
statically hosted on a NGINX instance. The NGINX server is instrumented with the
nginx-otel module.For details, see the
image provider service source.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 30, 2025: Demo repo links: fix & check them all, update refcache (#6124) (66bbef71)\n\n\n\nDocsDemoServicesKafkaKafkaThis is used as a message queue service to connect the checkout service with the
accounting and fraud detection services.Kafka service sourceAuto-instrumentationThis service relies on the OpenTelemetry Java agent and the built in
JMX Metric Insight Module
to capture
Kafka broker metrics
and send them off to the collector via OTLP.The agent is passed into the process using the -javaagent command line
argument. Command line arguments are added through the KAFKA_OPTS in the
Dockerfile.ENV KAFKA_OPTS="-javaagent:/tmp/opentelemetry-javaagent.jar -Dotel.jmx.target.system=kafka-broker"
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified October 30, 2023: Updates for text linting: Java agent, agent, OpAMP (#3429) (e29d6362)\n\n\n\nDocsDemoServicesLoad GeneratorLoad GeneratorThe load generator is based on the Python load testing framework
Locust. By default it will simulate users requesting
several different routes from the frontend.Load generator sourceTracesInitializing TracingSince this service is a
locustfile, the
OpenTelemetry SDK is initialized after the import statements. This code will
create a tracer provider, and establish a Span Processor to use. Export
endpoints, resource attributes, and service name are automatically set using
OpenTelemetry environment variables.tracer_provider = TracerProvider()
trace.set_tracer_provider(tracer_provider)
tracer_provider.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))
Adding instrumentation librariesTo add instrumentation libraries you need to import the Instrumentors for each
library in your Python code. Locust uses the Requests andURLLib3 libraries,
so we will import their Instrumentors.from opentelemetry.instrumentation.requests import RequestsInstrumentor
from opentelemetry.instrumentation.urllib3 import URLLib3Instrumentor
In your code before the library is leveraged, the Instrumentor needs to be
initialized by calling instrument().RequestsInstrumentor().instrument()
URLLib3Instrumentor().instrument()
Once initialized, every Locust requests for this load generator will have their
own trace with a span for each of the Requests and URLLib3 libraries.MetricsTBDLogsTBDBaggageOpenTelemetry Baggage is used by the load generator to indicate that the traces
are synthetically generated. This is done in the on_start function by creating
a context object containing the baggage item, and associating that context for
all tasks by the load generator.ctx = baggage.set_baggage("synthetic_request", "true")
context.attach(ctx)
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesPaymentPayment ServiceThis service is responsible to process credit card payments for orders. It will
return an error if the credit card is invalid or the payment cannot be
processed.Payment service sourceInitializing OpenTelemetryIt is recommended to require Node.js app using an initializer file that
initializes the SDK and auto-instrumentation. When initializing the
OpenTelemetry Node.js SDK in that module, you optionally specify which
auto-instrumentation libraries to leverage, or make use of the
getNodeAutoInstrumentations() function which includes most popular frameworks.
The below example of an initializer file (opentelemetry.js) contains all code
required to initialize the SDK and auto-instrumentation based on standard
OpenTelemetry environment variables for OTLP export, resource attributes, and
service name. It then requires your app at ./index.js to start it up once
the SDK is initialized.const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');
const {
  OTLPTraceExporter,
} = require('@opentelemetry/exporter-trace-otlp-grpc');
const {
  OTLPMetricExporter,
} = require('@opentelemetry/exporter-metrics-otlp-grpc');
const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');
const {
  alibabaCloudEcsDetector,
} = require('@opentelemetry/resource-detector-alibaba-cloud');
const {
  awsEc2Detector,
  awsEksDetector,
} = require('@opentelemetry/resource-detector-aws');
const {
  containerDetector,
} = require('@opentelemetry/resource-detector-container');
const { gcpDetector } = require('@opentelemetry/resource-detector-gcp');
const {
  envDetector,
  hostDetector,
  osDetector,
  processDetector,
} = require('@opentelemetry/resources');

const sdk = new opentelemetry.NodeSDK({
  traceExporter: new OTLPTraceExporter(),
  instrumentations: [
    getNodeAutoInstrumentations({
      // only instrument fs if it is part of another trace
      '@opentelemetry/instrumentation-fs': {
        requireParentSpan: true,
      },
    }),
  ],
  metricReader: new PeriodicExportingMetricReader({
    exporter: new OTLPMetricExporter(),
  }),
  resourceDetectors: [
    containerDetector,
    envDetector,
    hostDetector,
    osDetector,
    processDetector,
    alibabaCloudEcsDetector,
    awsEksDetector,
    awsEc2Detector,
    gcpDetector,
  ],
});

sdk.start();
You can then use opentelemetry.js to start your app. This can be done in the
ENTRYPOINT command for the service’s Dockerfile.ENTRYPOINT [ "node", "--require", "./opentelemetry.js", "./index.js" ]
TracesAdd attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span from
context.const span = opentelemetry.trace.getActiveSpan();
Adding attributes to a span is accomplished using setAttributes on the span
object. In the chargeServiceHandler function an attributes is added to the
span as an anonymous object (map) for the attribute key/values pair.span.setAttributes({
  'app.payment.amount': parseFloat(`${amount.units}.${amount.nanos}`),
});
Span Exceptions and statusYou can use the span object’s recordException function to create a span event
with the full stack trace of a handled error. When recording an exception also
be sure to set the span’s status accordingly. You can see this in the
chargeServiceHandler functionspan.recordException(err);
span.setStatus({ code: opentelemetry.SpanStatusCode.ERROR });
MetricsCreating Meters and InstrumentsMeters can be created using the @opentelemetry/api-metrics package. You can
create meters as seen below, and then use the created meter to create
instruments.const { metrics } = require('@opentelemetry/api-metrics');

const meter = metrics.getMeter('payment');
const transactionsCounter = meter.createCounter('app.payment.transactions');
Meters and Instruments are supposed to stick around. This means you should get a
Meter or an Instrument once , and then re-use it as needed, if possible.LogsTBDBaggageOpenTelemetry Baggage is leveraged in this service to check if the request is
synthetic (from the load generator). Synthetic requests will not be charged,
which is indicated with a span attribute. The charge.js file which does the
actual payment processing, has logic to check the baggage.// check baggage for synthetic_request=true, and add charged attribute accordingly
const baggage = propagation.getBaggage(context.active());
if (
  baggage &&
  baggage.getEntry('synthetic_request') &&
  baggage.getEntry('synthetic_request').value == 'true'
) {
  span.setAttribute('app.payment.charged', false);
} else {
  span.setAttribute('app.payment.charged', true);
}
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesProduct CatalogProduct Catalog ServiceThis service is responsible to return information about products. The service
can be used to get all products, search for specific products, or return details
about any single product.Product Catalog service sourceTracesInitializing TracingThe OpenTelemetry SDK is initialized from main using the initTracerProvider
function.func initTracerProvider() *sdktrace.TracerProvider {
    ctx := context.Background()

    exporter, err := otlptracegrpc.New(ctx)
    if err != nil {
        log.Fatalf("OTLP Trace gRPC Creation: %v", err)
    }
    tp := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exporter),
        sdktrace.WithResource(initResource()),
    )
    otel.SetTracerProvider(tp)
    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
    return tp
}
You should call TracerProvider.Shutdown() when your service is shutdown to
ensure all spans are exported. This service makes that call as part of a
deferred function in maintp := InitTracerProvider()
defer func() {
    if err := tp.Shutdown(context.Background()); err != nil {
        log.Fatalf("Tracer Provider Shutdown: %v", err)
    }
}()
Adding gRPC auto-instrumentationThis service receives gRPC requests, which are instrumented in the main function
as part of the gRPC server creation.srv := grpc.NewServer(
    grpc.StatsHandler(otelgrpc.NewServerHandler()),
)
This service will issue outgoing gRPC calls, which are all instrumented by
wrapping the gRPC client with instrumentation.func createClient(ctx context.Context, svcAddr string) (*grpc.ClientConn, error) {
    return grpc.DialContext(ctx, svcAddr,
        grpc.WithTransportCredentials(insecure.NewCredentials()),
        grpc.WithStatsHandler(otelgrpc.NewClientHandler()),
    )
}
Add attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span from
context.span := trace.SpanFromContext(ctx)
Adding attributes to a span is accomplished using SetAttributes on the span
object. In the GetProduct function an attribute for the product ID is added to
the span.span.SetAttributes(
    attribute.String("app.product.id", req.Id),
)
Setting span statusThis service can catch and handle an error condition based on a feature flag. In
an error condition, the span status is set accordingly using SetStatus on the
span object. You can see this in the GetProduct function.msg := fmt.Sprintf("Error: ProductCatalogService Fail Feature Flag Enabled")
span.SetStatus(otelcodes.Error, msg)
Add span eventsAdding span events is accomplished using AddEvent on the span object. In the
GetProduct function a span event is added when an error condition is handled,
or when a product is successfully found.span.AddEvent(msg)
MetricsInitializing MetricsThe OpenTelemetry SDK is initialized from main using the initMeterProvider
function.func initMeterProvider() *sdkmetric.MeterProvider {
    ctx := context.Background()

    exporter, err := otlpmetricgrpc.New(ctx)
    if err != nil {
        log.Fatalf("new otlp metric grpc exporter failed: %v", err)
    }

    mp := sdkmetric.NewMeterProvider(sdkmetric.WithReader(sdkmetric.NewPeriodicReader(exporter)))
    global.SetMeterProvider(mp)
    return mp
}
You should call initMeterProvider.Shutdown() when your service is shutdown to
ensure all records are exported. This service makes that call as part of a
deferred function in main.mp := initMeterProvider()
defer func() {
    if err := mp.Shutdown(context.Background()); err != nil {
        log.Fatalf("Error shutting down meter provider: %v", err)
    }
}()
Adding golang runtime auto-instrumentationGolang runtime is instrumented in the main functionerr := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))
if err != nil {
    log.Fatal(err)
}
LogsTBDFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 16, 2025: Update services md file to remove service suffix from source link url (#5945) (98a52899)\n\n\n\nDocsDemoServicesQuoteQuote ServiceThis service is responsible for calculating shipping costs, based on the number
of items to be shipped. The quote service is called from Shipping Service via
HTTP.The Quote Service is implemented using the Slim framework and php-di for
managing the Dependency Injection.The PHP instrumentation may vary when using a different framework.Quote service sourceTracesInitializing TracingIn this demo, the OpenTelemetry SDK has been automatically created as part of
SDK autoloading, which happens as part of composer autoloading.This is enabled by setting the environment variable
OTEL_PHP_AUTOLOAD_ENABLED=true.require __DIR__ . '/../vendor/autoload.php';
There are multiple ways to create or obtain a Tracer, in this example we
obtain one from the global tracer provider which was initialized above, as part
of SDK autoloading:$tracer = Globals::tracerProvider()->getTracer('manual-instrumentation');
Manually creating spansCreating a span manually can be done via a Tracer. The span will be default be
a child of the active span in the current execution context:$span = Globals::tracerProvider()
    ->getTracer('manual-instrumentation')
    ->spanBuilder('calculate-quote')
    ->setSpanKind(SpanKind::KIND_INTERNAL)
    ->startSpan();
/* calculate quote */
$span->end();
Add span attributesYou can obtain the current span using OpenTelemetry\API\Trace\Span.$span = Span::getCurrent();
Adding attributes to a span is accomplished using setAttribute on the span
object. In the calculateQuote function 2 attributes are added to the
childSpan.$childSpan->setAttribute('app.quote.items.count', $numberOfItems);
$childSpan->setAttribute('app.quote.cost.total', $quote);
Add span eventsAdding span events is accomplished using addEvent on the span object. In the
getquote route span events are added. Some events have additional attributes,
others do not.Adding a span event without attributes:$span->addEvent('Received get quote request, processing it');
Adding a span event with additional attributes:$span->addEvent('Quote processed, response sent back', [
    'app.quote.cost.total' => $payload
]);
MetricsIn this demo, metrics are emitted by the batch trace and logs processors. The
metrics describe the internal state of the processor, such as number of exported
spans or logs, the queue limit, and queue usage.You can enable metrics by setting the environment variable
OTEL_PHP_INTERNAL_METRICS_ENABLED to true.A manual metric is also emitted, which counts the number of quotes generated,
including an attribute for the number of items.A counter is created from the globally configured Meter Provider, and is
incremented each time a quote is generated:static $counter;
$counter ??= Globals::meterProvider()
    ->getMeter('quotes')
    ->createCounter('quotes', 'quotes', 'number of quotes calculated');
$counter->add(1, ['number_of_items' => $numberOfItems]);
Metrics accumulate and are exported periodically based on the value configured
in OTEL_METRIC_EXPORT_INTERVAL.LogsThe quote service emits a log message after a quote is calculated. The Monolog
logging package is configured with a
Logs Bridge which converts
Monolog logs into the OpenTelemetry format. Logs sent to this logger will be
exported via the globally configured OpenTelemetry logger.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 16, 2025: Update services md file to remove service suffix from source link url (#5945) (98a52899)\n\n\n\nDocsDemoServicesReact Native AppReact Native AppThe React Native app provides a mobile UI for users on Android and iOS devices
to interact with the demo’s services. It is built with
Expo and uses Expo’s
file-based routing to layout the screens for the app.React Native app sourceInstrumentationThe application uses the OpenTelemetry packages to instrument the application at
the JS layer.ImportantThe JS OTel packages are supported for node and web environments. While they
work for React Native as well, they are not explicitly supported for that
environment, where they might break compatibility with minor version updates or
require workarounds. Building JS OTel package support for React Native is an
area of active development.The main entry point for the application is app/_layout.tsx where a hook is
used to initialize the instrumentation and make sure it is loaded before
displaying the UI:import { useTracer } from '@/hooks/useTracer';

const { loaded: tracerLoaded } = useTracer();
hooks/useTracer.ts contains all the code for setting up instrumentation
including initializing a TracerProvider, establishing an OTLP export,
registering trace context propagators, and registering auto-instrumentation of
network requests.import {
  CompositePropagator,
  W3CBaggagePropagator,
  W3CTraceContextPropagator,
} from '@opentelemetry/core';
import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';
import { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';
import { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';
import { registerInstrumentations } from '@opentelemetry/instrumentation';
import { Resource } from '@opentelemetry/resources';
import {
  ATTR_DEVICE_ID,
  ATTR_OS_NAME,
  ATTR_OS_VERSION,
  ATTR_SERVICE_NAME,
  ATTR_SERVICE_VERSION,
} from '@opentelemetry/semantic-conventions/incubating';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import getLocalhost from '@/utils/Localhost';
import { useEffect, useState } from 'react';
import {
  getDeviceId,
  getSystemVersion,
  getVersion,
} from 'react-native-device-info';
import { Platform } from 'react-native';
import { SessionIdProcessor } from '@/utils/SessionIdProcessor';

const Tracer = async () => {
  const localhost = await getLocalhost();

  const resource = new Resource({
    [ATTR_SERVICE_NAME]: 'react-native-app',
    [ATTR_OS_NAME]: Platform.OS,
    [ATTR_OS_VERSION]: getSystemVersion(),
    [ATTR_SERVICE_VERSION]: getVersion(),
    [ATTR_DEVICE_ID]: getDeviceId(),
  });

  const provider = new WebTracerProvider({
    resource,
    spanProcessors: [
      new BatchSpanProcessor(
        new OTLPTraceExporter({
          url: `http://${localhost}:${process.env.EXPO_PUBLIC_FRONTEND_PROXY_PORT}/otlp-http/v1/traces`,
        }),
        {
          scheduledDelayMillis: 500,
        },
      ),
      new SessionIdProcessor(),
    ],
  });

  provider.register({
    propagator: new CompositePropagator({
      propagators: [
        new W3CBaggagePropagator(),
        new W3CTraceContextPropagator(),
      ],
    }),
  });

  registerInstrumentations({
    instrumentations: [
      // Some tiptoeing required here, propagateTraceHeaderCorsUrls is required to make the instrumentation
      // work in the context of a mobile app even though we are not making CORS requests. `clearTimingResources` must
      // be turned off to avoid using the web-only Performance API
      new FetchInstrumentation({
        propagateTraceHeaderCorsUrls: /.*/,
        clearTimingResources: false,
      }),

      // The React Native implementation of fetch is simply a polyfill on top of XMLHttpRequest:
      // https://github.com/facebook/react-native/blob/7ccc5934d0f341f9bc8157f18913a7b340f5db2d/packages/react-native/Libraries/Network/fetch.js#L17
      // Because of this when making requests using `fetch` there will an additional span created for the underlying
      // request made with XMLHttpRequest. Since in this demo calls to /api/ are made using fetch, turn off
      // instrumentation for that path to avoid the extra spans.
      new XMLHttpRequestInstrumentation({
        ignoreUrls: [/\/api\/.*/],
      }),
    ],
  });
};

export interface TracerResult {
  loaded: boolean;
}

export const useTracer = (): TracerResult => {
  const [loaded, setLoaded] = useState<boolean>(false);

  useEffect(() => {
    if (!loaded) {
      Tracer()
        .catch(() => console.warn('failed to setup tracer'))
        .finally(() => setLoaded(true));
    }
  }, [loaded]);

  return {
    loaded,
  };
};
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 1, 2025: [CI] Page-local dictionary normalization: drop unused words and duplicates (now case-insensitive compare) (#6165) (748555c2)\n\n\n\nDocsDemoServicesRecommendationRecommendation ServiceThis service is responsible to get a list of recommended products for the user
based on existing product IDs the user is browsing.Recommendation service sourceAuto-instrumentationThis Python based service, makes use of the OpenTelemetry auto-instrumentor for
Python, accomplished by leveraging the opentelemetry-instrument Python wrapper
to run the scripts. This can be done in the ENTRYPOINT command for the
service’s Dockerfile.ENTRYPOINT [ "opentelemetry-instrument", "python", "recommendation_server.py" ]
TracesInitializing TracingThe OpenTelemetry SDK is initialized in the __main__ code block. This code
will create a tracer provider, and establish a Span Processor to use. Export
endpoints, resource attributes, and service name are automatically set by the
OpenTelemetry auto instrumentor based on environment variables.tracer = trace.get_tracer_provider().get_tracer("recommendation")
Add attributes to auto-instrumented spansWithin the execution of auto-instrumented code you can get current span from
context.span = trace.get_current_span()
Adding attributes to a span is accomplished using set_attribute on the span
object. In the ListRecommendations function an attribute is added to the span.span.set_attribute("app.products_recommended.count", len(prod_list))
Create new spansNew spans can be created and placed into active context using
start_as_current_span from an OpenTelemetry Tracer object. When used in
conjunction with a with block, the span will automatically be ended when the
block ends execution. This is done in the get_product_list function.with tracer.start_as_current_span("get_product_list") as span:
MetricsInitializing MetricsThe OpenTelemetry SDK is initialized in the __main__ code block. This code
will create a meter provider. Export endpoints, resource attributes, and service
name are automatically set by the OpenTelemetry auto instrumentor based on
environment variables.meter = metrics.get_meter_provider().get_meter("recommendation")
Custom metricsThe following custom metrics are currently available:app_recommendations_counter: Cumulative count of # recommended products per
service callAuto-instrumented metricsThe following metrics are available through auto-instrumentation, courtesy of
the opentelemetry-instrumentation-system-metrics, which is installed as part
of opentelemetry-bootstrap on building the recommendation service Docker
image:runtime.cpython.cpu_timeruntime.cpython.memoryruntime.cpython.gc_countLogsInitializing logsThe OpenTelemetry SDK is initialized in the __main__ code block. The following
code creates a logger provider with a batch processor, an OTLP log exporter, and
a logging handler. Finally, it creates a logger for use throughout the
application.logger_provider = LoggerProvider(
    resource=Resource.create(
        {
            'service.name': service_name,
        }
    ),
)
set_logger_provider(logger_provider)
log_exporter = OTLPLogExporter(insecure=True)
logger_provider.add_log_record_processor(BatchLogRecordProcessor(log_exporter))
handler = LoggingHandler(level=logging.NOTSET, logger_provider=logger_provider)

logger = logging.getLogger('main')
logger.addHandler(handler)
Create log recordsCreate logs using the logger. Examples can be found in ListRecommendations and
get_product_list functions.logger.info(f"Receive ListRecommendations for product ids:{prod_list}")
As you can see, after the initialization, log records can be created in the same
way as in standard Python. OpenTelemetry libraries automatically add a trace ID
and span ID for each log record and, in this way, enable correlating logs and
traces.NotesLogs for Python are still experimental, and some changes can be expected. The
implementation in this service follows the
Python log example.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoServicesShippingShipping ServiceThis service is responsible for providing shipping information including pricing
and tracking information, when requested from Checkout Service.Shipping service is built primarily with Tonic, Reqwest, and OpenTelemetry
Libraries/Components. Other sub-dependencies are included in Cargo.toml.Depending on your framework and runtime, you may consider consulting
Rust docs to supplement. You’ll find examples of async
and sync spans in quote requests and tracking IDs respectively.The build.rs supports development outside docker, given a Rust installation.
Otherwise, consider building with docker compose to edit / assess changes as
needed.Shipping service sourceTracesInitializing TracingThe OpenTelemetry SDK is initialized from main.fn init_tracer() -> Result<sdktrace::Tracer, TraceError> {
    global::set_text_map_propagator(TraceContextPropagator::new());
    let os_resource = OsResourceDetector.detect(Duration::from_secs(0));
    let process_resource = ProcessResourceDetector.detect(Duration::from_secs(0));
    let sdk_resource = SdkProvidedResourceDetector.detect(Duration::from_secs(0));
    let env_resource = EnvResourceDetector::new().detect(Duration::from_secs(0));
    let telemetry_resource = TelemetryResourceDetector.detect(Duration::from_secs(0));
    opentelemetry_otlp::new_pipeline()
        .tracing()
        .with_exporter(
            opentelemetry_otlp::new_exporter()
                .tonic()
                .with_endpoint(format!(
                    "{}{}",
                    env::var("OTEL_EXPORTER_OTLP_TRACES_ENDPOINT")
                        .unwrap_or_else(|_| "http://otelcol:4317".to_string()),
                    "/v1/traces"
                )), // TODO: assume this ^ is true from config when opentelemetry crate > v0.17.0
                    // https://github.com/open-telemetry/opentelemetry-rust/pull/806 includes the environment variable.
        )
        .with_trace_config(
            sdktrace::config()
                .with_resource(os_resource.merge(&process_resource).merge(&sdk_resource).merge(&env_resource).merge(&telemetry_resource)),
        )
        .install_batch(opentelemetry::runtime::Tokio)
}
Spans and other metrics are created in this example throughout tokio async
runtimes found within
tonic server functions.
Be mindful of async runtime,
context guards,
and inability to move and clone spans when replicating from these samples.Adding gRPC instrumentationThis service receives gRPC requests, which are instrumented in the middleware.The root span is started and passed down as reference in the same thread to
another closure where we call quote.    let tracer = global::tracer("shipping");
    let mut span = tracer.span_builder("oteldemo.ShippingService/GetQuote").with_kind(SpanKind::Server).start_with_context(&tracer, &parent_cx);
    span.set_attribute(semcov::trace::RPC_SYSTEM.string(RPC_SYSTEM_GRPC));

    span.add_event("Processing get quote request".to_string(), vec![]);

    let cx = Context::current_with_span(span);
    let q = match create_quote_from_count(itemct)
        .with_context(cx.clone())
        .await
//-> create_quote_from_count()...
    let f = match request_quote(count).await {
        Ok(float) => float,
        Err(err) => {
            let msg = format!("{}", err);
            return Err(tonic::Status::unknown(msg));
        }
    };

    Ok(get_active_span(|span| {
        let q = create_quote_from_float(f);
        span.add_event(
            "Received Quote".to_string(),
            vec![KeyValue::new("app.shipping.cost.total", format!("{}", q))],
        );
        span.set_attribute(KeyValue::new("app.shipping.items.count", count as i64));
        span.set_attribute(KeyValue::new("app.shipping.cost.total", format!("{}", q)));
        q
    }))
//<- create_quote_from_count()...
    cx.span().set_attribute(semcov::trace::RPC_GRPC_STATUS_CODE.i64(RPC_GRPC_STATUS_CODE_OK));
Note that we create a context around the root span and send a clone to the async
function create_quote_from_count(). After create_quote_from_count() completes,
we can add additional attributes to the root span as appropriate.You may also notice the attributes set on the span in this example, and
events propagated similarly. With any valid span pointer (attached to
context) the
OpenTelemetry API
will work.Adding HTTP instrumentationA child client span is also produced for the outgoing HTTP call to quote via
the reqwest client. This span pairs up with the corresponding quote server
span. The tracing instrumentation is implemented in the client middleware making
use of the available reqwest-middleware, reqwest-tracing and
tracing-opentelemetry libraries:let reqwest_client = reqwest::Client::new();
let client = ClientBuilder::new(reqwest_client)
    .with(TracingMiddleware::<SpanBackendWithUrl>::new())
    .build();
Add span attributesProvided you are on the same thread, or in a context passed from a span-owning
thread, or a ContextGuard is in scope, you can get an active span with
get_active_span. You can find examples of all of these in the demo, with
context available in shipping_service for sync/async runtime. You should
consult quote.rs and/or the example above to see context-passed-to-async
runtime.See below for a snippet from shiporder that holds context and a span in scope.
This is appropriate in our case of a sync runtime.let parent_cx =
global::get_text_map_propagator(|prop| prop.extract(&MetadataMap(request.metadata())));
// in this case, generating a tracking ID is trivial
// we'll create a span and associated events all in this function.
let tracer = global::tracer("shipping");
let mut span = tracer
    .span_builder("oteldemo.ShippingService/ShipOrder").with_kind(SpanKind::Server).start_with_context(&tracer, &parent_cx);
You must add attributes to a span in context with set_attribute, followed by a
KeyValue object, containing a key, and value.let tid = create_tracking_id();
span.set_attribute(KeyValue::new("app.shipping.tracking.id", tid.clone()));
info!("Tracking ID Created: {}", tid);
Add span eventsAdding span events is accomplished using add_event on the span object. Both
server routes, for ShipOrderRequest (sync) and GetQuoteRequest (async), have
events on spans. Attributes are not included here, but are
simple to include.Adding a span event:let tid = create_tracking_id();
span.set_attribute(KeyValue::new("app.shipping.tracking.id", tid.clone()));
info!("Tracking ID Created: {}", tid);
MetricsTBDLogsTBDFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified April 7, 2025: Update the docs links to the ContextGuard Struct (#6654) (36754102)\n\n\n\nDocsDemoTelemetry FeaturesTelemetry FeaturesOpenTelemetryOpenTelemetry Traces: all services are
instrumented using OpenTelemetry available instrumentation libraries.OpenTelemetry Metrics: select services
are instrumented using OpenTelemetry available instrumentation libraries. More
will be added as the relevant SDKs are released.OpenTelemetry Logs: select services are
instrumented using OpenTelemetry available instrumentation libraries. More
will be added as the relevant SDKs are released.OpenTelemetry Collector: all services are instrumented
and sending the generated traces and metrics to the OpenTelemetry Collector
via gRPC. The received traces are then exported to the logs and to Jaeger;
received metrics and exemplars are exported to logs and Prometheus.Observability SolutionsGrafana: all metric dashboards are stored in
Grafana.Jaeger: all generated traces are being
sent to Jaeger.OpenSearch: all generated logs are sent to Data
Prepper. OpenSearch will be used to centralize logging data from services.Prometheus: all generated metrics and exemplars
are scraped by Prometheus.EnvironmentsDocker: this forked sample can be executed with
Docker.Kubernetes: the app is designed to run on
Kubernetes (both locally, as well as on the cloud) using a Helm chart.ProtocolsgRPC: microservices use a high volume of gRPC calls to
communicate to each other.HTTP: microservices use
HTTP where gRPC is unavailable or not well supported.Other ComponentsEnvoy: Envoy is used as a reverse proxy for
user-facing web interfaces such as the frontend, load generator, and feature
flag service.Locust: a background job that creates realistic usage
patterns on the website using a synthetic load generator.OpenFeature: a feature flagging API and SDK
that allows for the enabling and disabling of features in the application.flagd: a feature flagging daemon that is used to
manage feature flags in the demo application.Log Coverage by ServiceManual Span AttributesMetric Coverage by ServiceTrace Coverage by ServiceFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified November 6, 2024: Add Flagd-ui to demo docs (#5332) (e3ae3a29)\n\nLog Coverage by ServiceManual Span AttributesMetric Coverage by ServiceTrace Coverage by Service\n\n\n\nDocsDemoTelemetry FeaturesLog CoverageLog Coverage by ServiceServiceLanguageOTLP LogsAccountingGo🚧AdJava✅Cart.NET✅CheckoutGo🚧CurrencyC++🚧EmailRuby🚧Fraud DetectionKotlin✅FrontendTypeScript🚧PaymentJavaScript🚧Product CatalogGo🚧QuotePHP✅RecommendationPython✅ShippingRust🚧Emoji Legend:Completed: ✅Not Applicable: 🔕Not Present (Yet): 🚧FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 11, 2024: [demo] Replace references to feature flag service with flagd (#4058) (5c81d397)\n\n\n\nDocsDemoTelemetry FeaturesManual Span AttributesManual Span AttributesThis page lists the manual Span Attributes used throughout the demo:AdNameTypeDescriptionapp.ads.categorystringCategory for returned adapp.ads.contextKeysstringContext keys used to find related adsapp.ads.contextKeys.countnumberCount of unique context keys usedapp.ads.countnumberCount of ads returned to userapp.ads.ad_request_typestringEither targeted or not_targetedapp.ads.ad_response_typestringEither targeted or randomCartNameTypeDescriptionapp.cart.items.countnumberNumber of unique items in cartapp.product.idstringProduct ID for cart itemapp.product.quantitystringQuantity for cart itemapp.user.idstringUser IDCheckoutNameTypeDescriptionapp.cart.items.countnumberTotal number of items in cartapp.order.amountnumberOrder amountapp.order.idstringOrder IDapp.order.items.countnumberNumber of unique items in orderapp.payment.transaction.idstringPayment transaction IDapp.shipping.amountnumberShipping amountapp.shipping.tracking.idstringShipping tracking IDapp.user.currencystringUser currencyapp.user.idstringUser IDCurrencyNameTypeDescriptionapp.currency.conversion.fromstringCurrency code to convert fromapp.currency.conversion.tostringCurrency code to convert toEmailNameTypeDescriptionapp.email.recipientstringEmail used for order confirmationapp.order.idstringOrder IDFrontendNameTypeDescriptionapp.cart.sizenumberTotal number of items in cartapp.cart.items.countnumberCount of unique items in cartapp.cart.shipping.costnumberCart shipping costapp.cart.total.pricenumberCart total priceapp.currencystringUser currencyapp.currency.newstringNew currency to setapp.order.totalnumberOrder total costapp.product.idstringProduct IDapp.product.quantitynumberProduct quantityapp.products.countnumberTotal products displayedapp.request.idstringRequest IDapp.session.idstringSession IDapp.user.idstringUser IDLoad GeneratorNameTypeDescriptionNone yetPaymentNameTypeDescriptionapp.payment.amountnumberTotal payment amountapp.payment.card_typestringType of card used for paymentapp.payment.card_validbooleanWas the card used validapp.payment.chargedbooleanWas the charge successful (false with load generator)Product CatalogNameTypeDescriptionapp.product.idstringProduct IDapp.product.namestringProduct nameapp.products.countnumberNumber of products in catalogapp.products_search.countnumberNumber of products returned in searchQuoteNameTypeDescriptionapp.quote.items.countnumberTotal items to shipapp.quote.cost.totalnumberTotal shipping quoteRecommendationNameTypeDescriptionapp.filtered_products.countnumberNumber of filtered products returnedapp.products.countnumberNumber of products in catalogapp.products_recommended.countnumberNumber of recommended products returnedapp.cache_hitbooleanIf cache was accessed or notShippingNameTypeDescriptionapp.shipping.cost.totalnumberTotal shipping costapp.shipping.items.countnumberTotal items to shipapp.shipping.tracking.idstringShipping tracking IDapp.shipping.zip_codestringZip code used to ship item(s)FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 4, 2025: [demo] rename demo services (#6438) (ae417344)\n\n\n\nDocsDemoTelemetry FeaturesMetric CoverageMetric Coverage by ServiceServiceLanguageInstrumentation LibrariesManual InstrumentationMultiple InstrumentsViewsCustom AttributesResource DetectionExemplarsAccountingGo🚧🚧🚧🚧🚧🚧🚧AdJava✅✅🚧🚧✅✅✅Cart.NET✅🚧🚧🚧🚧🚧🚧CheckoutGo✅🚧🚧🚧🚧🚧🚧CurrencyC++🔕✅🚧🚧🚧🚧🚧EmailRuby🚧🚧🚧🚧🚧🚧🚧Fraud DetectionKotlin✅🚧🚧🚧🚧✅🚧FrontendTypeScript🚧🚧🚧🚧🚧🚧🚧PaymentJavaScript🚧✅🚧🚧🚧✅🚧Product CatalogGo🚧🚧🚧🚧🚧🚧🚧QuotePHP🚧🚧🚧🚧🚧🚧🚧RecommendationPython✅✅🚧🚧🚧🚧🚧ShippingRust🚧🚧🚧🚧🚧🚧🚧Emoji Legend:Completed: ✅Not Applicable: 🔕Not Present (Yet): 🚧FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 11, 2024: [demo] Replace references to feature flag service with flagd (#4058) (5c81d397)\n\n\n\nDocsDemoTelemetry FeaturesTrace CoverageTrace Coverage by ServiceServiceLanguageInstrumentation LibrariesManual Span CreationSpan Data EnrichmentRPC Context PropagationSpan LinksBaggageResource DetectionAccounting ServiceGo🚧🚧🚧🚧🚧🚧✅AdJava✅✅✅🔕🔕🔕🚧Cart.NET✅✅✅🔕🔕🔕✅CheckoutGo✅✅✅🔕🔕🔕✅CurrencyC++🔕✅✅✅🔕🔕🚧EmailRuby✅✅✅🔕🔕🔕🚧Fraud DetectionKotlin✅🚧🚧🚧✅🚧🚧FrontendJavaScript✅✅✅🔕✅✅✅PaymentJavaScript✅✅✅🔕🔕✅✅Product CatalogGo✅🔕✅🔕🔕🔕🚧Quote ServicePHP✅✅✅🔕🔕🔕🚧RecommendationPython✅✅✅🔕🔕🔕🚧ShippingRust🔕✅✅✅🔕🔕🚧Emoji Legend:Completed: ✅Not Applicable: 🔕Not Present (Yet): 🚧FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified April 13, 2024: [demo] add trace links to fraud detection service (#4261) (11be596c)\n\n\n\nDocsDemoTestsTestsCurrently, the repository includes E2E tests for both the frontend and backend
services. For the Frontend we are using Cypress to
execute the different flows in the web store. While the backend services use
AVA as the main testing framework for integration tests and
Tracetest for trace-based tests.To run all the tests, execute make run-tests from the root directory.Otherwise, if you want to run a specific suite of tests you can execute specific
commands for each type of test1:Frontend tests: docker compose run frontendTestsBackend tests:Integration: docker compose run integrationTestsTrace-based: docker compose run traceBasedTestsTo learn more about these tests, see
Service Testing.docker-compose is deprecated. For details, see
Migrate to Compose V2. ↩︎FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 3, 2025: fix: missing `to` in demo/tests page (#6178) (b588b713)\n\n\n\nDocsLanguage APIs & SDKsLanguage APIs & SDKsOpenTelemetry code instrumentation is supported for many popular programming languagesOpenTelemetry code instrumentation is supported for the languages listed in
the Statuses and Releases table below. Unofficial
implementations for other languages are available as
well. You can find them in the registry.For Go, .NET, PHP, Python, Java and JavaScript you can use
zero-code solutions to add instrumentation to your
application without code changes.If you are using Kubernetes, you can use the OpenTelemetry Operator for
Kubernetes to inject these zero-code solutions into your
application.Status and ReleasesThe current status of the major functional components for OpenTelemetry is as
follows:ImportantRegardless of an API/SDK’s status, if your instrumentation relies on semantic
conventions that are marked as Experimental in the semantic conventions
specification, your data flow might be subject to breaking changes.LanguageTracesMetricsLogsC++StableStableStableC#/.NETStableStableStableErlang/ElixirStableDevelopmentDevelopmentGoStableStableBetaJavaStableStableStableJavaScriptStableStableDevelopmentPHPStableStableStablePythonStableStableDevelopmentRubyStableDevelopmentDevelopmentRustBetaBetaBetaSwiftStableDevelopmentDevelopmentAPI referencesSpecial Interest Groups (SIGs) implementing the OpenTelemetry API and SDK in a
specific language also publish API references for developers. The following
references are available:C++.NET — Tracing.NET — MetricsErlang/ElixirGoJava — Record Telemetry with APIJavaScriptPHPPythonRubyRustNoteThe list above is aliased to /api.SDK ConfigurationC++ A language-specific implementation of OpenTelemetry in C++..NET A language-specific implementation of OpenTelemetry in .NET.Erlang/Elixir A language-specific implementation of OpenTelemetry in Erlang/Elixir.Go A language-specific implementation of OpenTelemetry in Go.Java Language-specific implementation of OpenTelemetry in Java.JavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser).PHP A language-specific implementation of OpenTelemetry in PHP.Python A language-specific implementation of OpenTelemetry in Python.Ruby A language-specific implementation of OpenTelemetry in Ruby.Rust A language-specific implementation of OpenTelemetry in Rust.Swift A language-specific implementation of OpenTelemetry in Swift.Other languagesLanguage-specific implementation of OpenTelemetry for other languages.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 21, 2025: [IA] Rename `net` to `dotnet` in `/docs/{languages,zero-code}/net`, add redirects and adjust links (#6590) (d1ef521e)\n\nSDK ConfigurationC++ A language-specific implementation of OpenTelemetry in C++..NET A language-specific implementation of OpenTelemetry in .NET.Erlang/Elixir A language-specific implementation of OpenTelemetry in Erlang/Elixir.Go A language-specific implementation of OpenTelemetry in Go.Java Language-specific implementation of OpenTelemetry in Java.JavaScript A language-specific implementation of OpenTelemetry in JavaScript (for Node.js & the browser).PHP A language-specific implementation of OpenTelemetry in PHP.Python A language-specific implementation of OpenTelemetry in Python.Ruby A language-specific implementation of OpenTelemetry in Ruby.Rust A language-specific implementation of OpenTelemetry in Rust.Swift A language-specific implementation of OpenTelemetry in Swift.Other languagesLanguage-specific implementation of OpenTelemetry for other languages.\n\n\n\nDocsLanguage APIs & SDKsSDK ConfigSDK ConfigurationOpenTelemetry SDKs support configuration in each language and with environment
variables. The following pages describe the environment variables you can use to
configure your SDK. Values set with environment variables override equivalent
configuration in code using SDK APIs.General SDK ConfigurationOTLP Exporter ConfigurationFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 30, 2024: [IA] Move detailed SDK config out of Concepts (#3888) (3e474f0f)\n\nGeneral SDK ConfigurationOTLP Exporter Configuration\n\n\n\nDocsLanguage APIs & SDKsSDK ConfigGeneralGeneral SDK ConfigurationNoteSupport for environment variables is optional. For detailed information on which
environment variables each language implementation supports, please consult the
Implementation Compliance Matrix.OTEL_SERVICE_NAMESets the value of the service.name
resource attribute.Default value: "unknown_service"If service.name is also provided in OTEL_RESOURCE_ATTRIBUTES, then
OTEL_SERVICE_NAME takes precedence.Example:export OTEL_SERVICE_NAME="your-service-name"OTEL_RESOURCE_ATTRIBUTESKey-value pairs to be used as resource attributes. See
Resource SDK
for more details.Default value: Empty.See
Resource semantic conventions
for semantic conventions to follow for common resource types.Example:export OTEL_RESOURCE_ATTRIBUTES="key1=value1,key2=value2"OTEL_TRACES_SAMPLERSpecifies the Sampler used to sample traces by the SDK.Default value: "parentbased_always_on"Example:export OTEL_TRACES_SAMPLER="traceidratio"Accepted values for OTEL_TRACES_SAMPLER are:"always_on": AlwaysOnSampler"always_off": AlwaysOffSampler"traceidratio": TraceIdRatioBased"parentbased_always_on": ParentBased(root=AlwaysOnSampler)"parentbased_always_off": ParentBased(root=AlwaysOffSampler)"parentbased_traceidratio": ParentBased(root=TraceIdRatioBased)"parentbased_jaeger_remote": ParentBased(root=JaegerRemoteSampler)"jaeger_remote": JaegerRemoteSampler"xray":
AWS X-Ray Centralized Sampling
(third party)OTEL_TRACES_SAMPLER_ARGSpecifies arguments, if applicable, to the sampler defined in by
OTEL_TRACES_SAMPLER. The specified value will only be used if
OTEL_TRACES_SAMPLER is set. Each Sampler type defines its own expected input,
if any. Invalid or unrecognized input is logged as an error.Default value: Empty.Example:export OTEL_TRACES_SAMPLER="traceidratio"
export OTEL_TRACES_SAMPLER_ARG="0.5"
Depending on the value of OTEL_TRACES_SAMPLER, OTEL_TRACES_SAMPLER_ARG may
be set as follows:For traceidratio and parentbased_traceidratio samplers: Sampling
probability, a number in the [0..1] range, e.g. “0.25”. Default is 1.0 if
unset.For jaeger_remote and parentbased_jaeger_remote: The value is a comma
separated list:Example:
"endpoint=http://localhost:14250,pollingIntervalMs=5000,initialSamplingRate=0.25"endpoint: the endpoint in form of scheme://host:port of gRPC server that
serves the sampling strategy for the service
(sampling.proto).pollingIntervalMs: in milliseconds indicating how often the sampler will
poll the backend for updates to sampling strategy.initialSamplingRate: in the [0..1] range, which is used as the sampling
probability when the backend cannot be reached to retrieve a sampling
strategy. This value stops having an effect once a sampling strategy is
retrieved successfully, as the remote strategy will be used until a new
update is retrieved.OTEL_PROPAGATORSSpecifies Propagators to be used in a comma-separated list.Default value: `“tracecontext,baggage”Example:export OTEL_PROPAGATORS="b3"Accepted values for OTEL_PROPAGATORS are:"tracecontext": W3C Trace Context"baggage": W3C Baggage"b3": B3 Single"b3multi":
B3 Multi"jaeger":
Jaeger"xray":
AWS X-Ray
(third party)"ottrace":
OT Trace (third
party)"none": No automatically configured propagator.OTEL_TRACES_EXPORTERSpecifies which exporter is used for traces. Depending on the implementation it
may be a comma-separated list.Default value: "otlp"Example:export OTEL_TRACES_EXPORTER="jaeger"Accepted values for are:"otlp": OTLP"jaeger": export in Jaeger data model"zipkin": Zipkin"console": Standard Output"none": No automatically configured exporter for traces.OTEL_METRICS_EXPORTERSpecifies which exporter is used for metrics. Depending on the implementation it
may be a comma-separated list.Default value: "otlp"Example:export OTEL_METRICS_EXPORTER="prometheus"Accepted values for OTEL_METRICS_EXPORTER are:"otlp": OTLP"prometheus":
Prometheus"console": Standard Output"none": No automatically configured exporter for metrics.OTEL_LOGS_EXPORTERSpecifies which exporter is used for logs. Depending on the implementation it
may be a comma-separated list.Default value: "otlp"Example:export OTEL_LOGS_EXPORTER="otlp"Accepted values for OTEL_LOGS_EXPORTER are:"otlp": OTLP"console": Standard Output"none": No automatically configured exporter for logs.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified December 7, 2024: Update accepted exporters in SDK configuration (#5733) (1e4970e9)\n\n\n\nDocsLanguage APIs & SDKsSDK ConfigOTLP ExporterOTLP Exporter ConfigurationEndpoint ConfigurationThe following environment variables let you configure an OTLP/gRPC or OTLP/HTTP
endpoint for your traces, metrics, and logs.OTEL_EXPORTER_OTLP_ENDPOINTA base endpoint URL for any signal type, with an optionally-specified port
number. Helpful for when you’re sending more than one signal to the same
endpoint and want one environment variable to control the endpoint.Default value:gRPC: "http://localhost:4317"HTTP: "http://localhost:4318"Example:gRPC: export OTEL_EXPORTER_OTLP_ENDPOINT="https://my-api-endpoint:443"HTTP: export OTEL_EXPORTER_OTLP_ENDPOINT="http://my-api-endpoint/"For OTLP/HTTP, exporters in the SDK construct signal-specific URLs when this
environment variable is set. This means that if you’re sending traces, metrics,
and logs, the following URLs are constructed from the example above:Traces: "http://my-api-endpoint/v1/traces"Metrics: "http://my-api-endpoint/v1/metrics"Logs: "http://my-api-endpoint/v1/logs"OTEL_EXPORTER_OTLP_TRACES_ENDPOINTEndpoint URL for trace data only, with an optionally-specified port number.
Typically ends with v1/traces when using OTLP/HTTP.Default value:gRPC: "http://localhost:4317"HTTP: "http://localhost:4318/v1/traces"Example:gRPC:
export OTEL_EXPORTER_OTLP_TRACES_ENDPOINT="https://my-api-endpoint:443"HTTP:
export OTEL_EXPORTER_OTLP_TRACES_ENDPOINT="http://my-api-endpoint/v1/traces"OTEL_EXPORTER_OTLP_METRICS_ENDPOINTEndpoint URL for metric data only, with an optionally-specified port number.
Typically ends with v1/metrics when using OTLP/HTTP.Default value:gRPC: "http://localhost:4317"HTTP: "http://localhost:4318/v1/metrics"Example:gRPC:
export OTEL_EXPORTER_OTLP_METRICS_ENDPOINT="https://my-api-endpoint:443"HTTP:
export OTEL_EXPORTER_OTLP_METRICS_ENDPOINT="http://my-api-endpoint/v1/metrics"OTEL_EXPORTER_OTLP_LOGS_ENDPOINTEndpoint URL for log data only, with an optionally-specified port number.
Typically ends with v1/logs when using OTLP/HTTP.Default value:gRPC: "http://localhost:4317"HTTP: "http://localhost:4318/v1/logs"Example:gRPC: export OTEL_EXPORTER_OTLP_LOGS_ENDPOINT="https://my-api-endpoint:443"HTTP:
export OTEL_EXPORTER_OTLP_LOGS_ENDPOINT="http://my-api-endpoint/v1/logs"Header configurationThe following environment variables let you configure additional headers as a
list of key-value pairs to add in outgoing gRPC or HTTP requests.OTEL_EXPORTER_OTLP_HEADERSA list of headers to apply to all outgoing data (traces, metrics, and logs).Default value: N/AExample:
export OTEL_EXPORTER_OTLP_HEADERS="api-key=key,other-config-value=value"OTEL_EXPORTER_OTLP_TRACES_HEADERSA list of headers to apply to all outgoing traces.Default value: N/AExample:
export OTEL_EXPORTER_OTLP_TRACES_HEADERS="api-key=key,other-config-value=value"OTEL_EXPORTER_OTLP_METRICS_HEADERSA list of headers to apply to all outgoing metrics.Default value: N/AExample:
export OTEL_EXPORTER_OTLP_METRICS_HEADERS="api-key=key,other-config-value=value"OTEL_EXPORTER_OTLP_LOGS_HEADERSA list of headers to apply to all outgoing logs.Default value: N/AExample:
export OTEL_EXPORTER_OTLP_LOGS_HEADERS="api-key=key,other-config-value=value"Timeout ConfigurationThe following environment variables configure the maximum time (in milliseconds)
an OTLP Exporter will wait before transmitting the net batch of data.OTEL_EXPORTER_OTLP_TIMEOUTThe timeout value for all outgoing data (traces, metrics, and logs) in
milliseconds.Default value: 10000 (10s)Example: export OTEL_EXPORTER_OTLP_TIMEOUT=500OTEL_EXPORTER_OTLP_TRACES_TIMEOUTThe timeout value for all outgoing traces in milliseconds.Default value: 10000 (10s)Example: export OTEL_EXPORTER_OTLP_TRACES_TIMEOUT=500OTEL_EXPORTER_OTLP_METRICS_TIMEOUTThe timeout value for all outgoing metrics in milliseconds.Default value: 10000 (10s)Example: export OTEL_EXPORTER_OTLP_METRICS_TIMEOUT=500OTEL_EXPORTER_OTLP_LOGS_TIMEOUTThe timeout value for all outgoing logs in milliseconds.Default value: 10000 (10s)Example: export OTEL_EXPORTER_OTLP_LOGS_TIMEOUT=500Protocol configurationThe following environment variables configure the OTLP transport protocol an
OTLP exporter uses.OTEL_EXPORTER_OTLP_PROTOCOLSpecifies the OTLP transport protocol to be used for all telemetry data.Default value: SDK-dependent, but will typically be either http/protobuf
or grpc.Example: export OTEL_EXPORTER_OTLP_PROTOCOL=grpcValid values are:grpc to use OTLP/gRPChttp/protobuf to use OTLP/HTTP + protobufhttp/json to use OTLP/HTTP + JSONOTEL_EXPORTER_OTLP_TRACES_PROTOCOLSpecifies the OTLP transport protocol to be used for trace data.Default value: SDK-dependent, but will typically be either http/protobuf
or grpc.Example: export OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpcValid values are:grpc to use OTLP/gRPChttp/protobuf to use OTLP/HTTP + protobufhttp/json to use OTLP/HTTP + JSONOTEL_EXPORTER_OTLP_METRICS_PROTOCOLSpecifies the OTLP transport protocol to be used for metrics data.Default value: SDK-dependent, but will typically be either http/protobuf
or grpc.Example: export OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=grpcValid values are:grpc to use OTLP/gRPChttp/protobuf to use OTLP/HTTP + protobufhttp/json to use OTLP/HTTP + JSONOTEL_EXPORTER_OTLP_LOGS_PROTOCOLSpecifies the OTLP transport protocol to be used for log data.Default value: SDK-dependent, but will typically be either http/protobuf
or grpc.Example: export OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpcValid values are:grpc to use OTLP/gRPChttp/protobuf to use OTLP/HTTP + protobufhttp/json to use OTLP/HTTP + JSONFeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified August 22, 2024: Auto-update registry versions (45e3fc044282bca7edb35695952120719a035c22) (#5080) (fe0c3f68)\n\n\n\nDocsLanguage APIs & SDKsC++C++ A language-specific implementation of OpenTelemetry in C++.This is the OpenTelemetry C++ documentation. OpenTelemetry is an
observability framework – an API, SDK, and tools that are designed to aid in
the generation and collection of application telemetry data such as metrics,
logs, and traces. This documentation is designed to help you understand how to
get started using OpenTelemetry C++.Status and ReleasesThe current status of the major functional components for OpenTelemetry
C++ is as follows:TracesMetricsLogsStableStableStableFor releases, including the latest release, see Releases.RepositoriesMain: opentelemetry-cppContrib:
opentelemetry-cpp-contribGetting StartedGet telemetry for your app in less than 5 minutes!InstrumentationInstrumentation for OpenTelemetry C++Using instrumentation librariesExportersAPI referenceExamplesRegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry C++FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified January 15, 2024: [IA] Rename /docs/instrumentation to /docs/languages, and Manual subpages to Instrumentation (#3761) (06837fe1)\n\nGetting StartedGet telemetry for your app in less than 5 minutes!InstrumentationInstrumentation for OpenTelemetry C++Using instrumentation librariesExportersAPI referenceExamplesRegistryInstrumentation libraries, exporters and other useful components for OpenTelemetry C++\n\n\n\nDocsLanguage APIs & SDKsC++Getting StartedGetting StartedGet telemetry for your app in less than 5 minutes!This page will show you how to get started with OpenTelemetry in C++.You will learn how to instrument a simple C++ application, such that
traces are emitted to the terminal.PrerequisitesEnsure that you have the following installed locally:GitC++ compiler supporting C++ version >= 14MakeCMake version >= 3.25Example applicationThe following example uses a basic Oat++ application. If
you are not using Oat++, that’s OK - you can use OpenTelemetry C++ with any
other web framework as well.SetupCreate a folder named otel-cpp-starter.move into the newly created folder. This will serve as your working directory.After setting up dependencies, your directory structure should resemble this:otel-cpp-starter
│
├── oatpp
├── opentelemetry-cpp
└── roll-dice
DependenciesTo begin, install Oat++ locally using the
source code and make, following these steps:Obtain the Oat++ source code by cloning from the
oatpp/oatpp GitHub repository.git clone https://github.com/oatpp/oatpp.git
Navigate to the oatpp directory and switch to 1.3.0 version for now:cd oatpp
git checkout 1.3.0-latest
Create a build subdirectory and navigate into it.mkdir build
cd build
Build oatpp using the cmake and make commands. This command will trigger
the build process specified in the CMakeLists.txt included in the oatpp
source code.cmake ..
make
Install oatpp.This command will install the built oatpp library and headers on your system,
making it accessible for development in your project.sudo make install
To uninstall the built oatpp library and headers from your system.sudo make uninstall
Next, install and build
OpenTelemetry C++ locally
using CMake, following these steps:In your terminal, navigate back to the otel-cpp-starter directory. Then,
clone the OpenTelemetry C++ GitHub repository to your local machine.git clone https://github.com/open-telemetry/opentelemetry-cpp.git
Change your working directory to the OpenTelemetry C++ SDK directory.cd opentelemetry-cpp
Create a build directory and navigate into it.mkdir build
cd build
In the build directory run CMake, to configure and generate the build
system without enabling tests:cmake -DBUILD_TESTING=OFF ..
Or, if the cmake --build fails, you can also try:cmake -DBUILD_TESTING=OFF -DWITH_ABSEIL=ON ..
Execute the build process:cmake --build .
Install OpenTelemetry C++ in otel-cpp-starter/otel-cpp:cmake --install . --prefix ../../otel-cpp
With Oat++ and OpenTelemetry C++ ready, you can continue with creating the HTTP
Server, that we want to instrument eventually.Create and launch an HTTP ServerIn your otel-cpp-starter folder, create a subfolder roll-dice, where the
Oat++ library will be used by referencing the oatpp headers and linking them
when compiling your project.Create a file called CMakeLists.txt inside roll-dice to define the Oat++
library directories, include paths, and link against Oat++ during the
compilation process.cmake_minimum_required(VERSION 3.25)
project(RollDiceServer)
# Set C++ standard (e.g., C++17)
set(CMAKE_CXX_STANDARD 17)
set(project_name roll-dice-server)

# Define your project's source files
set(SOURCES
    main.cpp  # Add your source files here
)

# Create an executable target
add_executable(dice-server ${SOURCES})

set(OATPP_ROOT ../oatpp)
find_library(OATPP_LIB NAMES liboatpp.a HINTS "${OATPP_ROOT}/build/src/" NO_DEFAULT_PATH)

if (NOT OATPP_LIB)
  message(SEND_ERROR "Did not find oatpp library ${OATPP_ROOT}/build/src")
endif()
#set the path to the directory containing "oatpp" package configuration files
include_directories(${OATPP_ROOT}/src)
target_link_libraries(dice-server PRIVATE ${OATPP_LIB})
Next, the sample HTTP server source code is needed. It will do the following:Initialize an HTTP router and set up a request handler to generate a random
number as the response when a GET request is made to the /rolldice endpoint.Next, create a connection handler, a connection provider, and start the server
on localhost:8080.Lastly, initialize and run the application within the main function.In that roll-dice folder, create a file called main.cpp and add the
following code to the file.#include "oatpp/web/server/HttpConnectionHandler.hpp"
#include "oatpp/network/Server.hpp"
#include "oatpp/network/tcp/server/ConnectionProvider.hpp"
#include <cstdlib>
#include <ctime>
#include <string>

using namespace std;

class Handler : public oatpp::web::server::HttpRequestHandler {
public:
  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {
    int low = 1;
    int high = 7;
    int random = rand() % (high - low) + low;
    // Convert a std::string to oatpp::String
    const string response = to_string(random);
    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());
  }
};

void run() {
  auto router = oatpp::web::server::HttpRouter::createShared();
  router->route("GET", "/rolldice", std::make_shared<Handler>());
  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);
  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({"localhost", 8080, oatpp::network::Address::IP_4});
  oatpp::network::Server server(connectionProvider, connectionHandler);
  OATPP_LOGI("Dice Server", "Server running on port %s", static_cast<const char*>(connectionProvider->getProperty("port").getData()));
  server.run();
}

int main() {
  oatpp::base::Environment::init();
  srand((int)time(0));
  run();
  oatpp::base::Environment::destroy();
  return 0;
}
Build and run the application with the following CMake commands.mkdir build
cd build
cmake ..
cmake --build .
After successfully building your project, you can run the generated executable../dice-server
Then, open http://localhost:8080/rolldice in your browser to ensure it is
working.InstrumentationTo add OpenTelemetry to your application, update the CMakeLists.txt file with
the following additional dependencies.cmake_minimum_required(VERSION 3.25)
project(RollDiceServer)
# Set C++ standard (e.g., C++17)
set(CMAKE_CXX_STANDARD 17)
set(project_name roll-dice-server)

# Define your project's source files
set(SOURCES
    main.cpp  # Add your source files here
)
# Create an executable target
add_executable(dice-server ${SOURCES})

set(OATPP_ROOT ../oatpp)
set(opentelemetry-cpp_DIR ../otel-cpp/lib/cmake/opentelemetry-cpp)
find_library(OATPP_LIB NAMES liboatpp.a HINTS "${OATPP_ROOT}/build/src/" NO_DEFAULT_PATH)
if (NOT OATPP_LIB)
  message(SEND_ERROR "Did not find oatpp library ${OATPP_ROOT}/build/src")
endif()
# set the path to the directory containing "oatpp" package configuration files
include_directories(${OATPP_ROOT}/src)

# Use find_package to include OpenTelemetry C++
find_package(opentelemetry-cpp CONFIG REQUIRED NO_DEFAULT_PATH)

# Link against each OpenTelemetry C++ library
target_link_libraries(dice-server PRIVATE
                      ${OATPP_LIB}
                      ${OPENTELEMETRY_CPP_LIBRARIES})
Update the main.cpp file with the following code to initialize a tracer and to
emit spans when the /rolldice request handler is called.#include "oatpp/web/server/HttpConnectionHandler.hpp"
#include "oatpp/network/Server.hpp"
#include "oatpp/network/tcp/server/ConnectionProvider.hpp"

#include "opentelemetry/exporters/ostream/span_exporter_factory.h"
#include "opentelemetry/sdk/trace/exporter.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"

#include <cstdlib>
#include <ctime>
#include <string>

using namespace std;
namespace trace_api = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;
namespace trace_exporter = opentelemetry::exporter::trace;

namespace {
  void InitTracer() {
    auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();
    auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));
    std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
      trace_sdk::TracerProviderFactory::Create(std::move(processor));
    //set the global trace provider
    trace_api::Provider::SetTracerProvider(provider);
  }
  void CleanupTracer() {
    std::shared_ptr<opentelemetry::trace::TracerProvider> none;
    trace_api::Provider::SetTracerProvider(none);
  }

}

class Handler : public oatpp::web::server::HttpRequestHandler {
public:
  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {
    auto tracer = opentelemetry::trace::Provider::GetTracerProvider()->GetTracer("my-app-tracer");
    auto span = tracer->StartSpan("RollDiceServer");
    int low = 1;
    int high = 7;
    int random = rand() % (high - low) + low;
    // Convert a std::string to oatpp::String
    const string response = to_string(random);
    span->End();
    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());
  }
};

void run() {
  auto router = oatpp::web::server::HttpRouter::createShared();
  router->route("GET", "/rolldice", std::make_shared<Handler>());
  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);
  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({"localhost", 8080, oatpp::network::Address::IP_4});
  oatpp::network::Server server(connectionProvider, connectionHandler);
  OATPP_LOGI("Dice Server", "Server running on port %s", static_cast<const char*>(connectionProvider->getProperty("port").getData()));
  server.run();
}

int main() {
  oatpp::base::Environment::init();
  InitTracer();
  srand((int)time(0));
  run();
  oatpp::base::Environment::destroy();
  CleanupTracer();
  return 0;
}
Build your project again.cd build
cmake ..
cmake --build .
After successfully building your project, you can run the generated executable../dice-server
When you send a request to the server at http://localhost:8080/rolldice, you
will see a span being emitted to the terminal.{
  "name" : "RollDiceServer",
  "trace_id": "f47bea385dc55e4d17470d51f9d3130b",
  "span_id": "deed994b51f970fa",
  "tracestate" : ,
  "parent_span_id": "0000000000000000",
  "start": 1698991818716461000,
  "duration": 64697,
  "span kind": "Internal",
  "status": "Unset",
  "service.name": "unknown_service",
  "telemetry.sdk.language": "cpp",
  "telemetry.sdk.name": "opentelemetry",
  "telemetry.sdk.version": "1.11.0",
  "instr-lib": "my-app-tracer"
}
Next stepsFor more information about instrumenting your code, refer the
instrumentation documentation.You’ll also want to configure an appropriate exporter to
export your telemetry data to one or more
telemetry backends.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified December 12, 2024: [CI] Merge dup cSpell entries in front matter, run word normalization in other locales (#5765) (6a865f53)\n\n\n\nDocsLanguage APIs & SDKsC++InstrumentationInstrumentationInstrumentation for OpenTelemetry C++Instrumentation is the act of adding
observability code to an app yourself.If you’re instrumenting an app, you need to use the OpenTelemetry SDK for your
language. You’ll then use the SDK to initialize OpenTelemetry and the API to
instrument your code. This will emit telemetry from your app, and any library
you installed that also comes with instrumentation.If you’re instrumenting a library, only install the OpenTelemetry API package
for your language. Your library will not emit telemetry on its own. It will only
emit telemetry when it is part of an app that uses the OpenTelemetry SDK. For
more on instrumenting libraries, see
Libraries.For more information about the OpenTelemetry API and SDK, see the
specification.NoteOpenTelemetry C++ doesn’t support automatic instrumentation when the source code
of the library you want to instrument isn’t available.SetupFollow the instructions in the
Getting Started Guide to build
OpenTelemetry C++.TracesInitialize tracingauto provider = opentelemetry::trace::Provider::GetTracerProvider();
auto tracer = provider->GetTracer("foo_library", "1.0.0");
The TracerProvider acquired in the first step is a singleton object that is
usually provided by the OpenTelemetry C++ SDK. It is used to provide specific
implementations for API interfaces. In case no SDK is used, the API provides a
default no-op implementation of a TracerProvider.The Tracer acquired in the second step is needed to create and start Spans.Start a spanauto span = tracer->StartSpan("HandleRequest");
This creates a span, sets its name to "HandleRequest", and sets its start time
to the current time. Refer to the API documentation for other operations that
are available to enrich spans with additional data.Mark a span as activeauto scope = tracer->WithActiveSpan(span);
This marks a span as active and returns a Scope object. The scope object
controls how long a span is active. The span remains active for the lifetime of
the scope object.The concept of an active span is important, as any span that is created without
explicitly specifying a parent is parented to the currently active span. A span
without a parent is called root span.Create nested spansauto outer_span = tracer->StartSpan("Outer operation");
auto outer_scope = tracer->WithActiveSpan(outer_span);
{
    auto inner_span = tracer->StartSpan("Inner operation");
    auto inner_scope = tracer->WithActiveSpan(inner_span);
    // ... perform inner operation
    inner_span->End();
}
// ... perform outer operation
outer_span->End();
Spans can be nested, and have a parent-child relationship with other spans. When
a given span is active, the newly created span inherits the active span’s trace
ID, and other context attributes.Context propagation// set global propagator
opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(
    nostd::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>(
        new opentelemetry::trace::propagation::HttpTraceContext()));

// get global propagator
HttpTextMapCarrier<opentelemetry::ext::http::client::Headers> carrier;
auto propagator =
    opentelemetry::context::propagation::GlobalTextMapPropagator::GetGlobalPropagator();

//inject context to headers
auto current_ctx = opentelemetry::context::RuntimeContext::GetCurrent();
propagator->Inject(carrier, current_ctx);

//Extract headers to context
auto current_ctx = opentelemetry::context::RuntimeContext::GetCurrent();
auto new_context = propagator->Extract(carrier, current_ctx);
auto remote_span = opentelemetry::trace::propagation::GetSpan(new_context);
Context contains the metadata of the currently active Span including Span ID,
Trace ID, and flags. Context Propagation is an important mechanism in
distributed tracing to transfer this Context across service boundary often
through HTTP headers. OpenTelemetry provides a text-based approach to propagate
context to remote services using the W3C Trace Context HTTP headers.Further readingTraces APITraces SDKSimple Metrics ExampleMetricsInitialize exporter and readerInitialize an exporter and a reader. In this case, you initialize an OStream
Exporter which prints to stdout by default. The reader periodically collects
metrics from the Aggregation Store and exports them.std::unique_ptr<opentelemetry::sdk::metrics::MetricExporter> exporter{new opentelemetry::exporters::OStreamMetricExporter};
std::unique_ptr<opentelemetry::sdk::metrics::MetricReader> reader{
    new opentelemetry::sdk::metrics::PeriodicExportingMetricReader(std::move(exporter), options)};
Initialize a meter providerInitialize a MeterProvider and add the reader. Use this to obtain Meter objects
in the future.auto provider = std::shared_ptr<opentelemetry::metrics::MeterProvider>(new opentelemetry::sdk::metrics::MeterProvider());
auto p = std::static_pointer_cast<opentelemetry::sdk::metrics::MeterProvider>(provider);
p->AddMetricReader(std::move(reader));
Create a counterCreate a Counter instrument from the Meter, and record the measurement. Every
Meter pointer returned by the MeterProvider points to the same Meter. This means
that the Meter can combine metrics captured from different functions without
having to constantly pass the Meter around the library.auto meter = provider->GetMeter(name, "1.2.0");
auto double_counter = meter->CreateDoubleCounter(counter_name);
// Create a label set which annotates metric values
std::map<std::string, std::string> labels = {{"key", "value"}};
auto labelkv = common::KeyValueIterableView<decltype(labels)>{labels};
double_counter->Add(val, labelkv);
Create a histogramCreate a histogram instrument from the meter, and record the measurement.auto meter = provider->GetMeter(name, "1.2.0");
auto histogram_counter = meter->CreateDoubleHistogram("histogram_name");
histogram_counter->Record(val, labelkv);
Create an observable counterCreate an observable counter instrument from the meter, and add a callback. The
callback is used to record the measurement during metrics collection. Ensure to
keep the Instrument object active for the lifetime of collection.auto meter = provider->GetMeter(name, "1.2.0");
auto counter = meter->CreateDoubleObservableCounter(counter_name);
counter->AddCallback(MeasurementFetcher::Fetcher, nullptr);
Create viewsMap the counter instrument to sum aggregationCreate a view to map the Counter Instrument to Sum Aggregation. Add this view to
provider. View creation is optional unless you want to add custom aggregation
config, and attribute processor. Metrics SDK creates a missing view with default
mapping between Instrument and Aggregation.std::unique_ptr<opentelemetry::sdk::metrics::InstrumentSelector> instrument_selector{
    new opentelemetry::sdk::metrics::InstrumentSelector(opentelemetry::sdk::metrics::InstrumentType::kCounter, "counter_name")};
std::unique_ptr<opentelemetry::sdk::metrics::MeterSelector> meter_selector{
    new opentelemetry::sdk::metrics::MeterSelector(name, version, schema)};
std::unique_ptr<opentelemetry::sdk::metrics::View> sum_view{
    new opentelemetry::sdk::metrics::View{name, "description", opentelemetry::sdk::metrics::AggregationType::kSum}};
p->AddView(std::move(instrument_selector), std::move(meter_selector), std::move(sum_view));
Map the histogram instrument to histogram aggregationstd::unique_ptr<opentelemetry::sdk::metrics::InstrumentSelector> histogram_instrument_selector{
    new opentelemetry::sdk::metrics::InstrumentSelector(opentelemetry::sdk::metrics::InstrumentType::kHistogram, "histogram_name")};
std::unique_ptr<opentelemetry::sdk::metrics::MeterSelector> histogram_meter_selector{
    new opentelemetry::sdk::metrics::MeterSelector(name, version, schema)};
std::unique_ptr<opentelemetry::sdk::metrics::View> histogram_view{
    new opentelemetry::sdk::metrics::View{name, "description", opentelemetry::sdk::metrics::AggregationType::kHistogram}};
p->AddView(std::move(histogram_instrument_selector), std::move(histogram_meter_selector),
    std::move(histogram_view));
Map the observable counter instrument to sum aggregationstd::unique_ptr<opentelemetry::sdk::metrics::InstrumentSelector> observable_instrument_selector{
    new opentelemetry::sdk::metrics::InstrumentSelector(opentelemetry::sdk::metrics::InstrumentType::kObservableCounter,
                                     "observable_counter_name")};
std::unique_ptr<opentelemetry::sdk::metrics::MeterSelector> observable_meter_selector{
  new opentelemetry::sdk::metrics::MeterSelector(name, version, schema)};
std::unique_ptr<opentelemetry::sdk::metrics::View> observable_sum_view{
  new opentelemetry::sdk::metrics::View{name, "description", opentelemetry::sdk::metrics::AggregationType::kSum}};
p->AddView(std::move(observable_instrument_selector), std::move(observable_meter_selector),
         std::move(observable_sum_view));
Further readingMetrics APIMetrics SDKSimple Metrics ExampleLogsThe documentation for the logs API & SDK is missing, you can help make it
available by
editing this page.Next stepsYou’ll also want to configure an appropriate exporter to
export your telemetry data to one or more
telemetry backends.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified February 17, 2025: [i18n] Make `instrumentation-intro` shortcode a simple include (#6364) (5afa7238)\n\n\n\nDocsLanguage APIs & SDKsC++LibrariesUsing instrumentation librariesWhen you develop an app, you might use third-party libraries and frameworks to
accelerate your work. If you then instrument your app using OpenTelemetry, you
might want to avoid spending additional time to manually add traces, logs, and
metrics to the third-party libraries and frameworks you use.Many libraries and frameworks already support OpenTelemetry or are supported
through OpenTelemetry
instrumentation, so that they can
generate telemetry you can export to an observability back end.If you are instrumenting an app or service that use third-party libraries or
frameworks, follow these instructions to learn how to use natively instrumented
libraries and instrumentation libraries for your dependencies.Use natively instrumented librariesIf a library comes with OpenTelemetry support by default, you can get traces,
metrics, and logs emitted from that library by adding and setting up the
OpenTelemetry SDK with your app.The library might require some additional configuration for the instrumentation.
Go to the documentation for that library to learn more.Help wanted!As of today, we don't know about any C++ library that has OpenTelemetry
natively integrated. If you know about such a library,
let us know.Using instrumentation librariesWhen you develop an app, you might use third-party libraries and frameworks to
accelerate your work. If you then instrument your app using OpenTelemetry, you
might want to avoid spending additional time to manually add traces, logs, and
metrics to the third-party libraries and frameworks you use.Many libraries and frameworks already support OpenTelemetry or are supported
through OpenTelemetry
instrumentation, so that they can
generate telemetry you can export to an observability backend.If you are instrumenting an app or service that use third-party libraries or
frameworks, follow these instructions to learn how to use natively instrumented
libraries and instrumentation libraries for your dependencies.Use natively instrumented librariesIf a library comes with OpenTelemetry support by default, you can get traces,
metrics, and logs emitted from that library by adding and setting up the
OpenTelemetry SDK with your app.The library might require some additional configuration for the instrumentation.
See the documentation for that library to learn more.If a library doesn’t include OpenTelemetry support, you can use
instrumentation libraries
to generate telemetry data for a library or framework.SetupTo set up an instrumentation library see
otel-cpp-contribAvailable packagesA full list of instrumentation libraries available can be found in the
OpenTelemetry registryNext stepsAfter you’ve set up instrumentation libraries, you might want to add
additional instrumentation to collect
custom telemetry data.You might also want to configure an appropriate exporter to
export your telemetry data to one or more
telemetry backends.FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified August 8, 2024: Move integrations to registry (#4991) (825010e3)\n\n\n\nDocsLanguage APIs & SDKsC++ExportersExportersSend telemetry to the
OpenTelemetry Collector to make sure it’s exported
correctly. Using the Collector in production environments is a best practice. To
visualize your telemetry, export it to a backend such as
Jaeger, Zipkin,
Prometheus, or a
vendor-specific backend.Available exportersThe registry contains a list of exporters for C++.Among exporters, OpenTelemetry Protocol (OTLP) exporters are designed
with the OpenTelemetry data model in mind, emitting OTel data without any loss
of information. Furthermore, many tools that operate on telemetry data support
OTLP (such as Prometheus, Jaeger, and most vendors), providing you with a
high degree of flexibility when you need it. To learn more about OTLP, see OTLP
Specification.This page covers the main OpenTelemetry C++ exporters and how to set
them up.OTLPCollector SetupNoteIf you have a OTLP collector or backend already set up, you can skip this
section and setup the OTLP exporter dependencies for your
application.To try out and verify your OTLP exporters, you can run the collector in a docker
container that writes telemetry directly to the console.In an empty directory, create a file called collector-config.yaml with the
following content:receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
exporters:
  debug:
    verbosity: detailed
service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [debug]
    metrics:
      receivers: [otlp]
      exporters: [debug]
    logs:
      receivers: [otlp]
      exporters: [debug]
Now run the collector in a docker container:docker run -p 4317:4317 -p 4318:4318 --rm -v $(pwd)/collector-config.yaml:/etc/otelcol/config.yaml otel/opentelemetry-collector
This collector is now able to accept telemetry via OTLP. Later you may want to
configure the collector to send your telemetry
to your observability backend.DependenciesIf you want to send telemetry data to an OTLP endpoint (like the
OpenTelemetry Collector, Jaeger or
Prometheus), you can choose between two different protocols to
transport your data:HTTP/protobufgRPCMake sure that you have set the right cmake build variables while
building OpenTelemetry C++ from source:-DWITH_OTLP_GRPC=ON: To enable building OTLP gRPC exporter.-DWITH_OTLP_HTTP=ON: To enable building OTLP HTTP exporter.UsageNext, configure the exporter to point at an OTLP endpoint in your code.
HTTP/Proto
gRPC#include "opentelemetry/exporters/otlp/otlp_http_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/batch_span_processor_factory.h"
#include "opentelemetry/sdk/trace/batch_span_processor_options.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"
#include "opentelemetry/sdk/trace/tracer_provider.h"

#include "opentelemetry/exporters/otlp/otlp_http_metric_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_metric_exporter_options.h"
#include "opentelemetry/metrics/provider.h"
#include "opentelemetry/sdk/metrics/aggregation/default_aggregation.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader_factory.h"
#include "opentelemetry/sdk/metrics/meter_context_factory.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"

#include "opentelemetry/exporters/otlp/otlp_http_log_record_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_log_record_exporter_options.h"
#include "opentelemetry/logs/provider.h"
#include "opentelemetry/sdk/logs/logger_provider_factory.h"
#include "opentelemetry/sdk/logs/processor.h"
#include "opentelemetry/sdk/logs/simple_log_record_processor_factory.h"

namespace trace_api = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;

namespace metric_sdk = opentelemetry::sdk::metrics;
namespace metrics_api = opentelemetry::metrics;

namespace otlp = opentelemetry::exporter::otlp;

namespace logs_api = opentelemetry::logs;
namespace logs_sdk = opentelemetry::sdk::logs;


void InitTracer()
{
  trace_sdk::BatchSpanProcessorOptions bspOpts{};
  otlp::OtlpHttpExporterOptions opts;
  opts.url = "http://localhost:4318/v1/traces";
  auto exporter  = otlp::OtlpHttpExporterFactory::Create(opts);
  auto processor = trace_sdk::BatchSpanProcessorFactory::Create(std::move(exporter), bspOpts);
  std::shared_ptr<trace_api::TracerProvider> provider = trace_sdk::TracerProviderFactory::Create(std::move(processor));
  trace_api::Provider::SetTracerProvider(provider);
}

void InitMetrics()
{
  otlp::OtlpHttpMetricExporterOptions opts;
  opts.url = "http://localhost:4318/v1/metrics";
  auto exporter = otlp::OtlpHttpMetricExporterFactory::Create(opts);
  metric_sdk::PeriodicExportingMetricReaderOptions reader_options;
  reader_options.export_interval_millis = std::chrono::milliseconds(1000);
  reader_options.export_timeout_millis  = std::chrono::milliseconds(500);
  auto reader = metric_sdk::PeriodicExportingMetricReaderFactory::Create(std::move(exporter), reader_options);
  auto context = metric_sdk::MeterContextFactory::Create();
  context->AddMetricReader(std::move(reader));
  auto u_provider = metric_sdk::MeterProviderFactory::Create(std::move(context));
  std::shared_ptr<metrics_api::MeterProvider> provider(std::move(u_provider));
  metrics_api::Provider::SetMeterProvider(provider);
}

void InitLogger()
{
  otlp::OtlpHttpLogRecordExporterOptions opts;
  opts.url = "http://localhost:4318/v1/logs";
  auto exporter  = otlp::OtlpHttpLogRecordExporterFactory::Create(opts);
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  std::shared_ptr<logs_api::LoggerProvider> provider =
      logs_sdk::LoggerProviderFactory::Create(std::move(processor));
  logs_api::Provider::SetLoggerProvider(provider);
}
#include "opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/batch_span_processor_factory.h"
#include "opentelemetry/sdk/trace/batch_span_processor_options.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"
#include "opentelemetry/sdk/trace/tracer_provider.h"

#include "opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_options.h"
#include "opentelemetry/metrics/provider.h"
#include "opentelemetry/sdk/metrics/aggregation/default_aggregation.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader_factory.h"
#include "opentelemetry/sdk/metrics/meter_context_factory.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"

#include "opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_options.h"
#include "opentelemetry/logs/provider.h"
#include "opentelemetry/sdk/logs/logger_provider_factory.h"
#include "opentelemetry/sdk/logs/processor.h"
#include "opentelemetry/sdk/logs/simple_log_record_processor_factory.h"

namespace trace_api = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;

namespace metric_sdk = opentelemetry::sdk::metrics;
namespace metrics_api = opentelemetry::metrics;

namespace otlp = opentelemetry::exporter::otlp;

namespace logs_api = opentelemetry::logs;
namespace logs_sdk = opentelemetry::sdk::logs;

void InitTracer()
{
  trace_sdk::BatchSpanProcessorOptions bspOpts{};
  opentelemetry::exporter::otlp::OtlpGrpcExporterOptions opts;
  opts.endpoint = "localhost:4317";
  opts.use_ssl_credentials = true;
  opts.ssl_credentials_cacert_as_string = "ssl-certificate";
  auto exporter  = otlp::OtlpGrpcExporterFactory::Create(opts);
  auto processor = trace_sdk::BatchSpanProcessorFactory::Create(std::move(exporter), bspOpts);
  std::shared_ptr<opentelemetry::trace_api::TracerProvider> provider =
      trace_sdk::TracerProviderFactory::Create(std::move(processor));
  // Set the global trace provider
  trace_api::Provider::SetTracerProvider(provider);
}

void InitMetrics()
{
  otlp::OtlpGrpcMetricExporterOptions opts;
  opts.endpoint = "localhost:4317";
  opts.use_ssl_credentials = true;
  opts.ssl_credentials_cacert_as_string = "ssl-certificate";
  auto exporter = otlp::OtlpGrpcMetricExporterFactory::Create(opts);
  metric_sdk::PeriodicExportingMetricReaderOptions reader_options;
  reader_options.export_interval_millis = std::chrono::milliseconds(1000);
  reader_options.export_timeout_millis  = std::chrono::milliseconds(500);
  auto reader = metric_sdk::PeriodicExportingMetricReaderFactory::Create(std::move(exporter), reader_options);
  auto context = metric_sdk::MeterContextFactory::Create();
  context->AddMetricReader(std::move(reader));
  auto u_provider = metric_sdk::MeterProviderFactory::Create(std::move(context));
  std::shared_ptr<opentelemetry::metrics::MeterProvider> provider(std::move(u_provider));
  metrics_api::Provider::SetMeterProvider(provider);
}

void InitLogger()
{
  otlp::OtlpGrpcLogRecordExporterOptions opts;
  opts.endpoint = "localhost:4317";
  opts.use_ssl_credentials = true;
  opts.ssl_credentials_cacert_as_string = "ssl-certificate";
  auto exporter  = otlp::OtlpGrpcLogRecordExporterFactory::Create(opts);
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  nostd::shared_ptr<logs_api::LoggerProvider> provider(
      logs_sdk::LoggerProviderFactory::Create(std::move(processor)));
  logs_api::Provider::SetLoggerProvider(provider);
}
ConsoleTo debug your instrumentation or see the values locally in development, you can
use exporters writing telemetry data to the console (stdout).While
building OpenTelemetry C++ from source
the OStreamSpanExporter is included in the build by default.#include "opentelemetry/exporters/ostream/span_exporter_factory.h"
#include "opentelemetry/sdk/trace/exporter.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"

#include "opentelemetry/exporters/ostream/metrics_exporter_factory.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"
#include "opentelemetry/metrics/provider.h"

#include "opentelemetry/exporters/ostream/log_record_exporter_factory.h"
#include "opentelemetry/logs/provider.h"
#include "opentelemetry/sdk/logs/logger_provider_factory.h"
#include "opentelemetry/sdk/logs/processor.h"
#include "opentelemetry/sdk/logs/simple_log_record_processor_factory.h"

namespace trace_api      = opentelemetry::trace;
namespace trace_sdk      = opentelemetry::sdk::trace;
namespace trace_exporter = opentelemetry::exporter::trace;

namespace metrics_sdk      = opentelemetry::sdk::metrics;
namespace metrics_api      = opentelemetry::metrics;
namespace metrics_exporter = opentelemetry::exporter::metrics;

namespace logs_api = opentelemetry::logs;
namespace logs_sdk = opentelemetry::sdk::logs;
namespace logs_exporter = opentelemetry::exporter::logs;

void InitTracer()
{
  auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();
  auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));
  std::shared_ptr<opentelemetry::trace::TracerProvider> provider = trace_sdk::TracerProviderFactory::Create(std::move(processor));
  trace_api::Provider::SetTracerProvider(provider);
}

void InitMetrics()
{
    auto exporter = metrics_exporter::OStreamMetricExporterFactory::Create();
    auto u_provider = metrics_sdk::MeterProviderFactory::Create();
    std::shared_ptr<opentelemetry::metrics::MeterProvider> provider(std::move(u_provider));
    auto *p = static_cast<metrics_sdk::MeterProvider *>(u_provider.get());
    p->AddMetricReader(std::move(exporter));
    metrics_api::Provider::SetMeterProvider(provider);
}

void InitLogger()
{
  auto exporter = logs_exporter::OStreamLogRecordExporterFactory::Create();
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  nostd::shared_ptr<logs_api::LoggerProvider> provider(
      logs_sdk::LoggerProviderFactory::Create(std::move(processor)));
  logs_api::Provider::SetLoggerProvider(provider);
}
JaegerBackend SetupJaeger natively supports OTLP to receive trace
data. You can run Jaeger in a docker container with the UI accessible on port
16686 and OTLP enabled on ports 4317 and 4318:docker run --rm \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  -p 9411:9411 \
  jaegertracing/all-in-one:latest
UsageNow following the instruction to setup the OTLP exporters.PrometheusTo send your metric data to Prometheus, you can either
enable Prometheus’ OTLP Receiver
and use the OTLP exporter or you can use the Prometheus exporter, a
MetricReader that starts an HTTP server that collects metrics and serialize to
Prometheus text format on request.Backend SetupNoteIf you have Prometheus or a Prometheus-compatible backend already set up, you
can skip this section and setup the Prometheus or
OTLP exporter dependencies for your application.You can run Prometheus in a docker container,
accessible on port 9090 by following these instructions:Create a file called prometheus.yml with the following content:scrape_configs:
  - job_name: dice-service
    scrape_interval: 5s
    static_configs:
      - targets: [host.docker.internal:9464]
Run Prometheus in a docker container with the UI accessible on port 9090:docker run --rm -v ${PWD}/prometheus.yml:/prometheus/prometheus.yml -p 9090:9090 prom/prometheus --enable-feature=otlp-write-receive
NoteWhen using Prometheus’ OTLP Receiver, make sure that you set the OTLP endpoint
for metrics in your application to http://localhost:9090/api/v1/otlp.Not all docker environments support host.docker.internal. In some cases you
may need to replace host.docker.internal with localhost or the IP address of
your machine.DependenciesTo send your trace data to Prometheus, make sure that
you have set the right cmake build variables while
building OpenTelemetry C++ from source:cmake -DWITH_PROMETHEUS=ON ...
Update your OpenTelemetry configuration to use the
Prometheus Exporter:#include "opentelemetry/exporters/prometheus/exporter_factory.h"
#include "opentelemetry/exporters/prometheus/exporter_options.h"
#include "opentelemetry/metrics/provider.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"

namespace metrics_sdk      = opentelemetry::sdk::metrics;
namespace metrics_api      = opentelemetry::metrics;
namespace metrics_exporter = opentelemetry::exporter::metrics;

void InitMetrics()
{
    metrics_exporter::PrometheusExporterOptions opts;
    opts.url = "localhost:9464";
    auto prometheus_exporter = metrics_exporter::PrometheusExporterFactory::Create(opts);
    auto u_provider = metrics_sdk::MeterProviderFactory::Create();
    auto *p = static_cast<metrics_sdk::MeterProvider *>(u_provider.get());
    p->AddMetricReader(std::move(prometheus_exporter));
    std::shared_ptr<metrics_api::MeterProvider> provider(std::move(u_provider));
    metrics_api::Provider::SetMeterProvider(provider);
}
With the above you can access your metrics at http://localhost:9464/metrics.
Prometheus or an OpenTelemetry Collector with the Prometheus receiver can scrape
the metrics from this endpoint.ZipkinBackend SetupNoteIf you have Zipkin or a Zipkin-compatible backend already set up, you can skip
this section and setup the Zipkin exporter dependencies
for your application.You can run Zipkin on in a Docker container by executing
the following command:docker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin
DependenciesTo send your trace data to Zipkin, make sure that you have
set the right cmake build variables while
building OpenTelemetry C++ from source:cmake -DWITH_ZIPKIN=ON ...
Update your OpenTelemetry configuration to use the
Zipkin Exporter
and to send data to your Zipkin backend:#include "opentelemetry/exporters/zipkin/zipkin_exporter_factory.h"
#include "opentelemetry/sdk/resource/resource.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"

namespace trace     = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;
namespace zipkin    = opentelemetry::exporter::zipkin;
namespace resource  = opentelemetry::sdk::resource;

void InitTracer()
{
  zipkin::ZipkinExporterOptions opts;
  resource::ResourceAttributes attributes = {{"service.name", "zipkin_demo_service"}};
  auto resource                           = resource::Resource::Create(attributes);
  auto exporter                           = zipkin::ZipkinExporterFactory::Create(opts);
  auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));
  std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
      trace_sdk::TracerProviderFactory::Create(std::move(processor), resource);
  // Set the global trace provider
  trace::Provider::SetTracerProvider(provider);
}
Custom exportersFinally, you can also write your own exporter. For more information, see the
SpanExporter Interface in the API documentation.Batching span and log recordsThe OpenTelemetry SDK provides a set of default span and log record processors,
that allow you to either emit spans one-by-on (“simple”) or batched. Using
batching is recommended, but if you do not want to batch your spans or log
records, you can use a simple processor instead as follows:
Batch
Simple#include "opentelemetry/exporters/otlp/otlp_http_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/batch_span_processor_factory.h"
#include "opentelemetry/sdk/trace/batch_span_processor_options.h"

opentelemetry::sdk::trace::BatchSpanProcessorOptions options{};

auto exporter  = opentelemetry::exporter::otlp::OtlpHttpExporterFactory::Create(opts);
auto processor = opentelemetry::sdk::trace::BatchSpanProcessorFactory::Create(std::move(exporter), options);
#include "opentelemetry/exporters/otlp/otlp_http_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"

auto exporter  = opentelemetry::exporter::otlp::OtlpHttpExporterFactory::Create(opts);
auto processor = opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(std::move(exporter));
FeedbackWas this page helpful?Yes
NoThank you. Your feedback is appreciated!Please let us know how we can improve this page. Your feedback is appreciated!Last modified March 21, 2025: [i18n] Separate prose out of Convert docs/exporter/intro.md, and other improvements (#6583) (5db74ea6)\n\n\n\nOpenTelemetry C++
          
              
                latest
              

  
    
    
    
  

        
              OpenTelemetry C++ API

OpenTelemetry C++ API

OpenTelemetry C++ SDK

OpenTelemetry C++ SDK

Reference Documentation

Reference documentation

Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics

Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics

Performance

Performance Tests - Benchmarks

Further Reading

Source code
Getting help


        
      
    

    
          
          OpenTelemetry C++
      

      
        
          
  
      
      OpenTelemetry C++
      
               Edit on GitHub
      
  
  

          
           
             
  
OpenTelemetry C++

OpenTelemetry C++ API

OpenTelemetry C++ API



OpenTelemetry C++ SDK

OpenTelemetry C++ SDK



Reference Documentation

Reference documentation



Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics



Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics



Performance

Performance Tests - Benchmarks



Further Reading

Source code
Getting help





           
          
          
        Next 
    

  

  
    © Copyright 2021, OpenTelemetry authors.
      Revision 61e7429d.
      
  

  Built with Sphinx using a
    theme
    provided by Read the Docs.\nOpenTelemetry C++
          
              
                latest
              

  
    
    
    
  

        
              OpenTelemetry C++ API

OpenTelemetry C++ API

OpenTelemetry C++ SDK

OpenTelemetry C++ SDK

Reference Documentation

Reference documentation

Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics

Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics

Performance

Performance Tests - Benchmarks

Further Reading

Source code
Getting help\nOpenTelemetry C++
          
              
                latest\nOpenTelemetry C++ API

OpenTelemetry C++ API

OpenTelemetry C++ SDK

OpenTelemetry C++ SDK

Reference Documentation

Reference documentation

Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics

Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics

Performance

Performance Tests - Benchmarks

Further Reading

Source code
Getting help\nOpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nReference Documentation\nReference Documentation\nReference documentation\nReference documentation\nReference Documentation (API)\nReference Documentation (API)\nNamespace opentelemetry::trace\nNamespace opentelemetry::trace\nNamespace opentelemetry::baggage\nNamespace opentelemetry::baggage\nNamespace opentelemetry::common\nNamespace opentelemetry::common\nNamespace opentelemetry::context\nNamespace opentelemetry::context\nNamespace opentelemetry::metrics\nNamespace opentelemetry::metrics\nReference Documentation (SDK)\nReference Documentation (SDK)\nNamespace opentelemetry::sdk::trace\nNamespace opentelemetry::sdk::trace\nNamespace opentelemetry::sdk::instrumentationlibrary\nNamespace opentelemetry::sdk::instrumentationlibrary\nNamespace opentelemetry::sdk::resource\nNamespace opentelemetry::sdk::resource\nNamespace opentelemetry::sdk::metrics\nNamespace opentelemetry::sdk::metrics\nPerformance Tests - Benchmarks\nPerformance Tests - Benchmarks\nOpenTelemetry C++
      
               Edit on GitHub
      
  
  

          
           
             
  
OpenTelemetry C++

OpenTelemetry C++ API

OpenTelemetry C++ API



OpenTelemetry C++ SDK

OpenTelemetry C++ SDK



Reference Documentation

Reference documentation



Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics



Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics



Performance

Performance Tests - Benchmarks



Further Reading

Source code
Getting help





           
          
          
        Next 
    

  

  
    © Copyright 2021, OpenTelemetry authors.
      Revision 61e7429d.
      
  

  Built with Sphinx using a
    theme
    provided by Read the Docs.\nOpenTelemetry C++
      
               Edit on GitHub
      
  
  

          
           
             
  
OpenTelemetry C++

OpenTelemetry C++ API

OpenTelemetry C++ API



OpenTelemetry C++ SDK

OpenTelemetry C++ SDK



Reference Documentation

Reference documentation



Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics



Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics



Performance

Performance Tests - Benchmarks



Further Reading

Source code
Getting help





           
          
          
        Next 
    

  

  
    © Copyright 2021, OpenTelemetry authors.
      Revision 61e7429d.
      
  

  Built with Sphinx using a
    theme
    provided by Read the Docs.\nOpenTelemetry C++
      
               Edit on GitHub\nOpenTelemetry C++

OpenTelemetry C++ API

OpenTelemetry C++ API



OpenTelemetry C++ SDK

OpenTelemetry C++ SDK



Reference Documentation

Reference documentation



Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics



Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics



Performance

Performance Tests - Benchmarks



Further Reading

Source code
Getting help\nOpenTelemetry C++

OpenTelemetry C++ API

OpenTelemetry C++ API



OpenTelemetry C++ SDK

OpenTelemetry C++ SDK



Reference Documentation

Reference documentation



Reference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics



Reference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics



Performance

Performance Tests - Benchmarks



Further Reading

Source code
Getting help\nOpenTelemetry C++ API

OpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ API\nOpenTelemetry C++ SDK

OpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nOpenTelemetry C++ SDK\nReference Documentation

Reference documentation\nReference Documentation\nReference Documentation\nReference documentation\nReference documentation\nReference Documentation (API)

Namespace opentelemetry::trace
Namespace opentelemetry::baggage
Namespace opentelemetry::common
Namespace opentelemetry::context
Namespace opentelemetry::metrics\nReference Documentation (API)\nReference Documentation (API)\nNamespace opentelemetry::trace\nNamespace opentelemetry::trace\nNamespace opentelemetry::baggage\nNamespace opentelemetry::baggage\nNamespace opentelemetry::common\nNamespace opentelemetry::common\nNamespace opentelemetry::context\nNamespace opentelemetry::context\nNamespace opentelemetry::metrics\nNamespace opentelemetry::metrics\nReference Documentation (SDK)

Namespace opentelemetry::sdk::trace
Namespace opentelemetry::sdk::instrumentationlibrary
Namespace opentelemetry::sdk::resource
Namespace opentelemetry::sdk::metrics\nReference Documentation (SDK)\nReference Documentation (SDK)\nNamespace opentelemetry::sdk::trace\nNamespace opentelemetry::sdk::trace\nNamespace opentelemetry::sdk::instrumentationlibrary\nNamespace opentelemetry::sdk::instrumentationlibrary\nNamespace opentelemetry::sdk::resource\nNamespace opentelemetry::sdk::resource\nNamespace opentelemetry::sdk::metrics\nNamespace opentelemetry::sdk::metrics\nPerformance

Performance Tests - Benchmarks\nPerformance Tests - Benchmarks\nPerformance Tests - Benchmarks\nFurther Reading

Source code
Getting help\n© Copyright 2021, OpenTelemetry authors.
      Revision 61e7429d.\n© Copyright 2021, OpenTelemetry authors.
      Revision 61e7429d.\n\n\nopen-telemetry
    
    /
    
      opentelemetry-cpp
    

    Public
  


        

        
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    470

  

  
        
            
          Star
          1k

  



        
      

        



          

  
      
  
    
              
        Code
          


    

      
  
    
              
        Issues
          178


    

      
  
    
              
        Pull requests
          11


    

      
  
    
              
        Discussions
          


    

      
  
    
              
        Actions
          


    

      
  
    
              
        Projects
          0


    

      
  
    
              
        Security
          

    

      
  
    
              
        Insights
          


    


          
  
      
Additional navigation options



  
    
                
  
    
        
    
    
    
        
          
        
      
        
          Code
      

  

        
    
    
    
        
          
        
      
        
          Issues
      

  

        
    
    
    
        
          
        
      
        
          Pull requests
      

  

        
    
    
    
        
          
        
      
        
          Discussions
      

  

        
    
    
    
        
          
        
      
        
          Actions
      

  

        
    
    
    
        
          
        
      
        
          Projects
      

  

        
    
    
    
        
          
        
      
        
          Security
      

  

        
    
    
    
        
          
        
      
        
          Insights
      

  

    




      
  



  

  




    
    



    
      
    









  
  
     Files mainBreadcrumbsopentelemetry-cpp/examples/Copy pathDirectory actionsMore optionsDirectory actionsMore optionsLatest commit HistoryHistory mainBreadcrumbsopentelemetry-cpp/examples/TopFolders and filesNameNameLast commit messageLast commit dateparent directory..batchbatch  commoncommon  etw_threadsetw_threads  grpcgrpc  httphttp  logs_simplelogs_simple  metrics_simplemetrics_simple  multi_processormulti_processor  multithreadedmultithreaded  otlpotlp  pluginplugin  prometheusprometheus  simplesimple  zipkinzipkin  CMakeLists.txtCMakeLists.txt  View all files\n\n\n\nRegistryFind libraries, plugins, integrations, and other useful tools for using and extending OpenTelemetry.The OpenTelemetry Registry allows you to search for instrumentation libraries,
collector components, utilities, and other useful projects in the OpenTelemetry
ecosystem. If you are a project maintainer, you can
add your project to the OpenTelemetry Registry.Search 870 entries





Submit
Reset
LanguageAny LanguageCollectorC++.NETElixirErlangGoJavaJavaScriptPHPPythonRubyRustSwiftCrystalDartHaskellJavascriptJuliaKotlinLuaMatlabOcamlPerlScalaShellYamlTypeAny Component
Application integration
Core
Exporter
Extension
Instrumentation
Log bridge
Processor
Provider
Receiver
Resource detector
UtilitiesFlagsAny Flag
Deprecated
First party
Native
Loading results…Cloud Foundry nativeby
Cloud Foundry AuthorsAdds an OpenTelemetry Collector to all Linux VMs to egress metrics and traces.collector
cloud foundryCollectorLanguageApplication integrationComponentApache-2.0License Website DocumentationThousandEyes for OpenTelemetry nativeby
Cisco ThousandEyesIt allows you to export ThousandEyes telemetry data in OTel format.collector
thousandeyes
ciscoCollectorLanguageApplication integrationComponentCommercialLicense Website DocumentationTracing ClickHouse with OpenTelemetry nativeby
ClickHouse AuthorsClickHouse creates trace spans for each query and some of the query execution stages, such as query planning or distributed queries.clickhouse
database
c++C++LanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryEnvoy Proxy native
 graduatedby
Envoy Proxy AuthorsThe OpenTelemetry tracing sandbox demonstrates Envoy’s request tracing capabilities using OpenTelemetry as the tracing provider.envoy
c++
graduatedC++LanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryMATLAB Interface to OpenTelemetry first party integrationby
Duncan PoMATLAB interface to OpenTelemetry.c++
matlabC++LanguageApplication integrationComponentCommercialLicense Website Documentation RepositoryMySQL Enterprise Server nativeby
MySQLMySQL Enterprise Edition generates OTel trace data on Linux platforms.mysql
enterprise
database
c++C++LanguageApplication integrationComponentCommercialLicense Website DocumentationBuildKit nativeby
Moby Project AuthorsBuildKit supports OpenTelemetry.go
docker
moby
buildkitGoLanguageApplication integrationComponentApache-2.0License Website Documentation Repositorycontainerd native
 graduatedby
containerd Authorscontainerd supports OpenTelemetry tracing since v1.6.0. Tracing currently targets only gRPC calls.go
containerd
graduatedGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryCortex native
 incubatingby
cortex AuthorsCortex uses Jaeger or OpenTelemetry to implement distributed tracinggo
cortex
incubatingGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryCRI-O native
 graduatedby
CRI-O AuthorsThe crio.tracing table containers settings pertaining to the export of OpenTelemetry trace data.go
cri-o
graduatedGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryDapr native
 incubatingby
Dapr AuthorsDapr directly writes traces using the OpenTelemetry (OTLP) protocol as the recommended method.go
incubating
daprGoLanguageApplication integrationComponentApache-2.0License Website Documentation Repositorybuildx nativeby
Docker Incbuildx supports OpenTelemetry.go
docker
buildx
buildkitGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryFlipt nativeby
Flipt AuthorsFlipt supports distributed tracing via the OpenTelemetry project.go
fliptGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryHarbor native
 graduatedby
Harbor AuthorsHarbor can provide distributed tracing data for operators and administrator to know the current running status and to help troubleshootinggo
harbor
graduatedGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryIstio native
 graduatedby
Istio AuthorsMake your application participate in tracing with OpenTelemetry, regardless of the language, framework, or platform you use to build your application.go
istio
graduatedGoLanguageApplication integrationComponentApache-2.0License Website DocumentationJaeger native
 graduatedby
Jaeger AuthorsJaeger has the ability to trace some of its own components, namely the requests to the Query service.jaeger
go
tracingGoLanguageApplication integrationComponentApache 2.0License Website Documentation RepositoryKEDA native
 graduatedby
KEDA AuthorsThe KEDA Operator supports outputting metrics to the OpenTelemetry Collector using HTTP.go
keda
graduatedGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryKnative native
 incubatingby
Knative AuthorsAnalyze and understand the performance and behavior of Knative componentsgo
incubating
knativeGoLanguageApplication integrationComponentApache-2.0License Website DocumentationKong Mesh nativeby
KongKong Mesh provides integration with OpenTelemetry.go
kong
meshGoLanguageApplication integrationComponentCommercialLicense Website DocumentationKrakenD API Gateway first party integrationby
KrakenD AuthorsThe telemetry/opentelemetry component in KrakenD collects the activity generated for the enabled layers and pushes or exposes the data for pulling.go
krakend
api
gatewayGoLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryTraces For Kubernetes System Components native
 graduatedby
Kubernetes AuthorsSystem component traces record the latency of and relationships between operations in the cluster.go
kubernetes
graduatedGoLanguageApplication integrationComponentApache-2.0License Website DocumentationKuma native
 sandboxby
Kuma AuthorsKuma provides integration with OpenTelemetrygo
kuma
sandboxGoLanguageApplication integrationComponentApache-2.0License Website DocumentationKyverno first party integration
 incubatingby
Kyverno AuthorsKyverno integrates OpenTelemetry.go
kyverno
incubatingGoLanguageApplication integrationComponentApache-2.0License Website DocumentationOpen Policy Agent native
 graduatedby
Open Policy Agent AuthorsOPA will emit spans to an OpenTelemetry Collector via gRPC.go
opa
open
policy
agent
graduatedGoLanguageApplication integrationComponentApache-2.0License Website DocumentationOpenFeature flagd native
 incubatingby
OpenFeature Authorsflagd provides telemetry data out of the box. This telemetry data is compatible with OpenTelemetry.go
incubating
openfeature
flagdGoLanguageApplication integrationComponentApache-2.0License Website DocumentationOtterize network mapper nativeby
OtterizeOpenTelemetry support for network mapper.go
otterize
network
mapperGoLanguageApplication integrationComponentApache-2.0License Website DocumentationRoadRunner PHP application server first party integrationby
Spiral ScoutRoadRunner offers OTel (OpenTelemetry) plugin, which provides a unified standard for tracing, logging, and metrics information.go
php
roadrunnerGoLanguageApplication integrationComponentMITLicense Website Documentation RepositoryThanos native
 incubatingby
Thanos AuthorsThanos supports exporting traces in the OpenTelemetry Protocol (OTLP)go
incubating
thanosGoLanguageApplication integrationComponentApache-2.0License Website DocumentationTraefik Hub API Management nativeby
Traefik LabsTraefik Hub uses OpenTelemetry to get insights into system performance and behavior.go
traefik
hub
api
managementGoLanguageApplication integrationComponentCommercialLicense Website DocumentationTyk API Gateway nativeby
Tyk TechnologiesYou can leverage the power of OpenTelemetry to enhance your API monitoring with end-to-end distributed tracing.go
tyk
api
gatewayGoLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryKeycloak incubatingby
Keycloak ContributorsKeycloak utilizes OpenTelemetry for distributed tracing provided by the Quarkus OpenTelemetry extension.keycloak
iam
ssoJavaLanguageApplication integrationComponentApache 2.0License Website Documentation RepositoryMicrocks native
 sandboxby
Microcks AuthorsThe main webapp component supports OpenTelemetry instrumentation for logs, distributed tracing and metrics.microcks
java
sandboxJavaLanguageApplication integrationComponentApache-2.0License Website DocumentationStrimzi native
 incubatingby
Strimzi AuthorsIn Strimzi, tracing facilitates the end-to-end tracking of messages: from source systems to Kafka, and then from Kafka to target systems and applications.incubating
java
strimziJavaLanguageApplication integrationComponentApache-2.0License Website DocumentationKong API Gateway first party integrationby
Kongkong
api
gateway
luaLuaLanguageApplication integrationComponentApache-2.0License Website DocumentationOpenFGA sandboxby
OpenFGA AuthorsOpenFGA traces can be collected with the OTLP data format.openfga
authorization
permission
engineGoLanguageApplication integrationComponentApache 2.0License Website Documentation RepositoryAPIContext nativeby
APIContextSend data from APIContext to any platform that intakes OpenTelemetry with our OpenTelemetry Webhookpython
apimetricsPythonLanguageApplication integrationComponentCommercialLicense Website DocumentationDistributed tracing of Checkmk with OpenTelemetry nativeby
Checkmk GmbHWith this integration we introduced a new way for the developers to look deeper into what happens inside Checkmk through the use of OpenTelemetry traces, so that everyone using Checkmk could enjoy monitoring their infrastructure with a tool with the best performance and fewer bottlenecks.Python
CheckmkPythonLanguageApplication integrationComponentGPL-2.0License Website Documentation RepositoryCisco Network Services Orchestrator (NSO) first party integrationby
CiscoThe NSO Observability Exporter supports export of progress traces using OTLP.cisco
network
services
orchestrator
nso
pythonPythonLanguageApplication integrationComponentCommercialLicense Website DocumentationMLflow nativeby
MLflow AuthorsThe MLflow tracing feature is built using OpenTelemetry, and allows users to trace the execution of their generative AI applications.python
MLflow
LLMsPythonLanguageApplication integrationComponentApache-2.0License Website Documentation RepositoryFluent CI Engine nativeby
Fluent CIFluentCI Engine supports OpenTelemetry tracing.fluentci
engine
rustRustLanguageApplication integrationComponentMLPv2.0License Website DocumentationKubewarden native
 sandboxby
Kubewarden AuthorsKubewarden’s components are instrumented with the OpenTelemetry SDK, reporting data to an OpenTelemetry Collector.sandbox
rust
kubewardenRustLanguageApplication integrationComponentApache-2.0License Website Documentationrustup nativeby
The Rust Project DevelopersThe feature otel can be used when building rustup to turn on OpenTelemetry tracing with an OTLP gRPC exporter.rust
rustupRustLanguageApplication integrationComponentApache-2.0 OR MITLicense Website Documentation RepositoryOpenTelemetry Collector Builderby
🔭 OpenTelemetry Authors 🔭A CLI tool that generates OpenTelemetry Collector binaries based on a manifest.collectorv0.124.0VersionCollectorLanguageCoreComponentApache 2.0License Documentation Package Details (go) RepositoryCollector Environment Variable Providerby
🔭 OpenTelemetry Authors 🔭Environment variable provider for OpenTelemetry Collector configuration maps.go
confmap
provider
collector
env Quick InstallWhen building a custom collector you can add this provider to the manifest file like the following:providers:
    - gomod:
        go.opentelemetry.io/collector/confmap/provider/envprovider v1.30.0
v1.30.0VersionCollectorLanguageProviderComponentApache 2.0License Package Details (go-collector) RepositoryCollector File Providerby
🔭 OpenTelemetry Authors 🔭File provider for OpenTelemetry Collector configuration maps.go
confmap
provider
collector
file Quick InstallWhen building a custom collector you can add this provider to the manifest file like the following:providers:
    - gomod:
        go.opentelemetry.io/collector/confmap/provider/fileprovider v1.30.0
v1.30.0VersionCollectorLanguageProviderComponentApache 2.0License Package Details (go-collector) RepositoryCollector HTTP Providerby
🔭 OpenTelemetry Authors 🔭HTTP provider for OpenTelemetry Collector configuration maps.go
confmap
provider
collector
http Quick InstallWhen building a custom collector you can add this provider to the manifest file like the following:providers:
    - gomod:
        go.opentelemetry.io/collector/confmap/provider/httpprovider v1.30.0
v1.30.0VersionCollectorLanguageProviderComponentApache 2.0License Package Details (go-collector) RepositoryCollector HTTPS Providerby
🔭 OpenTelemetry Authors 🔭HTTPS provider for OpenTelemetry Collector configuration maps.go
confmap
provider
collector
https Quick InstallWhen building a custom collector you can add this provider to the manifest file like the following:providers:
    - gomod:
        go.opentelemetry.io/collector/confmap/provider/httpsprovider v1.30.0
v1.30.0VersionCollectorLanguageProviderComponentApache 2.0License Package Details (go-collector) RepositoryCollector YAML Providerby
🔭 OpenTelemetry Authors 🔭YAML provider for OpenTelemetry Collector configuration maps.go
confmap
provider
collector
yaml Quick InstallWhen building a custom collector you can add this provider to the manifest file like the following:providers:
    - gomod:
        go.opentelemetry.io/collector/confmap/provider/yamlprovider v1.30.0
v1.30.0VersionCollectorLanguageProviderComponentApache 2.0License Package Details (go-collector) RepositoryAlertmanager Exporterby
🔭 OpenTelemetry Authors 🔭Exports OTel Events (SpanEvent in Tracing added by AddEvent API) as Alerts to Alertmanager backend to notify Errors or Change events.alertmanager
prometheus
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/alertmanagerexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAlibaba Cloud Log Service Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Alibaba Cloud Log Service Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/alibabacloudlogserviceexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAPIClarity HTTP Exporterby
CiscoExports traces and/or metrics via HTTP to an APIClarity endpoint for analysis.go
exporter
collector
apiclarity Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/openclarity/apiclarity/plugins/otel-collector/apiclarityexporter v0.0.0
v0.0.0VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAWS X-Ray Tracing Exporterby
🔭 OpenTelemetry Authors 🔭The AWS X-Ray Tracing Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAWS CloudWatch Logs Exporterby
🔭 OpenTelemetry Authors 🔭AWS CloudWatch Logs Exporter sends logs data to AWS CloudWatch Logsgo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awscloudwatchlogsexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAWS CloudWatch EMF Collector Exporterby
🔭 OpenTelemetry Authors 🔭The AWS CloudWatch EMF Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsemfexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryKinesis Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Kinesis Exporter for Go.go
exporter
collectorGoLanguageExporterComponentApache 2.0License RepositoryAWS S3 Exporter for OpenTelemetry Collectorby
🔭 OpenTelemetry Authors 🔭This exporter targets to support proto/JSON and proto/binary formataws
s3
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awss3exporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAzure Monitor Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Azure Monitor Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/azuremonitorexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryApache Blob Exporter newby
🔭 OpenTelemetry Authors 🔭This exporter supports sending traces, metrics, and logs data to [Azure Blob storage] (https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blobs-overview).go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/azureblobexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAzure Data Explorer Exporterby
🔭 OpenTelemetry Authors 🔭This exporter sends metrics, logs and trace data to Azure Data Explorergo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/azuredataexplorerexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryCarbon Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Carbon Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/carbonexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryCassandra Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending OpenTelemetry logs and traces to Cassandracassandra
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/cassandraexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryClickHouse Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending OpenTelemetry logs and spans to ClickHousego
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/clickhouseexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryCoralogix Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Coralogix Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/coralogixexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryDatadog Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Datadog Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/datadogexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryDataset Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Dataset Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/datasetexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryDebug Exporterby
🔭 OpenTelemetry Authors 🔭Exports data to the console via zap.Logger.debug
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        go.opentelemetry.io/collector/exporter/debugexporter v0.124.0
v0.124.0VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryApache Doris Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending traces, metrics, and logs data to Apache Doris (version >= 2.1).doris
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/dorisexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryElasticsearch Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending OpenTelemetry logs to Elasticsearchgo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/elasticsearchexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryFile Collector Exporterby
🔭 OpenTelemetry Authors 🔭The File Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/fileexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryFluent Forward Exporterby
Romain DaubyThe OpenTelemetry Collector Exporter for the Fluent Forward protocolgo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/r0mdau/fluentforwardexporter v0.3.3
v0.3.3VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Cloud Operations Collector Exporterby
GoogleThe Google Cloud Operations Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/googlecloudexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Cloud Pubsub Exporterby
🔭 OpenTelemetry Authors 🔭This exporter sends OTLP messages to a Google Cloud Pubsub topic.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/googlecloudpubsubexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Managed Service for Prometheus Exporterby
GoogleThis exporter can be used to send metrics and traces to Google Cloud Managed Service for Prometheus.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/googlemanagedprometheusexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryHoneycomb Marker Exporterby
🔭 OpenTelemetry Authors 🔭This exporter allows creating markers, via the Honeycomb Markers API, based on the look of incoming telemetry.honeycombmarker
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/honeycombmarkerexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryInfluxDB Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending tracing, metrics, and logging data to InfluxDBgo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/influxdbexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryKafka Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Kafka Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/kafkaexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryKinesis Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Kinesis Exporter for Go.go
exporter
collectorGoLanguageExporterComponentApache 2.0License RepositoryKinetica OpenTelemetry Collector Exporter Plug-Inby
🔭 OpenTelemetry Authors 🔭The schema name otel is an example. The user may change this to another name but the same name has to be usedkinetica
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/kineticaexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryTrace ID aware load-balancing Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Trace ID aware load-balancing for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/loadbalancingexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryLogicMonitor Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending logs and traces data to Logicmonitorlogicmonitor
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/logicmonitorexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryLogz.io Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Collector Exporter for Logz.iogo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/logzioexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryLoki Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Collector Exporter for Lokigo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/lokiexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryMezmo Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending OpenTelemetry log data to Mezmo.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/mezmoexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryNo-op Exporterby
🔭 OpenTelemetry Authors 🔭Serves as a placeholder exporter in a pipeline. This can be useful if you want to e.g. start a Collector with only extensions enabled, or for testing Collector pipeline throughput without worrying about an exporter.nop
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        go.opentelemetry.io/collector/exporter/nopexporter v0.124.0
v0.124.0VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryOpenCensus Collector Exporterby
🔭 OpenTelemetry Authors 🔭The OpenCensus Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/opencensusexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryOpenSearch Exporterby
🔭 OpenTelemetry Authors 🔭OpenSearch exporter supports sending OpenTelemetry signals as documents to OpenSearch.opensearch
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/opensearchexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryOpenTelemetry Protocol with Apache Arrow Exporterby
🔭 OpenTelemetry Authors 🔭Exports telemetry data using OpenTelemetry Protocol with Apache Arrow components with support for both OpenTelemetry Protocol with Apache Arrow and standard OpenTelemetry Protocol (OTLP) protocol via gRPC.apache
arrow
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/otelarrowexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryOTLP gRPC Collector Exporterby
🔭 OpenTelemetry Authors 🔭The OTLP gRPC Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        go.opentelemetry.io/collector/exporter/otlpexporter v0.124.0
v0.124.0VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryOTLP HTTP Collector Exporterby
🔭 OpenTelemetry Authors 🔭The OTLP HTTP Exporter for the OpenTelemetry Collector.go
exporter
collectorCollectorLanguageExporterComponentApache 2.0License RepositoryPrometheus Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Prometheus Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/prometheusexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryPrometheus Remote Write Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Prometheus Remote Write Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/prometheusremotewriteexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryPulsar Exporterby
🔭 OpenTelemetry Authors 🔭Pulsar exporter exports logs, metrics, and traces to Pulsar. This exporter uses a synchronous producergo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/pulsarexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) Repositoryqryn exporterby
lorenzo@qxip.net,
akvlad@qxip.netThis exporter supports sending OpenTelemetry logs, traces and metrics to ClickHouse using the qryn polyglot format.go
exporter
qryn
loki
prometheus
tempoCollectorLanguageExporterComponentApache 2.0License RepositoryRabbitMQ Exporterby
🔭 OpenTelemetry Authors 🔭Exports metrics, traces, and logs to RabbitMQ using the AMQP 0.9.1 protocolrabbitmq
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/rabbitmqexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySAPM Exporterby
🔭 OpenTelemetry Authors 🔭The SAPM exporter builds on the Jaeger proto and adds additional batching on top. This allowsgo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/sapmexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySentry Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Sentry Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/sentryexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySignalFx Collector Exporterby
🔭 OpenTelemetry Authors 🔭The SignalFx Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/signalfxexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySplunk APM (SAPM) Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Splunk APM Exporter for Go.go
exporter
collectorGoLanguageExporterComponentApache 2.0License RepositorySplunk HTTP Event Collector (HEC) Exporterby
🔭 OpenTelemetry Authors 🔭The Splunk HTTP Event Collector (HEC) Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/splunkhecexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySplunk Infrastructure Monitoring Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Splunk Infrastructure Monitoring Exporter for Go.go
exporter
collectorGoLanguageExporterComponentApache 2.0License RepositorySplunk SAPM Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Splunk SAPM Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/sapmexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySumo Logic Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Collector Exporter for Sumo Logicgo
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/sumologicexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositorySyslog Exporterby
🔭 OpenTelemetry Authors 🔭The syslog exporter supports sending messages to a remote syslog server.syslog
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/syslogexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryTencentCloud LogService Exporterby
🔭 OpenTelemetry Authors 🔭This exporter supports sending OpenTelemetry log data to LogService.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/tencentcloudlogserviceexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryZipkin Collector Exporterby
🔭 OpenTelemetry Authors 🔭The Zipkin Exporter for the OpenTelemetry Collector.go
exporter
collector Quick InstallWhen building a custom collector you can add this exporter to the manifest file like the following:exporters:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/exporter/zipkinexporter v0.124.1
v0.124.1VersionCollectorLanguageExporterComponentApache 2.0License Package Details (go-collector) RepositoryAck Extensionby
🔭 OpenTelemetry Authors 🔭This extension allows acking of data upon successful processing. The upstream agent can choose to send event again if ack fails.ack
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/ackextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryASAP Client Authentication Extensionby
🔭 OpenTelemetry Authors 🔭This extension provides Atlassian Service Authentication Protocol (ASAP) client credentials for HTTP or gRPC based exporters.asap
auth
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/asapauthextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryBasic Authenticatorby
🔭 OpenTelemetry Authors 🔭This extension implements both configauth.ServerAuthenticator and configauth.ClientAuthenticator to authenticate clients and servers using Basic Authentication.basicauth
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/basicauthextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryBearer token authenticator extensionby
🔭 OpenTelemetry Authors 🔭The Bearer token authenticator extension allows gRPC and HTTP-based exporters to add authentication data to outgoing calls based on a static token.go
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/bearertokenauthextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryEncoding extensionby
🔭 OpenTelemetry Authors 🔭The encoding extension allows for other components to reference ingress/egress data formatsencoding
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/encoding v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Client Auth Extensionby
🔭 OpenTelemetry Authors 🔭This extension provides Google OAuth2 Client Credentials and Metadata for gRPC and HTTP based exporters.google
client
auth
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/googleclientauthextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryHeaders Setter extensionby
🔭 OpenTelemetry Authors 🔭The headers_setter extension implements ClientAuthenticator and is used to set requests headers in gRPC / HTTP exporters with values provided via extension configurations or requests metadata (context).headers
setter
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/headerssetterextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryHealth Check Collector Extensionby
🔭 OpenTelemetry Authors 🔭The Health Check Extension for the OpenTelemetry Collector enables an HTTP URL that can be probed to check the status of the OpenTelemetry Collector.go
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/healthcheckextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryHealth Check Extension V2by
🔭 OpenTelemetry Authors 🔭This is an experimental extension that is intended to replace the existing health check extension.healthcheckv2
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/healthcheckv2extension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryHTTP Forwarder Collector Extensionby
🔭 OpenTelemetry Authors 🔭The HTTP Forwarder Extension for the OpenTelemetry Collector accepts HTTP requests, optionally adds headers to them and forwards them.go
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/httpforwarderextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryASAP Client Authentication Extensionby
🔭 OpenTelemetry Authors 🔭This extension allows serving sampling strategies following the Jaeger’s remote sampling API.jaeger
sampling
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/jaegerremotesampling v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryMemory Limiter Extensionby
🔭 OpenTelemetry Authors 🔭The memory limiter extension is used to prevent out of memory situations onmemory
limiter
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        go.opentelemetry.io/collector/extension/memorylimiterextension v0.124.0
v0.124.0VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryOAuth2 Client Credentials authenticator extensionby
🔭 OpenTelemetry Authors 🔭The OAuth2 Client Credentials authenticator extension allows gRPC and HTTP-based exporters to add authentication data to outgoing calls.go
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/oauth2clientauthextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryHost Observer Collector Extensionby
🔭 OpenTelemetry Authors 🔭Observers are implemented as an extension to discover networked endpoints like a Kubernetes pod, Docker container, or local listening port. Currently available are observers for docker, ecs, ecs_task, host and K8s.go
extension
collectorCollectorLanguageExtensionComponentApache 2.0License RepositoryOIDC authenticator extensionby
🔭 OpenTelemetry Authors 🔭The OIDC authenticator extension allows gRPC and HTTP-based receivers to require authentication from remote clients.go
extension
collector
oidc Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/oidcauthextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryOpAMP Agent Extensionby
🔭 OpenTelemetry Authors 🔭Collector extension for OpAMPopamp
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/opampextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryPerformance Profiler Collector Extensionby
🔭 OpenTelemetry Authors 🔭The Performance Profiler Extension for the OpenTelemetry Collector can be used to collect performance profiles and investigate issues with the service.go
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/pprofextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryRemote Tap Extensionby
🔭 OpenTelemetry Authors 🔭This extension runs as a Web server that loads the remote observers that are registered against it.remote
tap
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/remotetapextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryAuthenticator - SigV4by
🔭 OpenTelemetry Authors 🔭This extension provides SigV4 authentication for making requests to AWS services.sigv4
auth
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/sigv4authextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositorySolarwinds APM Settings extensionby
🔭 OpenTelemetry Authors 🔭The Solarwinds APM Settings extension gets Solarwinds APM specific settings from Solarwinds APM collector and /tmp/solarwinds-apm-settings.json & /tmp/solarwinds-apm-settings-raw periodically.solarwinds
apm
settings
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/solarwindsapmsettingsextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositorySumo Logic Extensionby
🔭 OpenTelemetry Authors 🔭This extension is to be used in conjunction with the Sumo Logic Exporter in order to export telemetry data to Sumo Logic.sumologic
extension
collector Quick InstallWhen building a custom collector you can add this extension to the manifest file like the following:extensions:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/extension/sumologicextension v0.124.1
v0.124.1VersionCollectorLanguageExtensionComponentApache 2.0License Package Details (go-collector) RepositoryzPages Collector Extensionby
🔭 OpenTelemetry Authors 🔭The zPages Extension for the OpenTelemetry Collector serves zPages, an HTTP endpoint that provides live data for debugging different components that were properly instrumented for such.go
extension
collectorCollectorLanguageExtensionComponentApache 2.0License RepositoryAttribute Collector Processorby
🔭 OpenTelemetry Authors 🔭The Attribute Processor for the OpenTelemetry Collector modifies attributes of a span.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/attributesprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryBatch Collector Processorby
🔭 OpenTelemetry Authors 🔭The Batch Processor for the OpenTelemetry Collector accepts spans, metrics, or logs and places them into batches.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        go.opentelemetry.io/collector/processor/batchprocessor v0.124.0
v0.124.0VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryCoralogix Processorby
🔭 OpenTelemetry Authors 🔭The Coralogix processor adds attributes to spans that enable features in Coralogix.coralogix
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/coralogixprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryCumulative to Delta Processorby
🔭 OpenTelemetry Authors 🔭The cumulative to delta processor converts monotonic, cumulative sum and histogram metrics to monotonic, delta metrics. Non-monotonic sums and exponential histograms are excluded.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/cumulativetodeltaprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryDelta to cumulative processorby
🔭 OpenTelemetry Authors 🔭The delta to cumulative processor (deltatocumulativeprocessor) converts metrics from delta temporality to cumulative, by accumulating samples in memory.deltatocumulative
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/deltatocumulativeprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryDelta to Rate Processorby
🔭 OpenTelemetry Authors 🔭The delta to rate processor converts delta sum metrics to rate metrics. This rate is a gauge.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/deltatorateprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryFilter Collector Processorby
🔭 OpenTelemetry Authors 🔭The Filter Processor for the OpenTelemetry Collector can be configured to include or exclude metrics.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/filterprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryGeoIP Processorby
🔭 OpenTelemetry Authors 🔭The geoIP processor geoipprocessor enhances resource attributes by appending information about the geographical location of an IP address. To add geographical information, the IP address must be included in the resource attributes using the source.address semantic conventions key attribute.geoip
processor
collectorCollectorLanguageProcessorComponentApache 2.0License RepositoryGroup by Trace Processorby
🔭 OpenTelemetry Authors 🔭The Group by Trace Processor for the OpenTelemetry Collector collects all the spans from the same trace, waiting a pre-determined amount of time before releasing the trace to the next processor.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/groupbytraceprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryGroup by Attributes processorby
🔭 OpenTelemetry Authors 🔭This processor re-associates spans, log records and metric data points to a Resource that matches with the specified attributes. As a result, all spans, log records or metric data points with the same values for the specified attributes are “grouped” under the same Resource.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/groupbyattrsprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryInterval Processorby
🔭 OpenTelemetry Authors 🔭The interval processor (intervalprocessor) aggregates metrics and periodically forwards the latest values to the next component in the pipeline.interval
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/intervalprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryK8s Attribute Processorby
🔭 OpenTelemetry Authors 🔭The K8s Attribute Processor for the OpenTelemetry Collector automatically discovers K8s resources (pods), extracts metadata from them and adds the extracted metadata to the relevant spans, metrics and logs.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/k8sattributesprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryLog DeDuplication Processorby
🔭 OpenTelemetry Authors 🔭This processor is used to deduplicate logs by detecting identical logs over a range of time and emitting a single log with the count of logs that were deduplicated.logdedup
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/logdedupprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryLogs Transform Processorby
🔭 OpenTelemetry Authors 🔭The logs transform processor can be used to apply log operators to logs coming from any receiver. Please refer to config.go for the config spec.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/logstransformprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryMemory Limiter Collector Processorby
🔭 OpenTelemetry Authors 🔭The Memory Limiter Processor for the OpenTelemetry Collector is used to prevent out of memory situations on the collector.go
processor
collectorCollectorLanguageProcessorComponentApache 2.0License RepositoryMetrics Transform Processorby
🔭 OpenTelemetry Authors 🔭The Metrics Transform Processor for the OpenTelemetry Collector can be used to rename metrics, and add, rename or delete label keys and values. It can also be used to perform aggregations on metrics across labels or label values.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstransformprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryMetrics Generation Processorby
🔭 OpenTelemetry Authors 🔭The metrics generation processor can be used to create new metrics using existing metrics following a given rule. Currently it supports following two approaches for creating a new metric.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricsgenerationprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryProbabilistic Sampling Collector Processorby
🔭 OpenTelemetry Authors 🔭The Probabilistic Sampling Processor for the OpenTelemetry Collector provides probabilistic sampling of traces.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/probabilisticsamplerprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryRedaction processorby
🔭 OpenTelemetry Authors 🔭This processor deletes span attributes that don’t match a list of allowed spango
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/redactionprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryWebsocket Processorby
🔭 OpenTelemetry Authors 🔭The WebSocket processor, which can be positioned anywhere in a pipeline, allowswebsocket
remote
tap
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/remotetapprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryResource Collector Processorby
🔭 OpenTelemetry Authors 🔭The Resource Processor for the OpenTelemetry Collector can be used to apply changes on resource attributes.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/resourceprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryResource Detection Processorby
🔭 OpenTelemetry Authors 🔭The Resource Detection Processor for the OpenTelemetry Collector can be used to detect resource information from the host, in a format that conforms to the OpenTelemetry resource semantic conventions, and append or override the resource value in telemetry data with this information.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/resourcedetectionprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryRouting Processorby
🔭 OpenTelemetry Authors 🔭The Routing Processor for the OpenTelemetry Collector will read a header from the incoming HTTP request (gRPC or plain HTTP) and direct the trace information to specific exporters based on the attribute’s value.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/routingprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositorySchema Transformer Processorby
🔭 OpenTelemetry Authors 🔭The Schema Processor is used to convert existing telemetry data or signals to a version of the semantic convention defined as part of the configuration.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/schemaprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositorySpan Collector Processorby
🔭 OpenTelemetry Authors 🔭The Span Processor for the OpenTelemetry Collector modifies either the span name or attributes of a span based on the span name.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/spanprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositorySumo Logic Processorby
🔭 OpenTelemetry Authors 🔭The Sumo Logic processor modifies the metadata on logs, metrics and traces sent to Sumo Logic so that the Sumo Logic apps can make full use of the ingested data.sumologic
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/sumologicprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryTail Sampling Processorby
🔭 OpenTelemetry Authors 🔭The Tail Sampling Processor for the OpenTelemetry Collector samples traces based on a set of defined policies.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/tailsamplingprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryTransform Processorby
🔭 OpenTelemetry Authors 🔭The Transform Processor for the OpenTelemetry Collector can be used to transform any fields on traces, metrics, and logs within the collector. It utilizes a transformation language to define transformations and conditions and then applies those transformations to the specified telemetry.go
processor
collector Quick InstallWhen building a custom collector you can add this processor to the manifest file like the following:processors:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor v0.124.1
v0.124.1VersionCollectorLanguageProcessorComponentApache 2.0License Package Details (go-collector) RepositoryActive Directory Domain Services Receiverby
🔭 OpenTelemetry Authors 🔭The active_directory_ds receiver scrapes metric relating to an Active Directory domain controller using the Windows Performance Counters.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/activedirectorydsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAerospike Receiverby
🔭 OpenTelemetry Authors 🔭The Aerospike receiver is designed to collect performance metrics from one or more Aerospike nodes.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/aerospikereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryApache Web Server Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches stats from a Apache Web Server instance using the server-status?auto endpoint.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/apachereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryApache Spark Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches metrics for an Apache Spark cluster through the Apache Spark REST APIapache
spark
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/apachesparkreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAWS ECS Container Metrics Collector Receiverby
🔭 OpenTelemetry Authors 🔭The AWS ECS Container Metrics Receiver for the OpenTelemetry Collector reads task metadata and docker stats from Amazon ECS Task Metadata Endpoint, and generates resource usage metrics (such as CPU, memory, network, and disk) from them.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awsecscontainermetricsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAWS X-Ray Collector Receiverby
🔭 OpenTelemetry Authors 🔭The AWS X-Ray Receiver for the OpenTelemetry Collector accepts segments (i.e. spans) in the X-Ray Segment format. This enables the collector to receive spans emitted by the existing X-Ray SDK.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awsxrayreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCloudwatch Receiverby
🔭 OpenTelemetry Authors 🔭Receives Cloudwatch events from AWS CloudWatch via the AWS SDK for Cloudwatch Logsgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awscloudwatchreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCloudWatch Metrics Receiverby
🔭 OpenTelemetry Authors 🔭Receives Cloudwatch metrics from AWS Cloudwatch via the AWS SDK for Cloudwatch Logsawscloudwatchmetrics
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awscloudwatchmetricsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAWS Container Insights Receiverby
🔭 OpenTelemetry Authors 🔭AWS Container Insights Receiver is an AWS specific receiver that supports CloudWatch Container Insights.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awscontainerinsightreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAWS Kinesis Data Firehose Receiverby
🔭 OpenTelemetry Authors 🔭Receiver for ingesting AWS Kinesis Data Firehose delivery stream messages and parsing the records received based on the configured record type.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awsfirehosereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAWS S3 Receiverby
🔭 OpenTelemetry Authors 🔭Receiver for retrieving trace previously stored in S3 by the AWS S3 Exporter.aws
s3
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/awss3receiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAzure Blob Receiverby
🔭 OpenTelemetry Authors 🔭This receiver reads logs and trace data from Azure Blob Storagego
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/azureblobreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAzure Event Hub Receiverby
🔭 OpenTelemetry Authors 🔭The Azure Event Hub receiver listens to logs emitted by Azure Event hubs.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/azureeventhubreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryAzure Monitor Receiverby
🔭 OpenTelemetry Authors 🔭This receiver scrapes Azure Monitor API for resources metrics.azure
monitor
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/azuremonitorreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryF5 Big-IP Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches stats from a F5 Big-IP node using F5’s iControl REST APIgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/bigipreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCarbon Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Carbon Receiver for the OpenTelemetry Collector supports Carbon’s plaintext protocol.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/carbonreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryChrony Receiverby
🔭 OpenTelemetry Authors 🔭The chrony receiver is a pure go implementation of the command chronyc trackinggo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/chronyreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCloudflare Receiverby
🔭 OpenTelemetry Authors 🔭This Cloudflare receiver allows Cloudflare’s LogPush Jobs to send logs from the Cloudflare logs aggregation systemcloudflare
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/cloudflarereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCloud Foundry Receiverby
🔭 OpenTelemetry Authors 🔭The Cloud Foundry receiver connects to the RLP (Reverse Log Proxy) Gateway of the Cloud Foundry installationgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/cloudfoundryreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCollectD Collector Receiverby
🔭 OpenTelemetry Authors 🔭The CollectD Receiver for the OpenTelemetry Collector can receive data exported by the CollectD’s write_http plugin.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/collectdreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryCouchDB Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches stats from a CouchDB server.go
receiver
collector
couchdb Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/couchdbreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryDatadog APM Receiverby
🔭 OpenTelemetry Authors 🔭The Datadog APM Receiver accepts traces in the Datadog APM formatdatadog
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/datadogreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryDocker Stats Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Docker Stats Receiver queries the local Docker daemon’s container stats API for all desired running containers on a configured interval.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/dockerstatsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryElasticsearch Receiverby
🔭 OpenTelemetry Authors 🔭This receiver queries the Elasticsearch node stats and index statsendpoints in order to scrape metrics from a running elasticsearch cluster.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/elasticsearchreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryExpvar Receiverby
🔭 OpenTelemetry Authors 🔭An Expvar Receiver scrapes metrics from expvargo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/expvarreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryFilelog Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Filelog Receiver tails and parses logs from files using the opentelemetry-log-collection library.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/filelogreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryFile Stats Receiverby
🔭 OpenTelemetry Authors 🔭The File Stats receiver collects metrics from files specified with a glob pattern.filestats
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/filestatsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryFlinkMetrics Receiverby
🔭 OpenTelemetry Authors 🔭This receiver uses Flink’s REST API to collect Jobmanager, Taskmanager, Job, Task and Operator metrics.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/flinkmetricsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryFluent Forward Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Fluent Forward Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/fluentforwardreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryTrace2 Receiverby
Jeff HostetlerA receiver for git Trace2 telemetry from local git commands, translates it into an OpenTelemetry format, and forwards it to other OpenTelemetry components.go
receiver
collector
trace2
gitCollectorLanguageReceiverComponentMITLicense RepositoryGitHub Receiverby
🔭 OpenTelemetry Authors 🔭The GitHub receiver receives data from GitHub. As a starting point it scrapes metrics from repositories but will be extended to include traces and logs.github
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/githubreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Cloud Monitoring Receiverby
🔭 OpenTelemetry Authors 🔭The primary objective of the Google Cloud Monitoring Receiver is to gather time series metrics data from all Google services and convert this data into a pipeline format that facilitates further use.googlecloudmonitoring
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/googlecloudmonitoringreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Pubsub Receiverby
🔭 OpenTelemetry Authors 🔭This receiver gets OTLP messages from a Google Cloud Pubsub subscription.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/googlecloudpubsubreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryGoogle Cloud Spanner Receiverby
🔭 OpenTelemetry Authors 🔭Google Cloud Spanner enable you to investigate issues with your databasego
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/googlecloudspannerreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryHAProxy Receiverby
🔭 OpenTelemetry Authors 🔭The HAProxy receiver generates metrics by polling periodically the HAProxy process through a dedicated socket or HTTP URL.haproxy
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/haproxyreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryHost Metrics Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Host Metrics Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryHTTP Check Receiverby
🔭 OpenTelemetry Authors 🔭The HTTP Check Receiver can be used for synthetic checks against HTTP endpoints. This receiver will make a request to the specified endpoint using thego
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/httpcheckreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryMicrosoft IIS Receiverby
🔭 OpenTelemetry Authors 🔭The iis receiver grabs metrics about an IIS instance using the Windows Performance Counters.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/iisreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryInfluxDB Receiverby
🔭 OpenTelemetry Authors 🔭This receiver accepts metrics data as InfluxDB Line Protocol.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/influxdbreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryJaeger Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Jaeger Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jaegerreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryJMX Collector Receiverby
🔭 OpenTelemetry Authors 🔭The JMX Receiver will work in conjunction with the OpenTelemetry JMX Metric Gatherer to report metrics from a target MBean server using a built-in or your custom OpenTelemetry helper-utilizing Groovy script.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/jmxreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryJournald Receiverby
🔭 OpenTelemetry Authors 🔭Parses Journald events from systemd journal.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/journaldreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryKubernetes Cluster Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Kubernetes Cluster Receiver for the OpenTelemetry Collector collects cluster-level metrics from the Kubernetes API server. It uses the K8s API to listen for updates. A single instance of this receiver can be used to monitor a cluster.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryKubernetes Events Receiverby
🔭 OpenTelemetry Authors 🔭The Kubernetes Events receiver collects events from the Kubernetesgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8seventsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryKubernetes Objects Receiverby
🔭 OpenTelemetry Authors 🔭The Kubernetes Objects receiver collects(pull/watch) objects from the Kubernetes API server.k8sobjects
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sobjectsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryKafka Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Kafka Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryKafka Metrics Receiverby
🔭 OpenTelemetry Authors 🔭Kafka metrics receiver collects Kafka metrics (brokers, topics, partitions, consumer groups) from Kafka server,go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkametricsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryKubelet Stats Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Kubelet Stats Receiver for the OpenTelemetry Collector pulls pod metrics from the API server on a kubelet and sends it down the metric pipeline for further processing.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryLoki Receiverby
🔭 OpenTelemetry Authors 🔭The Loki receiver implements the Loki Push APIloki
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/lokireceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryMemcached Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Memcached Receiver for the OpenTelemetry Collector can fetch stats from a Memcached instance using the stats command.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/memcachedreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryMongoDB Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches stats from a MongoDB instance using the [golanggo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/mongodbreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryMongoDB Atlas Receiverby
🔭 OpenTelemetry Authors 🔭Receives metrics from MongoDB Atlasgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/mongodbatlasreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryMySQL Receiverby
🔭 OpenTelemetry Authors 🔭This receiver queries MySQL’s global status and InnoDB tables.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/mysqlreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryNamed Pipe Receiverby
🔭 OpenTelemetry Authors 🔭This receiver supports opening a Unix Named Pipe (aka FIFO), and reading logs from it.namedpipe
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/namedpipereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryNGINX Collector Receiverby
🔭 OpenTelemetry Authors 🔭The NGINX Receiver for the OpenTelemetry Collector can fetch stats from a NGINX instance using a mod_status endpoint.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/nginxreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryNo-op Receiverby
🔭 OpenTelemetry Authors 🔭Serves as a placeholder receiver in a pipeline. This can be useful if you want to e.g. start a Collector with only extensions enabled.nop
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        go.opentelemetry.io/collector/receiver/nopreceiver v0.124.0
v0.124.0VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryNSX-T Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches metrics important to run virtual networking using NSX-T. The receiver ingests metrics via the NSX Rest APIgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/nsxtreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryNTP Receiverby
🔭 OpenTelemetry Authors 🔭This receiver periodically retrieves the clock offset from a NTP server.ntp
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/ntpreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryOpenCensus Collector Receiverby
🔭 OpenTelemetry Authors 🔭The OpenCensus Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/opencensusreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryOTel based Data Collector for LLMby
IBM InstanaOTel based Data Collector for LLM is the tool or template to generate OpenTelemetry metrics for various LLM and LLM Applications. All implementation are based on predefined OpenTelemetry Semantic Conventions.java
receiver
collectorJavaLanguageReceiverComponentMITLicense RepositoryOracle DB receiverby
🔭 OpenTelemetry Authors 🔭This receiver collects metrics from an Oracle Database.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/oracledbreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) Repositoryosquery Receiverby
🔭 OpenTelemetry Authors 🔭The osquery receiver runs queries run on an osquery’s daemon on a schedule and converts the output to logs.osquery
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/osqueryreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryOpenTelemetry Protocol with Apache Arrow Receiverby
🔭 OpenTelemetry Authors 🔭Receives telemetry data using OpenTelemetry Protocol with Apache Arrow and standard OTLP protocol via gRPC.arrow
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/otelarrowreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryOTLP Collector Receiverby
🔭 OpenTelemetry Authors 🔭The OTLP Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        go.opentelemetry.io/collector/receiver/otlpreceiver v0.124.0
v0.124.0VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryOTLP JSON File Receiverby
🔭 OpenTelemetry Authors 🔭This receiver will read pipeline data from JSON files. The data is written ingo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/otlpjsonfilereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPodman Stats Receiverby
🔭 OpenTelemetry Authors 🔭The Podman Stats receiver queries the Podman service API to fetch stats for all running containersgo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/podmanreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPostgreSQL Receiverby
🔭 OpenTelemetry Authors 🔭This receiver queries the PostgreSQL statistics collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/postgresqlreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPrometheus Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Prometheus Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPrometheus Remote Write Receiverby
🔭 OpenTelemetry Authors 🔭prometheusremotewrite
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusremotewritereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPulsar Receiverby
🔭 OpenTelemetry Authors 🔭Pulsar receiver receives logs, metrics, and traces from Pulsar.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/pulsarreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPure Storage FlashArray Receiverby
🔭 OpenTelemetry Authors 🔭The Pure Storage FlashArray receiver, receives metrics from Pure Storage internal services hosts.purefa
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/purefareceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryPure Storage FlashBlade Receiverby
🔭 OpenTelemetry Authors 🔭The Pure Storage FlashBlade receiver, receives metrics from Pure Storage FlashBlade via the Pure Storage FlashBlade OpenMetrics Exporter.purefb
storage
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/purefbreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryRabbitMQ Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches stats from a RabbitMQ node using the RabbitMQ Management Plugin.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/rabbitmqreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryReceiver Creator Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Receiver Creator Receiver for the OpenTelemetry Collector can instantiate other receivers at runtime based on whether observed endpoints match a configured rule.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/receivercreator v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryRedis Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Redis Receiver for the OpenTelemetry Collector is designed to retrieve Redis INFO data from a single Redis instance, build metrics from that data, and send them to the next consumer at a configurable interval.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/redisreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryRiak Receiverby
🔭 OpenTelemetry Authors 🔭Riak metrics will be collected from the /stats endpoint.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/riakreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySAP HANA Receiverby
🔭 OpenTelemetry Authors 🔭This receiver can fetch stats from a SAP HANA instance. It leverages the driver written by SAP for connecting to SAP HANA with the golang SQL module to execute several monitoring queries.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/saphanareceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySAPM Collector Receiverby
🔭 OpenTelemetry Authors 🔭The SAPM Receiver for the OpenTelemetry Collector receive traces from other collectors or the SignalFx Smart Agent.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sapmreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySignalFx Collector Receiverby
🔭 OpenTelemetry Authors 🔭The SignalFx Receiver for the OpenTelemetry Collector accepts metrics in the SignalFx proto format and events (Logs) in the SignalFx proto format.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/signalfxreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySimple Prometheus Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Simple Prometheus Receiver for the OpenTelemetry Collector provides a simple configuration interface to configure the prometheus receiver to scrape metrics from a single target.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/simpleprometheusreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySkywalking Receiverby
🔭 OpenTelemetry Authors 🔭Receives trace data in Skywalking format.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/skywalkingreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySNMP Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches stats from an SNMP-enabled host using the Go SNMP client. Metrics are collected based on configuration settings.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/snmpreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySnowflake Receiverby
🔭 OpenTelemetry Authors 🔭This receiver collects metrics from a Snowflake account by connecting to an account and running queries at set intervals.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/snowflakereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySolace Receiverby
🔭 OpenTelemetry Authors 🔭The Solace receiver receives trace data from a Solace PubSub+ Event Brokergo
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/solacereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySplunk HEC Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Splunk HEC Receiver for the OpenTelemetry Collector accepts metrics, traces, and logs in the Splunk HEC format.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/splunkhecreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) Repositorysplunkenterpriseby
🔭 OpenTelemetry Authors 🔭The Splunk Enterprise Receiver is a pull based tool which enables the ingestion of performance metrics describing the operational status of a user’s Splunk Enterprise deployment to an appropriate observability tool.splunkenterprise
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/splunkenterprisereceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySQL Query Receiver (Alpha)by
🔭 OpenTelemetry Authors 🔭The SQL Query Receiver uses custom SQL queries to generate metrics from a database connection.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlqueryreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryMicrosoft SQL Server Receiverby
🔭 OpenTelemetry Authors 🔭The sqlserver receiver grabs metrics about a Microsoft SQL Server instance using the Windows Performance Counters.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sqlserverreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySSH Check Receiverby
🔭 OpenTelemetry Authors 🔭This receiver creates stats by connecting to an SSH server which may be an SFTP server.ssh
sftp
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/sshcheckreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryStatsD Collector Receiverby
🔭 OpenTelemetry Authors 🔭The StatsD Receiver for the OpenTelemetry Collector ingests StatsD messages.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/statsdreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySyslog Receiverby
🔭 OpenTelemetry Authors 🔭Parses Syslogs received over TCP or UDP.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/syslogreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositorySystemd Receiverby
🔭 OpenTelemetry Authors 🔭systemd
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/systemdreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryTCP Receiverby
🔭 OpenTelemetry Authors 🔭Receives logs over TCP.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/tcplogreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryTLS Check Receiverby
🔭 OpenTelemetry Authors 🔭Emit metrics about x.509 certificates.tlscheck
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/tlscheckreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryUDP Receiverby
🔭 OpenTelemetry Authors 🔭Receives logs over UDP.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/udplogreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryvCenter Receiverby
🔭 OpenTelemetry Authors 🔭This receiver fetches metrics from a vCenter or ESXi host running VMware vSphere APIs.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/vcenterreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryWavefront Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Wavefront Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/wavefrontreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryWebhook Event Receiverby
🔭 OpenTelemetry Authors 🔭The Webhook Event receiver is meant to act as a generally available push based receiver for any webhook style data source.webhookevent
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/webhookeventreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryWindows Performance Counters Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Windows Performance Counters Receiver for the OpenTelemetry Collector captures the configured system, application, or custom performance counter data from the Windows registry using the PDH interface.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/windowsperfcountersreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryWindows Log Event Receiverby
🔭 OpenTelemetry Authors 🔭Tails and parses logs from windows event log API using the opentelemetry-log-collection library.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/windowseventlogreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryZipkin Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Zipkin Receiver for the OpenTelemetry Collector.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/zipkinreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryZookeeper Collector Receiverby
🔭 OpenTelemetry Authors 🔭The Zookeeper Receiver for the OpenTelemetry Collector collects metrics from a Zookeeper instance, using the ‘mntr’ command.go
receiver
collector Quick InstallWhen building a custom collector you can add this receiver to the manifest file like the following:receivers:
    - gomod:
        github.com/open-telemetry/opentelemetry-collector-contrib/receiver/zookeeperreceiver v0.124.1
v0.124.1VersionCollectorLanguageReceiverComponentApache 2.0License Package Details (go-collector) RepositoryETW Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry ETW Exporter for C++.c++
exporterC++LanguageExporterComponentApache 2.0License RepositoryFluentd Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Fluentd Exporter for C++.c++
exporterC++LanguageExporterComponentApache 2.0License RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export data to the OpenTelemetry Collector using the OpenTelemetry Protocol.c++
exporterC++LanguageExporterComponentApache 2.0License Documentation RepositoryPrometheus Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Prometheus Exporter for C++.c++
exporter
prometheusC++LanguageExporterComponentApache 2.0License Documentation RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Zipkin Exporter for C++.c++
exporterC++LanguageExporterComponentApache 2.0License Documentation RepositoryAzure Monitor Exporterby
Microsoft AuthorsThe OpenTelemetry Azure Monitor Exporter for .NET.net
exporter
Azure Monitor
Application Insights Quick InstallTo install this exporter run:dotnet add package Azure.Monitor.OpenTelemetry.Exporter
1.4.0-beta.3Version.NETLanguageExporterComponentMITLicense Package Details (nuget) RepositoryConsole Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭The console exporter prints data to the Console window.console
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Console
1.9.0-rc.1Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryGeneva Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭The Geneva Exporter exports telemetry to Event Tracing for Windows (ETW) or to a Unix Domain Socket (UDS) on the local machine.geneva
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Geneva
1.11.2Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryInfluxDB Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭The InfluxDB exporter converts OpenTelemetry metrics into the InfluxDB modelinfluxdb
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.InfluxDB
1.0.0-alpha.4Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryIn-memory Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭The in-memory exporter stores data in a user provided memory buffer.inmemory
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.InMemory
1.11.1Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryInstana Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭The Instana Exporter exports telemetry to Instana backend.instana
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Instana
1.0.3Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryOneCollector Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭The OneCollectorExporter is designed for Microsoft products to send data to public-facing end-points which route to Microsoft’s internal data pipeline.onecollector
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.OneCollector
1.11.1Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers..NET
C#
dotnet
exporter Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol
1.9.0-alpha.1Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryOTLP Exporter for .NET via Startup Hooksby
Chet HuskA ready-to-use .NET CLR Startup Hook for applications that are instrumented with System.Diagnostic.Activity tracing that sends traces to an OpenTelemetry Collector via the OTLP Exporter without adding direct references to the OpenTelemetry SDK.oltp
exporter
dotnet
startup hook.NETLanguageExporterComponentMITLicense Documentation RepositoryPrometheus Exporter ASP.NET Core for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭An OpenTelemetry Prometheus exporter for configuring an ASP.NET Core application with an endpoint for Prometheus to scrape.prometheus
asp
dotnet
core
exporter Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Prometheus.AspNetCore
1.11.2-beta.1Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryPrometheus Exporter HttpListener for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭An OpenTelemetry Prometheus exporter that configures an HttpListener instance for Prometheus to scrape.prometheus-httplistener
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Prometheus.HttpListener
1.11.2-beta.1Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryStackdriver Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Stackdriver Exporter for OpenTelemetry .NETstackdriver
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Stackdriver
1.0.0-beta.6Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryZipkin Exporter for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Zipkin Exporter for OpenTelemetry .NETzipkin
exporter
dotnet Quick InstallTo install this exporter run:dotnet add package OpenTelemetry.Exporter.Zipkin
1.8.0Version.NETLanguageExporterComponentApache 2.0License Package Details (nuget) RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.erlang
elixir
otlp
exporterErlangLanguageExporterComponentApache 2.0License RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭This library provides a span exporter using the Zipkin protocol.erlang
elixir
zipkin
exporterErlangLanguageExporterComponentApache 2.0License RepositoryGoogle Cloud Monitoring Exporterby
Google AuthorsThe OpenTelemetry Google Cloud Monitoring Exporter for Go.go
exporterGoLanguageExporterComponentApache 2.0License RepositoryGoogle Cloud Trace Exporterby
Google AuthorsThe OpenTelemetry Google Cloud Trace Exporter for Go.go
exporterGoLanguageExporterComponentApache 2.0License RepositoryInstana Go Exporterby
Instana AuthorsThe Instana Go OpenTelemetry Exporter.Go
exporter
InstanaGoLanguageExporterComponentMITLicense RepositoryLightstep Exporterby
LightstepThe OpenTelemetry Lightstep Exporter for Go.go
exporterGoLanguageExporterComponentApache 2.0License RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.go
exporterGoLanguageExporterComponentApache 2.0License Repositoryotlpr - A logr implementation backed by OTLPby
MrAliasProvides a logr.Logger that exports messages as OTLP logs.go
exporter
log
logging
logrGoLanguageExporterComponentApache 2.0License RepositoryPrometheus Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Prometheus Exporter for Go.go
exporterGoLanguageExporterComponentApache 2.0License RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Zipkin Exporter for Go.go
exporterGoLanguageExporterComponentApache 2.0License RepositoryGoogle Cloud Exportersby
GoogleThe OpenTelemetry Google Cloud Monitoring/Trace Exporters for Java.java
exporter
metrics
traces
googleJavaLanguageExporterComponentApache 2.0License RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.java
exporterJavaLanguageExporterComponentApache 2.0License RepositoryPrometheus Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export Prometheus data allowing Prometheus to query metric data.java
exporterJavaLanguageExporterComponentApache 2.0License RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export data using the Zipkin Protocol.java
exporterJavaLanguageExporterComponentApache 2.0License RepositoryAzure Monitor Exporterby
Microsoft AuthorsThe OpenTelemetry Azure Monitor Exporter for JavaScript (Node.js)Node.js
exporter
Azure Monitor
Application Insights Quick InstallTo install this exporter run:npm install @azure/monitor-opentelemetry-exporter
1.0.0-beta.30VersionJavaScriptLanguageExporterComponentMITLicense Package Details (npm) RepositoryGoogle Cloud Monitoring Exporterby
Google AuthorsThe OpenTelemetry Google Cloud Metric Exporter for Node.js.Node.js
exporter Quick InstallTo install this exporter run:npm install @google-cloud/opentelemetry-cloud-monitoring-exporter
0.20.0VersionJavaScriptLanguageExporterComponentApache 2.0License Package Details (npm) RepositoryGoogle Cloud Trace Exporterby
Google AuthorsThe OpenTelemetry Google Cloud Trace Exporter for Node.js.Node.js
exporter Quick InstallTo install this exporter run:npm install @google-cloud/opentelemetry-cloud-trace-exporter
2.4.1VersionJavaScriptLanguageExporterComponentApache 2.0License Package Details (npm) RepositoryInstana Node.js Exporterby
Instana AuthorsThe Instana Node.js OpenTelemetry Exporter.Node.js
exporter
Instana Quick InstallTo install this exporter run:npm install @instana/opentelemetry-exporter
4.10.0VersionJavaScriptLanguageExporterComponentMITLicense Package Details (npm) RepositoryJaeger Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Jaeger Exporter for Node.js.Node.js
exporter Quick InstallTo install this exporter run:npm install @opentelemetry/exporter-jaeger
2.0.0VersionJavaScriptLanguageExporterComponentApache 2.0License Package Details (npm) RepositoryPrometheus Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Prometheus Exporter for Node.js.Node.js
exporter Quick InstallTo install this exporter run:npm install @opentelemetry/exporter-prometheus
0.200.0VersionJavaScriptLanguageExporterComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry exporter for SAP Cloud Logging for Node.jsby
Christian DinseOpenTelemetry exporter for SAP Cloud Logging is a Node.js package providing a set of auto-configured OpenTelemetry exporters for shipping logs, metrics and traces to SAP Cloud Logging.Node.js
exporter
SAP
SAP Cloud Logging Quick InstallTo install this exporter run:npm install @sap/opentelemetry-exporter-for-sap-cloud-logging
0.4.0VersionJavaScriptLanguageExporterComponentApache 2.0License Documentation Package Details (npm) RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Zipkin Exporter for Node.js.Node.js
exporter Quick InstallTo install this exporter run:npm install @opentelemetry/exporter-zipkin
2.0.0VersionJavaScriptLanguageExporterComponentApache 2.0License Documentation Package Details (npm) RepositoryOTLP Exporter for Perlby
jjatriaAn unofficial implementation of the OTLP Exporter in Perl.perl
exporterPerlLanguageInstrumentationComponentArtistic-1.0-PerlLicense RepositoryOTLP/gRPC Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) over gRPC.php
exporter
grpcPHPLanguageExporterComponentApache 2.0License RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.php
exporter Quick InstallTo install this exporter run:composer require open-telemetry/exporter-otlp
1.2.1VersionPHPLanguageExporterComponentApache 2.0License Package Details (packagist) RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Zipkin Exporter for PHP.php
zipkin
exporter Quick InstallTo install this exporter run:composer require open-telemetry/exporter-zipkin
1.1.1VersionPHPLanguageExporterComponentApache 2.0License Package Details (packagist) RepositoryAzure Monitor Exporterby
Microsoft AuthorsThe OpenTelemetry Azure Monitor Exporter for Pythonpython
exporter
Azure Monitor
Application Insights Quick InstallTo install this exporter run:pip install azure-monitor-opentelemetry-exporter
PythonLanguageExporterComponentMITLicense Package Details (pip) RepositoryGoogle Cloud Exportersby
GoogleThe OpenTelemetry Google Cloud Monitoring Exporters for Python.python
exporter
metrics
googlePythonLanguageExporterComponentApache 2.0License RepositoryGoogle Cloud Exportersby
GoogleThe OpenTelemetry Google Cloud Trace Exporters for Python.python
exporter
traces
googlePythonLanguageExporterComponentApache 2.0License RepositoryLightstep Exporterby
Lightstep AuthorsThe OpenTelemetry Lightstep Exporter for Python.python
exporterPythonLanguageExporterComponentApache 2.0License RepositoryOpenCensus Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export traces and metrics using OpenCensus.python
exporterPythonLanguageExporterComponentApache 2.0License RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.python
exporterPythonLanguageExporterComponentApache 2.0License RepositoryOpenTelemetry Collector protobuf over gRPC Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export data to the OpenTelemetry Collector using the OpenTelemetry Protocol using protobuf over gRPC.otlp
protobuf
grpc
exporter
pythonPythonLanguageExporterComponentApache 2.0License RepositoryOpenTelemetry Collector protobuf over HTTP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export data to the OpenTelemetry Collector using the OpenTelemetry Protocol using protobuf over HTTP.otlp
protobuf
grpc
exporter
pythonPythonLanguageExporterComponentApache 2.0License RepositoryPrometheus Exporterby
🔭 OpenTelemetry Authors 🔭This library allows to export metrics data to Prometheus.python
exporterPythonLanguageExporterComponentApache 2.0License RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Zipkin Exporter for Python.python
exporterPythonLanguageExporterComponentApache 2.0License RepositoryOpenTelemetry Zipkin JSON Exporterby
🔭 OpenTelemetry Authors 🔭This library allows export of tracing data to Zipkin using JSON for serialization.zipkin
json
exporter
pythonPythonLanguageExporterComponentApache 2.0License RepositoryOpenTelemetry Zipkin protobuf Exporterby
🔭 OpenTelemetry Authors 🔭This library allows export of tracing data to Zipkin using protobuf for serialization.zipkin
protobuf
http
exporter
pythonPythonLanguageExporterComponentApache 2.0License RepositoryDatadog Exporter Ruby deprecatedby
Datadog, Inc.DeprecatedThis exporter has been deprecated. To export your OTLP traces from OpenTelemetry SDK directly to Datadog Agent, please refer to OTLP Ingest in Datadog Agent.The OpenTelemetry Datadog Exporter for Ruby.ruby
exporter
datadog Quick InstallTo install this exporter run:gem install opentelemetry-exporters-datadog
0.2.2VersionRubyLanguageExporterComponentApache 2.0License Package Details (gems) Repositoryopentelemetry-exporter-jaegerby
🔭 OpenTelemetry Authors 🔭The opentelemetry-exporter-jaeger gem provides a Jaeger exporter for OpenTelemetry Rubyjaeger
exporter
ruby Quick InstallTo install this exporter run:gem install opentelemetry-exporter-jaeger
0.24.0VersionRubyLanguageExporterComponentApache 2.0License Package Details (gems) Repositoryopentelemetry-exporter-otlpby
🔭 OpenTelemetry Authors 🔭The opentelemetry-exporter-otlp gem provides an OTLP exporter for OpenTelemetry Ruby.otlp
exporter
ruby Quick InstallTo install this exporter run:gem install opentelemetry-exporter-otlp
0.30.0VersionRubyLanguageExporterComponentApache 2.0License Package Details (gems) RepositoryOTLP exporter over gRPC for Rubyby
🔭 OpenTelemetry Authors 🔭The opentelemetry-exporter-otlp-grpc gem provides an OTLP exporter over gRPC for OpenTelemetry Ruby.otlp
grpc
exporter
rubyRubyLanguageExporterComponentApache 2.0License RepositoryOTLP over HTTP exporter for Rubyby
🔭 OpenTelemetry Authors 🔭The opentelemetry-exporter-otlp-http gem provides an OTLP over HTTP exporter for OpenTelemetry Ruby.otlp
http
exporter
rubyRubyLanguageExporterComponentApache 2.0License RepositoryOTLP metrics exporter for Rubyby
🔭 OpenTelemetry Authors 🔭The opentelemetry-exporter-otlp-metrics gem provides an OTLP metrics exporter for OpenTelemetry for Ruby.otlp
metrics
exporter
rubyRubyLanguageExporterComponentApache 2.0License Repositoryopentelemetry-exporter-zipkinby
🔭 OpenTelemetry Authors 🔭The opentelemetry-exporter-zipkin gem provides a Zipkin exporter for OpenTelemetry Ruby.zipkin
exporter
ruby Quick InstallTo install this exporter run:gem install opentelemetry-exporter-zipkin
0.24.0VersionRubyLanguageExporterComponentApache 2.0License Package Details (gems) RepositoryAzure Application Insights Exporterby
Jan KuehleOpenTelemetry exporter for Azure Application Insightsrust
exporter Quick InstallTo install this exporter run:cargo add opentelemetry-application-insights
0.29.0VersionRustLanguageExporterComponentMITLicense Package Details (crates) RepositoryDatadog Exporterby
🔭 OpenTelemetry Authors 🔭A Rust OpenTelemetry exporter and propagators for Datadogrust
exporter
propagators Quick InstallTo install this exporter run:cargo add opentelemetry-datadog
0.10.0VersionRustLanguageExporterComponentApache 2.0License Package Details (crates) RepositoryOTLP Exporterby
🔭 OpenTelemetry Authors 🔭This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.rust
exporter Quick InstallTo install this exporter run:cargo add opentelemetry-otlp
0.28.0VersionRustLanguageExporterComponentApache 2.0License Package Details (crates) RepositoryPrometheus Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Prometheus Exporter for Rust.rust
exporter Quick InstallTo install this exporter run:cargo add opentelemetry-prometheus
0.14.1VersionRustLanguageExporterComponentApache 2.0License Package Details (crates) RepositoryGoogle StackDriver Exporterby
🔭 OpenTelemetry Authors 🔭A Rust OpenTelemetry exporter for Google StackDriverrust
exporter Quick InstallTo install this exporter run:cargo add opentelemetry-stackdriver
0.18.0VersionRustLanguageExporterComponentApache 2.0 OR MITLicense Package Details (crates) RepositoryStdout Exporterby
🔭 OpenTelemetry Authors 🔭This crate provides exporters that export to stdout or any implementation of std::io::Write.rust
exporter Quick InstallTo install this exporter run:cargo add opentelemetry-stdout
0.28.0VersionRustLanguageExporterComponentApache 2.0License Package Details (crates) Repositoryuser_events Logs Exporterby
🔭 OpenTelemetry Authors 🔭A Rust OpenTelemetry Log exporter for Linux Kernel user_eventsrust
exporter
linux
user_events Quick InstallTo install this exporter run:cargo add opentelemetry-user-events-logs
0.3.0VersionRustLanguageExporterComponentApache 2.0 OR MITLicense Package Details (crates) Repositoryuser_events Metrics Exporterby
🔭 OpenTelemetry Authors 🔭A Rust OpenTelemetry Metric exporter for Linux Kernel user_eventsrust
exporter
linux
user_events Quick InstallTo install this exporter run:cargo add opentelemetry-user-events-metrics
0.3.0VersionRustLanguageExporterComponentApache 2.0 OR MITLicense Package Details (crates) RepositoryZipkin Exporterby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Zipkin Exporter for Rust.rust
exporter Quick InstallTo install this exporter run:cargo add opentelemetry-zipkin
0.19.0VersionRustLanguageExporterComponentApache 2.0License Package Details (crates) RepositoryGoogle Cloud Auth Extensionby
🔭 OpenTelemetry Authors 🔭This extension provides automatic Google Cloud authentication for OpenTelemetry Java’s OTLP exporters, enabling telemetry export to Google Cloud for both zero-code and manual instrumentation setups.gcp
extension
java
auth
googleJavaLanguageExtensionComponentApache 2.0License RepositoryGin-gonic Instrumentation With Metricsby
CyprinusOpenTelemetry tracer & metric instrumentation as Gin Middlewaregin
metric
go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License Documentation RepositoryOpenTelemetry Metrics for gRPC first party integration
 incubatingby
gRPC AuthorsgRPC provides support for an OpenTelemetry plugin that provides metricsincubating
c++
grpcC++LanguageInstrumentationComponentApache-2.0License Website Documentation Repositoryhttpd (Apache) Instrumentationby
🔭 OpenTelemetry Authors 🔭httpd (Apache) OpenTelemetry module to add OpenTelemetry distributed tracing support to httpd.c++
instrumentationC++LanguageInstrumentationComponentApache 2.0License RepositoryNGINX Instrumentationby
🔭 OpenTelemetry Authors 🔭NGINX OpenTelemetry module to add OpenTelemetry distributed tracing support to NGINX.c++
nginx
instrumentationC++LanguageInstrumentationComponentApache 2.0License RepositoryNGINX Native OTel Module first party integrationby
NGINX, Inc.The ngx_otel_module dynamic module enables NGINX Open Source or NGINX Plus to send telemetry data to an OTel collector.nginx
web server
c++C++LanguageInstrumentationComponentApache-2.0License Website RepositoryOpenTelemetry Webserver Moduleby
🔭 OpenTelemetry Authors 🔭The OTel web server module comprises of both Apache HTTP Server and NGINX instrumentation.c++
instrumentation
apache
nginx
webserverC++LanguageInstrumentationComponentApache 2.0License RepositoryASP.NET Instrumentationby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments ASP.NET and collect metrics and traces about incoming web requests.asp
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.AspNet
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryASP.NET Telemetry HttpModule for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭The ASP.NET Telemetry HttpModule enables distributed tracing of incoming ASP.NET requests using the OpenTelemetry API.asp
telemetry
http
module
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryASP.NET Core Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments ASP.NET Core and collect metrics and traces about incoming web requests.asp
core
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.AspNetCore
1.11.1Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryAWS SDK client instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides AWS SDK client instrumentationinstrumentation
aws
aws-sdk
dotnet
sqs
sns
dynamodb Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.AWS
1.11.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryAWS .NET SDK for Lambdaby
🔭 OpenTelemetry Authors 🔭This repository contains SDK to instrument Lambda handler to create incoming span.aws
lambda
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.AWSLambda
1.11.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryAzure SDK Instrumentation nativeby
Microsoft Azure AuthorsInstrumentation for Azure SDK for .NET (Track 2 libraries).dotnet
C#
.NET
instrumentation
azure-sdk
azure.NETLanguageInstrumentationComponentMITLicense Website Documentation RepositoryCassandra Instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments CassandraCSharpDrivercassandra
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Cassandra
1.0.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryConfluent.Kafka client instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭Confluent.Kafka client instrumentation for OpenTelemetryconfluent
kafka
instrumentation
dotnet.NETLanguageInstrumentationComponentApache 2.0License RepositoryElasticsearch Client Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Automatically instruments events emitted by the NEST/Elasticsearch.Net client library.elasticsearch
client
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.ElasticsearchClient
1.0.0-beta.5Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryEntityFrameworkCore Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Automatically instruments the outgoing database requests from Microsoft.EntityFrameworkCore.entity
framework
core
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.EntityFrameworkCore
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryEventCounters Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library , which republishes EventCounters using OpenTelemetry Metrics API.event
counters
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.EventCounters
1.5.1-alpha.1Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositorygRPC Core-based Client and Server Interceptors for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Adds OpenTelemetry instrumentation for gRPC Core-based client and server calls.grpc
core
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.GrpcCore
1.0.0-beta.6Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryGrpc.Net.Client Instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library which instruments Grpc.Net.Client and collects traces about outgoing gRPC requests.grpc
client
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.GrpcNetClient
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryHangfire Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments Hangfire and collects telemetry about BackgroundJob.hangfire
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Hangfire
1.9.0-beta.1Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryHttpClient and HttpWebRequest instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments System.Net.Http.HttpClient and System.Net.HttpWebRequest and collects metrics and traces about outgoing HTTP requests.http
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Http
1.11.1Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryAWS SDK client instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭AWS SDK client instrumentation for OpenTelemetry .NETinstrumentation-aws
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.AWS
1.11.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryKafkaFlow Instrumentation for OpenTelemetry first party integrationby
FarfetchThis is an Instrumentation Library, which instruments KafkaFlow and collects traces and baggage signals about Kafka messaging.kafka
kafkaflow
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package KafkaFlow.OpenTelemetry
4.0.0-beta4Version.NETLanguageInstrumentationComponentMITLicense Documentation Package Details (nuget) RepositoryMassTransit .NET client nativeby
MassTransit ProjectBy using OpenTelemetry with MassTransit, you can gain insights into the performance of your systemsmasstransit .net client
.net Quick InstallTo install this instrumentation library run:dotnet add package MassTransit
3.2.1Version.NETLanguageInstrumentationComponentApache-2.0License Website Documentation Package Details (nuget) RepositoryMassTransit Instrumentation for OpenTelemetry .NET deprecatedby
🔭 OpenTelemetry Authors 🔭DeprecatedThis only works with MassTransit v7 (and earlier, where supported). MassTransit v8.0.0 and later have built-in direct support for OpenTelemetry via ActivitySource.Automatically instruments DiagnosticSource events emitted by MassTransit library.masstransit
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.MassTransit
1.0.0-beta.3Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryMySqlData Instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments MySql.Data and collects telemetry about database operations.mysqldata
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.MySqlData
1.0.0-beta.7Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryNServiceBus OpenTelemetry Integration nativeby
Particular SoftwareWith NServiceBus OpenTelemetry instrumentation enabled, tracing, metrics, and logging can be individually configured via the OpenTelemetry API itself.nservicebus
dotnet Quick InstallTo install this instrumentation library run:dotnet add package NServiceBus
3.3.0-unstable71Version.NETLanguageInstrumentationComponentReciprocal Public License 1.5License Website Documentation Package Details (nuget) RepositoryOWIN Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments OWIN/Katana and collects telemetry about incoming requests.owin
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Owin
1.11.0-beta.1Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryProcess Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments .NET and collect telemetry about process behavior.process
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Process
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryQuartzNET Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Automatically instruments the Quartz jobs from Quartz.quartz
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Quartz
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) Repository.NET runtime metrics instrumentationby
🔭 OpenTelemetry Authors 🔭OpenTelemetry .NET contrib plugin for collecting metrics from .NET Runtime.NET
C#
dotnet
instrumentation
runtime
metrics Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Runtime
1.11.1Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositorySqlClient Instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments Microsoft.Data.SqlClient and System.Data.SqlClient and collects traces about database operations.sqlclient
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.SqlClient
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryStackExchange.Redis Instrumentation for OpenTelemetryby
🔭 OpenTelemetry Authors 🔭This is an Instrumentation Library, which instruments StackExchange.Redis and collects traces about outgoing calls to Redis.stackexchange
redis
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.StackExchangeRedis
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryThrottlingTroll nativeby
ThrottlingTroll ProjectThrottlingTroll is a rate limiting/throttling/circuit-breaking middleware for ASP.NET Core and Azure Functions. ThrottlingTroll is instrumented with OTel, so you can clearly see and measure how it works.throttlingtroll
.net
instrumentation Quick InstallTo install this instrumentation library run:dotnet add package ThrottlingTroll
7.3.0Version.NETLanguageInstrumentationComponentMITLicense Website Documentation Package Details (nuget) RepositoryWCF Instrumentation for OpenTelemetry .NETby
🔭 OpenTelemetry Authors 🔭Instruments WCF clients and/or services using implementations of IClientMessageInspector and IDispatchMessageInspector respectively.wcf
instrumentation
dotnet Quick InstallTo install this instrumentation library run:dotnet add package OpenTelemetry.Instrumentation.Wcf
1.11.0-beta.2Version.NETLanguageInstrumentationComponentApache 2.0License Package Details (nuget) RepositoryEcto Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Elixir database library Ecto.elixir
database
sql
instrumentation Quick InstallThe package can be installed by adding opentelemetry_ecto to your list of dependencies in mix.exs:def deps do
  [
    {:opentelemetry_ecto, "~> 1.2.0"}
  ]
1.2.0VersionElixirLanguageInstrumentationComponentApache 2.0License Package Details (hex) RepositoryOban Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Oban job processing framework.elixir
jobs
instrumentationElixirLanguageInstrumentationComponentApache 2.0License RepositoryPhoenix Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Elixir web framework Phoenix.erlang
elixir
http
instrumentationElixirLanguageInstrumentationComponentApache 2.0License RepositoryRedix Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for redix Redis client.elixir
redis
instrumentationElixirLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryBanditby
🔭 OpenTelemetry Authors 🔭Telemetry handler that creates OpenTelemetry spans from Bandit events.bandit
instrumentation
erlang Quick InstallThe package can be installed by adding opentelemetry_bandit to your list of dependencies in mix.exs:def deps do
  [
    {:opentelemetry_bandit, "~> 0.2.0"}
  ]
0.2.0VersionErlangLanguageInstrumentationComponentApache 2.0License Package Details (hex) Repositoryopentelemetry_broadwayby
🔭 OpenTelemetry Authors 🔭OpenTelemetry tracing for Broadway pipelines.broadway
instrumentation
erlang Quick InstallThe package can be installed by adding opentelemetry_broadway to your list of dependencies in mix.exs:def deps do
  [
    {:opentelemetry_broadway, "~> 0.2.0"}
  ]
0.2.0VersionErlangLanguageInstrumentationComponentApache 2.0License Package Details (hex) RepositoryCowboy Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Erlang HTTP server Cowboy.erlang
elixir
http
instrumentationErlangLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryDataloaderby
🔭 OpenTelemetry Authors 🔭Telemetry handler that creates OpenTelemetry spans from Dataloader events.dataloader
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryEcto Instrumentationby
🔭 OpenTelemetry Authors 🔭Telemetry handler that creates OpenTelemetry spans from Ecto query events.ecto
instrumentation
erlang Quick InstallThe package can be installed by adding opentelemetry_ecto to your list of dependencies in mix.exs:def deps do
  [
    {:opentelemetry_ecto, "~> 1.2.0"}
  ]
1.2.0VersionErlangLanguageInstrumentationComponentApache 2.0License Package Details (hex) RepositoryElli Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Erlang HTTP server Elli.erlang
http
instrumentationErlangLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryFinchby
🔭 OpenTelemetry Authors 🔭OpentelemetryFinch uses telemetry handlers to create OpenTelemetry spans from Finch events.finch
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License Repositorygrpcbox Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Erlang gRPC client/server grpcbox.erlang
grpc
instrumentationErlangLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryHTTPoisonby
🔭 OpenTelemetry Authors 🔭OpentelemetryHTTPoison is an Instrumentation Library for HTTPoison.httpoison
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryNebulexby
🔭 OpenTelemetry Authors 🔭OpentelemetryNebulex uses telemetry handlers to create OpenTelemetry spansnebulex
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryOban Instrumentationby
🔭 OpenTelemetry Authors 🔭OpentelemetryOban uses telemetry handlers to create OpenTelemetry spans from Oban events.oban
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryPhoenix Instrumentationby
🔭 OpenTelemetry Authors 🔭Telemetry handler that creates OpenTelemetry spans from Phoenix events.phoenix
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryRedix Instrumentationby
🔭 OpenTelemetry Authors 🔭OpentelemetryRedix uses telemetry handlers to create OpenTelemetry spans from Redix command events.redix
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryReqby
🔭 OpenTelemetry Authors 🔭For details, see https://hex.pm/packages/opentelemetry_req.req
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryTesla Instrumentationby
🔭 OpenTelemetry Authors 🔭Tesla middleware that creates OpenTelemetry spans and injects tracing headers into HTTP requests for Tesla clients.tesla
instrumentation
erlangErlangLanguageInstrumentationComponentApache 2.0License RepositoryOpentelemetryXandraby
🔭 OpenTelemetry Authors 🔭This library uses Telemetry events to create OpenTelemetry Spans for Xandra queries.xandra
instrumentation
erlang Quick InstallThe package can be installed by adding opentelemetry_xandra to your list of dependencies in mix.exs:def deps do
  [
    {:opentelemetry_xandra, "~> 0.2.0"}
  ]
0.2.0VersionErlangLanguageInstrumentationComponentApache 2.0License Package Details (hex) RepositoryCloudWeGo-Hertz first party integrationby
CloudWeGoThe obs-opentelemetry extension allows hertz to integrate OpenTelemetry with a simple setup.go
hertz
cloudwego Quick InstallTo install this instrumentation library run:go get github.com/hertz-contrib/obs-opentelemetry
v0.3.1VersionGoLanguageInstrumentationComponentApache-2.0License Website Documentation Package Details (go) RepositoryConnect RPC instrumentation first party integrationby
Connect AuthorsGo contrib plugin for Connect RPCgo
instrumentation
connect
grpcGoLanguageInstrumentationComponentApache 2.0License RepositoryEcho Instrumentationby
🔭 OpenTelemetry Authors 🔭Go contrib plugin for the labstack/echo package.go
instrumentationGoLanguageInstrumentationComponentApache 2.0License RepositoryFiber Instrumentation first party integrationby
gofiber authors & contributorsGo contrib plugin for the gofiber/fiber package.go
instrumentation
httpGoLanguageInstrumentationComponentMITLicense RepositoryGin-gonic Instrumentationby
🔭 OpenTelemetry Authors 🔭Go contrib plugin for the gin-gonic/gin package.go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License Repositorygo-pg instrumentation first party integrationby
go-pg AuthorsInstrumentation for go-pg PostgreSQL client.go
instrumentation
postgresqlGoLanguageInstrumentationComponentBSD-2-ClauseLicense Repositorygo-redis instrumentation first party integrationby
RedisInstrumentation for go-redis Redis client.go
instrumentation
redisGoLanguageInstrumentationComponentBSD-2-ClauseLicense RepositoryGo-Resty Instrumentationby
dubonziCustom instrumentation for the go-resty HTTP client library.go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry for gorm first party integrationby
zstone12OpenTelemetry for gormgo
gorm Quick InstallTo install this instrumentation library run:go get gorm.io/plugin/opentelemetry
v0.1.12VersionGoLanguageInstrumentationComponentMITLicense Website Documentation Package Details (go)Goyek instrumentation first party integrationby
Robert PająkPackage otelgoyek provides OpenTelemetry instrumentation for goyek.go
instrumentation
goyekGoLanguageInstrumentationComponentMITLicense Documentation RepositoryGqlgen Instrumentationby
Ravil GalaktionovGo contrib plugin for the github.com/99designs/gqlgen package.go
instrumentationGoLanguageInstrumentationComponentApache 2.0License RepositoryGraphQL-Go instrumentationby
UptraceInstrumentation for graphql-go GraphQL Server that records GraphQL operations using OpenTelemetry Tracing API.go
instrumentation
database
graphqlGoLanguageInstrumentationComponentBSD-2-ClauseLicense RepositorygRPC instrumentationby
🔭 OpenTelemetry Authors 🔭Go contrib plugin for Google’s gRPC package.go
instrumentation
grpcGoLanguageInstrumentationComponentApache 2.0License RepositoryGo gRPC metric instrumentationby
Amin MahboubiGo metric instrumentation for gRPC servers and clients based on gRPC Stats Handler interface.go
instrumentation
grpc
metricsGoLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Metrics for gRPC first party integration
 incubatingby
gRPC AuthorsgRPC provides support for an OpenTelemetry plugin that provides metricsgo
incubating
grpcGoLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryHost Instrumentationby
🔭 OpenTelemetry Authors 🔭Go contrib plugin for the host package.go
instrumentationGoLanguageInstrumentationComponentApache 2.0License RepositoryGo package net/http instrumentationby
🔭 OpenTelemetry Authors 🔭Package http provides a http.Handler and functions that are intended to be used to add tracing by wrapping existing handlers (with Handler) and routes WithRouteTag.http
instrumentation
goGoLanguageInstrumentationComponentApache 2.0License RepositoryIBM/sarama Instrumentationby
🔭 OpenTelemetry Authors 🔭
,
Dominic EvansPackage sarama provides functions to trace the IBM/sarama package.sarama
instrumentation
go Quick InstallTo install this instrumentation library run:go get github.com/dnwe/otelsarama
GoLanguageInstrumentationComponentApache 2.0License Package Details (go) RepositoryIBM MQ Instrumentation for OpenTelemetry first party integrationby
Mark Taylor
,
IBM MQ DevelopmentThis package extracts metrics from an IBM MQ queue manager and forwards them to an OpenTelemetry environment.ibmmq
mqseries
go
instrumentationGoLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Go Instrumentation for confluent-kafka-goby
JurabekPackage otelkafka provides functionality to trace the confluent-kafka-go package.go
instrumentation
confluent-kafka-go
kafka Quick InstallTo install this instrumentation library run:go get github.com/jurabek/otelkafka
v1.0.0VersionGoLanguageInstrumentationComponentApache 2.0License Package Details (go) RepositoryKotel - Instrumentation plugin for franz-go first party integrationby
John GerassimouKotel is an instrumentation plugin for the franz-go Kafka client. It provides tracing and metrics options.go
instrumentation
kafka
franz-go
tracing
metricsGoLanguageInstrumentationComponentBSD-3-ClauseLicense RepositoryLabstack Echo instrumentationby
🔭 OpenTelemetry Authors 🔭Go contrib plugin for the labstack/echo package.go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License Repositorylogrus instrumentationby
Vladimir MihailencoInstrumentation for logrus logging library.go
instrumentation
logging
logrusGoLanguageInstrumentationComponentBSD-2-ClauseLicense RepositoryMongoDB database instrumentationby
🔭 OpenTelemetry Authors 🔭Package mongo-driver provides functions to trace the go.mongodb.org/mongo-driver/mongo package.go
instrumentation
mongodb
databaseGoLanguageInstrumentationComponentApache 2.0License RepositoryGorilla Mux instrumentationby
🔭 OpenTelemetry Authors 🔭Package mux provides functions to trace the gorilla/mux packagemux
instrumentation
goGoLanguageInstrumentationComponentApache 2.0License RepositoryGolang OpenTelemetry Neo4j Instrumentationby
Ruben MennesNeo4j instrumentation for golang.golang
instrumentation
neo4j
neo4j-driverGoLanguageInstrumentationComponentApache 2.0License Repositorynhatthm/otelsql – OpenTelemetry SQL database driver wrapper for Goby
nhatthmAdd a OpenTelemetry wrapper to your existing database code to instrument the interactions with the database.go
instrumentation
database
sqlGoLanguageInstrumentationComponentApache 2.0License RepositoryAWS SDK for Goby
🔭 OpenTelemetry Authors 🔭AWS SDK V2 for Go instrumentationaws
instrumentation
goGoLanguageInstrumentationComponentApache 2.0License Repositoryaws-lambda-go Instrumentationby
🔭 OpenTelemetry Authors 🔭Package otellambda instruments the github.com/aws/aws-lambda-go package.lambda
aws
instrumentation
goGoLanguageInstrumentationComponentApache 2.0License Repositoryotelpgx - tracing support for github.com/jackc/pgxby
Exaring AG.Provides OpenTelemetry tracing implementation for the pgx PostgreSQL package.go
instrumentation
database
postgresql
tracingGoLanguageInstrumentationComponentApache 2.0License Repositoryjmoiron/sqlx instrumentationby
Vladimir MihailencoInstrumentation for jmoiron/sqlx that records sqlx queries and reports DBStats metrics.go
instrumentation
database
sql
sqlxGoLanguageInstrumentationComponentBSD-2-ClauseLicense RepositoryGo-restful Instrumentationby
🔭 OpenTelemetry Authors 🔭Package go-restful provides functions to trace the emicklei/go-restful/v3 package.restful
instrumentation
goGoLanguageInstrumentationComponentApache 2.0License Repositoryotelchi — Instrumentation for go-chi/chiby
Riandy R.NInstrumentation for the Golang go-chi/chi package.go
instrumentation
go-chi
chiGoLanguageInstrumentationComponentApache 2.0License RepositoryGo runtime metrics instrumentationby
🔭 OpenTelemetry Authors 🔭Go contrib plugin for collecting metrics from Go runtime packagego
instrumentation
runtime
metricsGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkbuntdb – Instrumentation for github.com/tidwall/buntdbby
Splunk Inc.Instrumentation for the github.com/tidwall/buntdb package.go
instrumentation
sqlGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkchi – Instrumentation for github.com/go-chi/chiby
Splunk Inc.Instrumentation for the github.com/go-chi/chi package.go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkclient-go – Instrumentation for k8s.io/client-goby
Splunk Inc.Instrumentation for the k8s.io/client-go package.go
instrumentation
kubernetesGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkdns – Instrumentation for github.com/miekg/dnsby
Splunk Inc.Instrumentation for the github.com/miekg/dns package.go
instrumentation
dnsGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkelastic – Instrumentation for gopkg.in/olivere/elasticby
Splunk Inc.Instrumentation for the gopkg.in/olivere/elastic package.go
instrumentation
database
elasticsearchGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkgorm – Instrumentation for github.com/jinzhu/gormby
Splunk Inc.Instrumentation for the github.com/jinzhu/gorm package.go
instrumentation
databaseGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkgraphql – Instrumentation for github.com/graph-gophers/graphql-goby
Splunk Inc.Instrumentation for the github.com/graph-gophers/graphql-go package.go
instrumentation
graphqlGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkhttp – Instrumentation for net/httpby
Splunk Inc.Splunk specific instrumentation for the Golang net/http package.go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkhttprouter – Instrumentation for github.com/julienschmidt/httprouterby
Splunk Inc.Instrumentation for the github.com/julienschmidt/httprouter package.go
instrumentation
httpGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkkafka – Instrumentation for github.com/confluentinc/confluent-kafka-go/kafka/splunkkafkaby
Splunk Inc.Instrumentation for the github.com/confluentinc/confluent-kafka-go/kafka/splunkkafka package.go
instrumentation
kafkaGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkleveldb – Instrumentation for github.com/syndtr/goleveldb/leveldbby
Splunk Inc.Instrumentation for the github.com/syndtr/goleveldb/leveldb package.go
instrumentation
database
leveldbGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkmysql – Instrumentation for the MySQL Driver Packageby
Splunk Inc.Instrumentation for the github.com/go-sql-driver/mysql package.go
instrumentation
database
mysqlGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkpgx – Instrumentation for github.com/jackc/pgxby
Splunk Inc.Instrumentation for the github.com/jackc/pgx package.go
instrumentation
database
postgresqlGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkpq – Instrumentation for github.com/lib/pqby
Splunk Inc.Instrumentation for the github.com/lib/pq package.go
instrumentation
database
postgresqlGoLanguageInstrumentationComponentApache 2.0License Repositorysplunkredigo – Instrumentation for github.com/gomodule/redigoby
Splunk Inc.Instrumentation for the github.com/gomodule/redigo package.go
instrumentation
database
redisGoLanguageInstrumentationComponentApache 2.0License Repositorysplunksql – Instrumentation for database/sqlby
Splunk Inc.Instrumentation for the Golang database/sql package.go
instrumentation
database
sqlGoLanguageInstrumentationComponentApache 2.0License Repositorysplunksqlx – Instrumentation for github.com/jmoiron/sqlxby
Splunk Inc.Instrumentation for the github.com/jmoiron/sqlx package.go
instrumentation
databaseGoLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Go Instrumentation for SQSby
Everton Marquesopentelemetry-trace-sqs propagates OpenTelemetry tracing with SQS messages for the Go language.go
instrumentation
sqsGoLanguageInstrumentationComponentMITLicense RepositoryGORM instrumentationby
Vladimir MihailencoInstrumentation for gorm.io/gorm that records queries and reports DBStats metrics.go
instrumentation
database
sql
gormGoLanguageInstrumentationComponentBSD-2-ClauseLicense RepositorySQL instrumentationby
Vladimir MihailencoInstrumentation for SQL that records queries (including transactions and statements) and reports DBStats metrics.go
instrumentation
database
sqlGoLanguageInstrumentationComponentBSD-2-ClauseLicense Repositoryotelsql – Instrumentation for database/sqlby
Sam XieInstrumentation for the Golang database/sql package.go
instrumentation
database
sql Quick InstallTo install this instrumentation library run:go get github.com/XSAM/otelsql
v0.38.0VersionGoLanguageInstrumentationComponentApache 2.0License Package Details (go) RepositoryZap instrumentationby
Vladimir MihailencoInstrumentation for Zap logging library.go
instrumentation
logging
zapGoLanguageInstrumentationComponentBSD-2-ClauseLicense RepositoryAkka Actor Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Akka Actor instrumentation to track requests through OpenTelemetry.java
instrumentation
akkaJavaLanguageInstrumentationComponentApache 2.0License RepositoryAkka Actor Fork Join Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Akka Actor Fork Join instrumentation to track requests through OpenTelemetry.java
instrumentation
akkaJavaLanguageInstrumentationComponentApache 2.0License RepositoryAkka HTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Akka HTTP instrumentation to track requests through OpenTelemetry.java
instrumentation
akkaJavaLanguageInstrumentationComponentApache 2.0License RepositoryAlibaba Druid Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides an Alibaba Druid instrumentation to track requests through OpenTelemetry.alibabadruid
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositorySettings for the OpenTelemetry Instrumentation Annotations integrationby
🔭 OpenTelemetry Authors 🔭undefinedannotations
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache Dubbo first party integrationby
Apache Dubbo Authorsjava
apache
dubboJavaLanguageInstrumentationComponentApache-2.0License Website DocumentationApache HTTP Async Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Apache HTTP Async Client instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache HTTP Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Apache HTTP Client instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache DBCP Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Apache DBCPapache
dbcp
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache Dubbo Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Apache Dubboapache
dubbo
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache ShenYu instrumentationby
🔭 OpenTelemetry Authors 🔭Settings for the Apache ShenYu instrumentationapache
shenyu
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryArmeria Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Armeria instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryAsync HTTP Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Async HTTP Clientasync
http
client
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryAWS Lambda Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a AWS Lambda instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryAWS SDK Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a AWS SDK instrumentation to track requests through OpenTelemetry.java
instrumentation
aws
aws-sdk
sqs
sns
dynamodbJavaLanguageInstrumentationComponentApache 2.0License RepositoryAzure SDK Instrumentation first party integrationby
Microsoft AuthorsInstrumentation for Azure SDK for Java (Track 2 libraries).java
instrumentation
azure-sdk
azureJavaLanguageInstrumentationComponentMITLicense RepositoryAzure Core Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Azure Core Instrumentationazure
core
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License Repositoryc3p0 Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for c3p0c3p0
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache Camel Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides an Apache Camel instrumentation to track requests through OpenTelemetry.camel
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryCassandra Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Cassandra instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryClickhouse Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Clickhouse instrumentation to track requests through OpenTelemetry.clickhouse
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryConcurrent Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a concurrent instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryCouchbase Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Couchbase instrumentation to track requests through OpenTelemetry.java
couchbase
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryDropwizard Instrumentation Libraryby
🔭 OpenTelemetry Authors 🔭This library provides Dropwizard instrumentation.dropwizard
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryElasticsearch Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Elasticsearch instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryElasticsearch Java API Client nativeby
Elasticsearch B.V.You can use OpenTelemetry to monitor the performance and behavior of your Elasticsearch requests through the Java Client.java
elasticsearch
api
clientJavaLanguageInstrumentationComponentApache-2.0License Website DocumentationExecutors Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides Executors Instrumentationexecutors
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryExtension Kotlinby
🔭 OpenTelemetry Authors 🔭Instrumentation for opentelemetry-extension-kotlinextension
kotlin
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryFinagle HTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Finagle HTTP Instrumentation to track requests through OpenTelemetry.finagle
http
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryFinatra Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Finatra instrumentation to track requests through OpenTelemetry.java
instrumentation Quick InstallMavenAdd the following dependency in your pom.xml file to install this package.<dependency>
    <groupId>io.opentelemetry.javaagent.instrumentation</groupId>
    <artifactId>opentelemetry-javaagent-finatra-2.9</artifactId>
    <version>2.15.0-alpha</version>
</dependency>
GradleAdd the following dependency in your build.gradle file to install this package:dependencies {
 implementation 'io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-finatra-2.9:2.15.0-alpha'
}
2.15.0-alphaVersionJavaLanguageInstrumentationComponentApache 2.0License Package Details (maven) RepositoryGeode Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Geode instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryGoogle HTTP Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Google HTTP Client instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryGrails Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Grailsgrails
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryGraphQL Java Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for GraphQL Javagraphql
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryGrizzly Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Grizzly instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositorygRPC Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a gRPC instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Metrics for gRPC first party integration
 incubatingby
gRPC AuthorsgRPC provides support for an OpenTelemetry plugin that provides metricsjava
incubating
grpcJavaLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryGuava Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Guava instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryGWT Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for GWTgwt2.0
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryHibernate Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Hibernate instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryHikaricp Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Hikaricphikaricp
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryHTTP URL Connection Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a HTTP URL Connection instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License Repositoryhttp4k Instrumentation first party integrationby
http4k AuthorsThis library provides http4k instrumentation to track HTTP requests through OpenTelemetry.java
instrumentation Quick InstallMavenAdd the following dependency in your pom.xml file to install this package.<dependency>
    <groupId>org.http4k</groupId>
    <artifactId>http4k-opentelemetry</artifactId>
    <version>4.48.2.0</version>
</dependency>
GradleAdd the following dependency in your build.gradle file to install this package:dependencies {
 implementation 'org.http4k:http4k-opentelemetry:4.48.2.0'
}
4.48.2.0VersionJavaLanguageInstrumentationComponentApache 2.0License Documentation Package Details (maven) RepositoryHystrix Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Hystrix instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License Repositoryinfluxdb instrumentationby
🔭 OpenTelemetry Authors 🔭influxdb instrumentationinfluxdb
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJava HTTP Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a HTTP instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License Repositoryjavalin instrumentationby
🔭 OpenTelemetry Authors 🔭javalin instrumentationjavalin
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJava Util Logging Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Java Util Loggingutil
logging
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJAX-WS Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a JAX-WS instrumentation to trace requests through OpenTelemetry. It includes support for jws as well as axis2, cxf, and metro libraries.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJAXRS Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a JAXRS instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJAXRS Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a JAXRS Client instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJBoss Log Manager Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for JBoss Log Managerjboss
logmanager
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJDBC Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a JDBC instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJDBI first party integrationby
JDBI AuthorsInstalling the JdbiOpenTelemetryPlugin enables Jdbi statements to emit trace spans recording metadata like SQL, parameters, and execution time.java
jdbiJavaLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryJedis Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Jedis instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJenkins Plugin for OpenTelemetry first party integrationby
Jenkins AuthorsMonitor and observe Jenkins with OpenTelemetry. Visualize jobs and pipelines executions as distributed traces.java
jenkins
pluginJavaLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryJetty Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Jetty instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJetty HTTP Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Jetty HTTP Clientjetty
http
client
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJMS Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a JMS instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJMX Metric Insightby
🔭 OpenTelemetry Authors 🔭This subsystem of the OpenTelemetry Java agent provides a framework for collecting and reporting JMX metrics within the instrumented application.jmx
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJodd HTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Jodd HTTP instrumentation to track requests through OpenTelemetry.jodd
http
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJSF Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for JSFjsf
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryJSP Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a JSP instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryKafka Clients Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Kafka Clients instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryKafka Streams Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Kafka Streams instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryKotlin Coroutines Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Kotlin Coroutines instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryKtor Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Ktorktor
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryKubernetes Client Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Kubernetes Client instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryLettuce Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Lettuce instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryLiberty Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Libertyliberty
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryLog4J Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Log4J instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryLogback Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Logback instrumentation to track requests through OpenTelemetry.java
instrumentation
logbackJavaLanguageInstrumentationComponentApache 2.0License RepositoryMicrometer Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Micrometermicrometer
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryMicrometer Tracing nativeby
Micrometer AuthorsMicrometer Tracing supports the OpenTelemetry Tracer.java
micrometerJavaLanguageInstrumentationComponentApache-2.0License Website DocumentationMongo Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Mongo instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryMyBatis Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for MyBatismybatis
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryNetty Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Netty instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryokHTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a okHTTP instrumentation to track requests through OpenTelemetry.java
instrumentation Quick InstallMavenAdd the following dependency in your pom.xml file to install this package.<dependency>
    <groupId>io.opentelemetry.instrumentation</groupId>
    <artifactId>opentelemetry-okhttp-3.0</artifactId>
    <version>2.15.0-alpha</version>
</dependency>
GradleAdd the following dependency in your build.gradle file to install this package:dependencies {
 implementation 'io.opentelemetry.instrumentation:opentelemetry-okhttp-3.0:2.15.0-alpha'
}
2.15.0-alphaVersionJavaLanguageInstrumentationComponentApache 2.0License Package Details (maven) RepositoryOpenCensus Shimby
🔭 OpenTelemetry Authors 🔭This library provides an instrumentation shim for OpenCensusopencensus
shim
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositorySettings for the OpenSearch instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for OpenSearchopensearch
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryOracle UCP Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Oracle UCPoracle
ucp
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryOshi Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Oshioshi
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License Repositorypayaraby
🔭 OpenTelemetry Authors 🔭This library provides a Payara instrumentationpayara
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryInstrumentation for Apache Pekkoby
🔭 OpenTelemetry Authors 🔭This library provides a Apache Pekko instrumentation to track requests through OpenTelemetry.pekko
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache Pekko Actor Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides an Apache Pekko Actor instrumentation.pekko
actor
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache Pekko HTTPby
🔭 OpenTelemetry Authors 🔭This library provides an Apache Pekko HTTP instrumentationpekko
http
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryPlay Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Play instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositorySettings for the PowerJob instrumentationby
🔭 OpenTelemetry Authors 🔭powerjob
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryApache Pulsar instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides an Apache Pulsar instrumentationpulsar
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryQuarkus nativeby
QuarkusQuarkus provides manual and automatic instrumentation for tracing and manual instrumentation capabilities for metrics.java
quarkusJavaLanguageInstrumentationComponentApache-2.0License Website DocumentationQuarkus RESTeasy Reactive Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides instrumentation for Quarkus RESTEasy Reactivequarkus
resteasy
reactive
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryQuartz Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Quartzquartz
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryInstrumentation for R2dbcby
🔭 OpenTelemetry Authors 🔭Provides OpenTelemetry instrumentation for R2dbc.r2dbc
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryRabbitMQ Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a RabbitMQ instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryRatpack Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Ratpack instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryReactor Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Reactor instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryRediscala Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Rediscala instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryRedisson Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Redisson instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryRestlet Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Restletrestlet
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryRMI Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a RMI instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryRocketMQ Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for RocketMQrocketmq
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License Repositoryruntimetelemetryby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Runtime Telemetryruntimetelemetry
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryRXJava Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a RXJava instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryScala Concurrent Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Scala Concurrent instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryServlet Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Servlet instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositorySpark Web Framework Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Spark Web Framework instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositorySpring Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Spring instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositorySpymemcached Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Spymemcached instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryStruts Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Strutsstruts
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryTapestry Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Tapestrytapestry
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryInstrumentation for Tomcat request handlersby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Tomcattomcat
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryTwilio Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Twilio instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryUndertow Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Undertowundertow
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryVaadin Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Vaadinvaadin
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryVert.x Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Vert.x instrumentation to track requests through OpenTelemetry.java
instrumentation
vert.xJavaLanguageInstrumentationComponentApache 2.0License RepositoryVert.x Reactive Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a Vert.x Reactive instrumentation to track requests through OpenTelemetry.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryViburdbcp Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Viburdbcpviburdbcp
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryWicket Instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for Wicketwicket
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryXXL-JOB Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for XXL-JOBxxl-job
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License Repositoryzioby
🔭 OpenTelemetry Authors 🔭This package provides an instrumentation library for ZIOzio
instrumentation
javaJavaLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry amqplib Instrumentation (RabbitMQ)by
🔭 OpenTelemetry Authors 🔭amqplib instrumentation for Node.js.Node.js
instrumentation
amqplib
RabbitMQ Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-amqplib
0.47.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Angular Interceptorby
Julien FabreAngular library to deploy OpenTelemetry in Angular application.Node.js
Angular
typescript
browser Quick InstallTo install this instrumentation library run:npm install @jufab/opentelemetry-angular-interceptor
1.9.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryFastify OpenTelemetryby
Holden WhiteheadFastify OpenTelemetry API integration, using the Fastify plugin spec.Node.js
fastify
fastify-plugin Quick InstallTo install this instrumentation library run:npm install @autotelic/fastify-opentelemetry
0.22.1VersionJavaScriptLanguageInstrumentationComponentMITLicense Package Details (npm) RepositoryOpenTelemetry AWS Lambda Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭AWS Lambda instrumentation for Node.js.Node.js
lambda
aws Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-aws-lambda
0.51.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry aws-sdk Instrumentationby
Aspecto Authorsaws-sdk instrumentation for Node.js.Node.js
instrumentation
aws-sdk
aws
sqs
sns
dynamodb
lambda Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-aws-sdk
0.51.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryAzure SDK Instrumentation first party integrationby
Microsoft AuthorsInstrumentation for Azure SDK for JavaScript (Track 2 libraries).javascript
typescript
Node.js
instrumentation
azure-sdk
azure Quick InstallTo install this instrumentation library run:npm install @azure/opentelemetry-instrumentation-azure-sdk
1.0.0-beta.8VersionJavaScriptLanguageInstrumentationComponentMITLicense Package Details (npm) RepositoryBullMQ Instrumentationby
Jennifer MooreAuto instrumentation for the BullMQ message systemjs
instrumentation
bullmq Quick InstallTo install this instrumentation library run:npm install @jenniferplusplus/opentelemetry-instrumentation-bullmq
0.5.1VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for bunyanby
🔭 OpenTelemetry Authors 🔭Instrumentation library for Bunyan.Node.js
bunyan
logging Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-bunyan
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry instrumentation for cassandra-driverby
🔭 OpenTelemetry Authors 🔭This module provides an instrumentation library for the injection of trace context to cassandra-driver.cassandra
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-cassandra-driver
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for cassandra-driverby
🔭 OpenTelemetry Authors 🔭Instrumentation library for Cassandra driver.Node.js
cassandra
cassandra-driver
database Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-cassandra-driver
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryInstrumentation Library for Cerbos JavaScript SDK first party integrationby
Cerbos AuthorsOpenTelemetry instrumentation for the Cerbos JavaScript SDKjs
cerbos
instrumentation Quick InstallTo install this instrumentation library run:npm install @cerbos/opentelemetry
0.5.9VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Website Documentation Package Details (npm) RepositoryConnect Instrumentationby
🔭 OpenTelemetry Authors 🔭Connect instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-connect
0.44.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Cucumber Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for the @cucumber/cucumber bundle.cucumber
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-cucumber
0.15.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry instrumentation for dataloaderby
🔭 OpenTelemetry Authors 🔭This module provides an instrumentation library for the injection of trace context to dataloaderdataloader
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-dataloader
0.17.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryDNS Instrumentationby
🔭 OpenTelemetry Authors 🔭DNS instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-dns
0.44.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryDocument Load Instrumentationby
🔭 OpenTelemetry Authors 🔭Document Load instrumentation for Browser.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-document-load
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Elasticsearch Instrumentationby
Aspecto AuthorsElasticsearch instrumentation for Node.js.Node.js
instrumentation
elasticsearch
@elastic/elasticsearchJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryExpress Instrumentationby
🔭 OpenTelemetry Authors 🔭Express instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-express
0.48.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryFastify OpenTelemetryby
🔭 OpenTelemetry Authors 🔭OpenTelemetry fastify automatic instrumentation libraryNode.js
fastify Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-fastify
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryFastify Instrumentation Library first party integrationby
FastifyFastify OpenTelemetry auto-instrumentation library.Node.js
fastify Quick InstallTo install this instrumentation library run:npm install @fastify/otel
0.5.2VersionJavaScriptLanguageInstrumentationComponentMITLicense Package Details (npm) RepositoryFetch Instrumentationby
🔭 OpenTelemetry Authors 🔭Fetch instrumentation for browsers.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-fetch
0.200.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry fs Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides an instrumentation library for fs.fs
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-fs
0.20.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Generic Pool Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭generic-pool instrumentation for Node.js.js
instrumentation
generic-pool
pooling Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-generic-pool
0.44.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryGraphQL Instrumentationby
🔭 OpenTelemetry Authors 🔭GraphQL instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-graphql
0.48.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositorygRPC Instrumentationby
🔭 OpenTelemetry Authors 🔭gRPC and gRPC.js instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-grpc
0.200.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryHapi Instrumentationby
🔭 OpenTelemetry Authors 🔭Hapi instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-hapi
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryHTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭HTTP and HTTPS instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-http
0.200.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryioRedis Instrumentationby
🔭 OpenTelemetry Authors 🔭ioRedis instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-ioredis
0.48.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry kafkajs Instrumentationby
Amir Blumkafkajs instrumentation for Node.js.Node.js
instrumentation
kafkajs
kafkaJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Instrumentation for knexby
🔭 OpenTelemetry Authors 🔭Instrumentation library for Knex.Node.js
knex
orm
database Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-knex
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryKoa Instrumentationby
🔭 OpenTelemetry Authors 🔭Koa instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-koa
0.48.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryLangChain JavaScript Instrumentationby
Arize AIInstrumentation for tracing the LangChain frameworkjavascript
instrumentation
langchain Quick InstallTo install this instrumentation library run:npm install @arizeai/openinference-instrumentation-langchain
3.2.0VersionJavascriptLanguageInstrumentationComponentApache 2.0License Documentation Package Details (npm) RepositoryOpenTelemetry Instrumentation Long Task for the Webby
🔭 OpenTelemetry Authors 🔭Instrumentation library for net module.web
long task Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-long-task
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry lru-memorizer Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides an instrumentation library for the lru-memorizer.lru-memorizer
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-lru-memoizer
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for memcachedby
🔭 OpenTelemetry Authors 🔭Instrumentation library for memcached.Node.js
memcached
database Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-memcached
0.44.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryMongoDB Instrumentationby
🔭 OpenTelemetry Authors 🔭MongoDB instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-mongodb
0.53.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Mongoose Pluginby
Walter Dal MutMongoose Plugin for Node.js.Node.js
plugin
Mongoose
MongoDBJavaScriptLanguageInstrumentationComponentMITLicense RepositoryOpenTelemetry Mongoose Instrumentationby
🔭 OpenTelemetry Authors 🔭Mongoose instrumentation for Node.js.Node.js
instrumentation
Mongoose
MongoDB Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-mongoose
0.47.0VersionJavaScriptLanguageInstrumentationComponentMITLicense Package Details (npm) RepositoryOpenTelemetry MSSQL Instrumentationby
Mohammad NadeemMSSQL instrumentation for Node.js.Node.js
instrumentation
mssqlJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryMySQL Instrumentationby
🔭 OpenTelemetry Authors 🔭MySQL instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-mysql
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for MySQL2by
🔭 OpenTelemetry Authors 🔭MySQL2 instrumentation for Node.js.Node.js
js
instrumentation
mysql2
mysql
database Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-mysql2
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Neo4j Instrumentationby
Aspecto AuthorsNeo4j instrumentation for Node.js.Node.js
instrumentation
neo4j
neo4j-driverJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Instrumentation for Nestby
Metin SeylanInstrumentation library for Nest.Node.js
nest
nestjsJavaScriptLanguageInstrumentationComponentMITLicense RepositoryNestJS OpenTelemetryby
🔭 OpenTelemetry Authors 🔭OpenTelemetry NestJS automatic instrumentation libraryNode.js
instrumentation
nestjs Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-nestjs-core
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry NestJS Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for the Nest framework.nestjs-core
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-nestjs-core
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for netby
🔭 OpenTelemetry Authors 🔭Instrumentation library for net module.Node.js
net Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-net
0.44.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryInstrumentation for Next.js nativeby
Vercel, Inc.Next.js supports OpenTelemetry instrumentation out of the box.Node.js
instrumentation
nestjsJavaScriptLanguageInstrumentationComponentMITLicense Website Documentation RepositoryOpenTelemetry NodeCache Instrumentationby
Aspecto AuthorsNodeCache instrumentation for Node.js.Node.js
instrumentation
node-cacheJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryOpenAI JavaScript Instrumentationby
Arize AIInstrumentation for tracing the OpenAI Node.js SDKjavascript
instrumentation
openai Quick InstallTo install this instrumentation library run:npm install @arizeai/openinference-instrumentation-openai
2.2.0VersionJavascriptLanguageInstrumentationComponentApache 2.0License Documentation Package Details (npm) RepositoryPostgreSQL Instrumentationby
🔭 OpenTelemetry Authors 🔭PostgreSQL instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-pg
0.52.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry pillarjs/Router Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for pillarjs/router and allows the user to automatically collect trace data and export them to their backend of choice.Node.js
pillarjs
pillarjs-router
router Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-restify
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for pinoby
🔭 OpenTelemetry Authors 🔭Instrumentation library for pino.Node.js
pino
logging Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-pino
0.47.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for pgby
🔭 OpenTelemetry Authors 🔭Instrumentation library for pg.Node.js
pg
pg-pool
postgresql
database Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-pg
0.52.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryNestJS OpenTelemetryby
Ivan SantosOpenTelemetry module for NestJS framework.Node.js
instrumentation
nestjsJavaScriptLanguageInstrumentationComponentMITLicense RepositoryPrisma Tracing Instrumentation first party integrationby
PrismaOpenTelemetry compliant tracing instrumentation for the Prisma ORM.Node.js
tracing
instrumentation Quick InstallTo install this instrumentation library run:npm install @prisma/instrumentation
6.6.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryReact Load Instrumentationby
🔭 OpenTelemetry Authors 🔭React loading automatic instrumentationjs
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/plugin-react-load
0.32.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryRedis Instrumentationby
🔭 OpenTelemetry Authors 🔭Redis instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-redis
0.47.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Redis Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for the redis@^4.0.0 package.redis-4
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-redis-4
0.47.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for Remixby
Justin SmithRemix instrumentation for Node.js.Node.js
instrumentation
remix
remix-run Quick InstallTo install this instrumentation library run:npm install opentelemetry-instrumentation-remix
0.8.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for restifyby
🔭 OpenTelemetry Authors 🔭Instrumentation library for restify.Node.js
restify Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-restify
0.46.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryRouter Instrumentationby
🔭 OpenTelemetry Authors 🔭Router instrumentation for Node.js.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-router
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Node.js Runtime Metrics Instrumentationby
🔭 OpenTelemetry Authors 🔭This module provides automatic metric instrumentation that exposes measurements from the Performance measurement APIs (i.e. perf_hooks).runtime
node
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-runtime-node
0.13.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Sequelize Instrumentationby
Aspecto AuthorsSequelize instrumentation for Node.js.Node.js
instrumentation
sequelizeJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry socket.io Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for the socket.io modulesocket.io
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-socket.io
0.47.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Tedious Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for the tedious module.tedious
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-tedious
0.19.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry TypeORM Instrumentationby
Aspecto AuthorsTypeORM instrumentation for Node.js.Node.js
instrumentation
typeormJavaScriptLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Undici/fetch Instrumentation for Node.jsby
🔭 OpenTelemetry Authors 🔭This module provides automatic instrumentation for undici and Node.js global fetch API.undici
instrumentation
js Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-undici
0.11.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryUser Interaction Instrumentationby
🔭 OpenTelemetry Authors 🔭User Interaction instrumentation for browsers.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-user-interaction
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Instrumentation for winstonby
🔭 OpenTelemetry Authors 🔭Instrumentation library for Winston.Node.js
winston
logging Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-winston
0.45.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryXMLHttpRequest Instrumentationby
🔭 OpenTelemetry Authors 🔭XMLHttpRequest instrumentation for browsers.js
instrumentation Quick InstallTo install this instrumentation library run:npm install @opentelemetry/instrumentation-xml-http-request
0.200.0VersionJavaScriptLanguageInstrumentationComponentApache 2.0License Package Details (npm) RepositoryApache APISIX Instrumentation first party integrationby
Apache APISIX AuthorsThe plugin implements Tracing data collection based on OpenTelemetry native standard, and sends it to OpenTelemetry Collector through HTTP protocol.lua
instrumentationLuaLanguageInstrumentationComponentApache 2.0License RepositoryMojolicious Instrumentationby
jjatriaAn OpenTelemetry plugin for Perl’s Mojolicious.perl
instrumentationPerlLanguageInstrumentationComponentArtistic-1.0-PerlLicense RepositoryPlack Instrumentationby
abhAn OpenTelemetry middleware for Perl’s Plack.perl
instrumentationPerlLanguageInstrumentationComponentMITLicense RepositoryOpenTelemetry CakePHP instrumentation libraryby
🔭 OpenTelemetry Authors 🔭Please read </docs/instrumentation/php/automatic/> for instructions on how to install and configure the extension and SDK.cake
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-cakephp
0.0.4VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry CodeIgniter auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for the CodeIgniter Frameworkcodeigniter
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-codeigniter
0.0.9VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry curl auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Auto-instrumentation hooks are registered via composer, and client kind spans will automatically be created when calling curl_exec or curl_multi_exec functions. Additionally, distributed tracing is supported by setting the traceparent header.curl
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-curl
0.0.4VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry ext-amqp auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for ext-amqpextamqp
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-ext-amqp
0.0.5VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry ext-rdkafka auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Auto-instrumentation hooks are registered via composer. There will be a new span created for each message that is consumed. The goal of this instrumentation is to allow distributed traces to happen across Kafka in PHP. This means that the following should happenextrdkafka
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-ext-rdkafka
0.0.2VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry Guzzle auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for Guzzleguzzle
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-guzzle
1.1.0VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry HTTPlug async auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for PHP HTTP Async Clienthttpasyncclient
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-http-async
1.1.0VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry IO auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for PHP IOio
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-io
0.0.13VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry Laravel auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for Laravellaravel
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-laravel
1.1.1VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry MongoDB auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Auto-instrumentation hooks are registered via composer, and spans will automatically be created for all MongoDB operations.mongodb
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-mongodb
0.0.8VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry openai-php/client auto-instrumentationby
🔭 OpenTelemetry Authors 🔭This package provides auto-instrumentation for openai-php/client to help you understand the interactions with OpenAI compatible services.openai
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-openai-php
0.0.3VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry PDO (PHP DataObjects) auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for PDOpdo
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-pdo
0.0.19VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry PSR-14 auto-instrumentationby
🔭 OpenTelemetry Authors 🔭This is a read-only subtree split of https://github.com/open-telemetry/opentelemetry-php-contrib.psr14
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-psr14
0.0.4VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryPSR-15 Middleware Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for PSR-15 middlewarephp
psr-15
instrumentation Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-psr15
1.1.0VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry PSR-16 auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Auto-instrumentation hooks are registered via composer, and spans will automatically be created for each PSR-16 cache operation.psr16
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-psr16
0.0.4VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryPSR-18 HTTP Clients Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for PSR-18 HTTP clientsphp
psr-18
http
instrumentation Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-psr18
1.1.0VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry PSR-3 auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Auto-instrumentation hooks are registered via composer, and automatically inject trace ID and span ID into log message context of any PSR-3 logger.psr-3
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-psr3
0.0.9VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry PSR-6 instrumentation libraryby
🔭 OpenTelemetry Authors 🔭Please read </docs/instrumentation/php/automatic/> for instructions on how to install and configure the extension and SDK.psr6
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-psr6
0.0.4VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositorySlim Frameworkby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for the Slim Frameworkphp
slim
instrumentation Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-slim
1.1.0VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry Symfony auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for the Symfony Frameworksymfony
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-symfony
1.0.0VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry WordPress auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for WordPresswordpress
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-wordpress
0.0.17VersionPHPLanguageInstrumentationComponentApache 2.0License Package Details (packagist) RepositoryOpenTelemetry Yii auto-instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation Library for Yiiyii
instrumentation
php Quick InstallTo install this instrumentation library run:composer require open-telemetry/opentelemetry-auto-yii
0.0.6VersionPHPLanguageInstrumentationComponent Package Details (packagist) RepositoryOpenTelemetry Aio-pika Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the Aio-pika library.aio-pika
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry aiohttp client Integrationby
🔭 OpenTelemetry Authors 🔭This library allows tracing HTTP requests made by the aiohttp client library.aiohttp-client
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry aiohttp server Integrationby
🔭 OpenTelemetry Authors 🔭This library allows tracing HTTP requests made by the aiohttp server library.aio
http
server
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry aiokafka instrumentationby
🔭 OpenTelemetry Authors 🔭Instrument aiokafka to report instrumentation-kafka produced and consumed messagesaiokafka
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryAIOPG Middleware Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides AIOPG middleware to track requests timing through OpenTelemetry.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryAnthropic Instrumentationby
TraceloopInstrumentation for Anthropic LLMs (prompts logging, tokens, etc.)python
instrumentation
anthropicPythonLanguageInstrumentationComponentApache 2.0License RepositoryASGI Middleware Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a WSGI middleware that can be used on any ASGI framework (such as Django / Flask) to track requests timing through OpenTelemetry.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry asyncio Instrumentationby
🔭 OpenTelemetry Authors 🔭Tracing Requests Made by the asyncio Libraryasyncio
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License Repositoryasyncpg Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing PostgreSQL queries made by the asyncpg library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryAWS Lambda Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing invocations of functions on AWS Lambda.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryAzure SDK Instrumentation first party integrationby
Microsoft AuthorsInstrumentation for Azure SDK for Python (Track 2 libraries).python
instrumentation
azure-sdk
azurePythonLanguageInstrumentationComponentMITLicense RepositoryBedrock Python Instrumentationby
Arize AIInstrumentation for tracing Amazon Bedrock frameworkpython
instrumentation
bedrockPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryBoto Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the Boto library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Boto3 SQS Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the Boto3 library to the SQS service.boto3sqs
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryBotocore Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the Botocore library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Cassandra Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Cassandra (Cassandra-driver and scylla-driver libraries).cassandra
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryCelery Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Celery.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryChromaDB Instrumentationby
TraceloopInstrumentation for Chroma Vector DBpython
instrumentation
chromadbPythonLanguageInstrumentationComponentApache 2.0License RepositoryCohere Instrumentationby
TraceloopInstrumentation for Cohere LLMs (prompts logging, tokens, etc.)python
instrumentation
coherePythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry confluent-kafka Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the confluent-kafka library.confluent-kafka
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryDatabase API integrationby
🔭 OpenTelemetry Authors 🔭The trace integration with Database API for OpenTelemetry.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryDjango Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests for Django applications.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryDSPy Python Instrumentationby
Arize AIInstrumentation for tracing the DSPy frameworkpython
instrumentation
dspyPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryElasticsearch Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing elasticsearch made by the elasticsearch library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryElasticsearch Python Client nativeby
Elasticsearch B.V.You can use OpenTelemetry to monitor the performance and behavior of your Elasticsearch requests through the Python Client.python
elasticsearch
clientPythonLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryOpenTelemetry Falcon Tracingby
🔭 OpenTelemetry Authors 🔭This library builds on the OpenTelemetry WSGI middleware to track web requests in Falcon applications.falcon
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryFastAPI Middleware Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides FastAPI middleware to track requests timing through OpenTelemetry.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryFlask Instrumentationby
🔭 OpenTelemetry Authors 🔭This library builds on the OpenTelemetry WSGI middleware to track web requests in Flask applications.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositorygRPC Instrumentationby
🔭 OpenTelemetry Authors 🔭Client and server interceptors for gRPC Python.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Metrics for gRPC first party integration
 incubatingby
gRPC AuthorsgRPC provides support for an OpenTelemetry plugin that provides metricsincubating
grpc
pythonPythonLanguageInstrumentationComponentApache-2.0License Website Documentation RepositoryHaystack Instrumentationby
TraceloopInstrumentation for Haystack LLM frameworkpython
instrumentation
haystackPythonLanguageInstrumentationComponentApache 2.0License RepositoryHaystack Python Instrumentationby
Arize AIInstrumentation for tracing the Haystack frameworkpython
instrumentation
haystackPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryOpenTelemetry HTTPX Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing HTTP requests made by the HTTPX library.httpx
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryJinja2 Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Jinja2.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry kafka-python integrationby
🔭 OpenTelemetry Authors 🔭Instrumentation library for kafka-pythonkafka-python
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryLangChain Instrumentationby
TraceloopInstrumentation for LangChain Frameworkpython
instrumentation
langchainPythonLanguageInstrumentationComponentApache 2.0License RepositoryLangChain Python Instrumentationby
Arize AIInstrumentation for tracing the LangChain frameworkpython
instrumentation
langchainPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryLlamaIndex Instrumentationby
TraceloopInstrumentation for LlamaIndex Frameworkpython
instrumentation
llamaindexPythonLanguageInstrumentationComponentApache 2.0License RepositoryLlamaIndex Python Instrumentationby
Arize AIInstrumentation for tracing the LlamaIndex frameworkpython
instrumentation
llamaindexPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryOpenTelemetry logging integrationby
🔭 OpenTelemetry Authors 🔭Installationlogging
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryMilvus Instrumentationby
TraceloopInstrumentation for Milvus Vector DBpython
instrumentation
milvusPythonLanguageInstrumentationComponentApache 2.0License RepositoryMistralAI Instrumentationby
TraceloopInstrumentation for Mistral AI LLMs (prompts logging, tokens, etc.)python
instrumentation
mistralPythonLanguageInstrumentationComponentApache 2.0License RepositoryMistral AI Python Instrumentationby
Arize AIInstrumentation for tracing the Mistral AI Python SDKpython
instrumentation
mistralaiPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryMySQL Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation with MySQL that supports the mysql-connector library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry mysqlclient Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation library for mysqlclient package.mysql
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryOllama Instrumentationby
TraceloopInstrumentation for Ollama LLMs (prompts logging, tokens, etc.)python
instrumentation
ollamaPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenAI Instrumentationby
TraceloopInstrumentation for OpenAI LLMs (prompts logging, tokens, etc.)python
instrumentation
openaiPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpen AI Python Instrumentationby
Arize AIInstrumentation for tracing the OpenAI Python SDKpython
instrumentation
openaiPythonLanguageInstrumentationComponentApache 2.0License Documentation RepositoryOpenTracing Shim Instrumentationby
🔭 OpenTelemetry Authors 🔭OpenTracing Shim for OpenTelemetrypython
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry pika Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the pika library.pika
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryPinecone Instrumentationby
TraceloopInstrumentation for Pinecone Vector DBpython
instrumentation
pineconePythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Psycopg Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for the Psycopg librarypsycopg
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryPsycopg Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides tracing for PostgreSQL via psycopg2.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryPymemcache Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Pymemcache.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License Repositorypymongo Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for the pymongo library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryPyMySQL Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides tracing for PyMySQL.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryPyramid Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Pyramid.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryQdrant Instrumentationby
TraceloopInstrumentation for Qdrant Vector DBpython
instrumentation
qdrantPythonLanguageInstrumentationComponentApache 2.0License RepositoryRedis Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the Redis library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Remoulade Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the Remoulade library.remoulade
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryReplicate Instrumentationby
TraceloopInstrumentation for Replicate LLMs (prompts logging, tokens, etc.)python
instrumentation
replicatePythonLanguageInstrumentationComponentApache 2.0License RepositoryRequests Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing HTTP requests made by the requests library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositorySQLAlchemy Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing requests made by the SQLAlchemy library.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositorySqlite3 Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for Sqlite3.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryStarlette Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides automatic and manual instrumentation of Starlette web frameworks, instrumenting HTTP requests served by applications utilizing the framework.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositorySystem Metrics Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation to collect system performance metrics.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry threading Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides instrumentation for the threading module to ensure thatthreading
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryTornado Middleware Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides Tornado middleware to track requests timing through OpenTelemetry.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry Tortoise ORM Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing queries made by tortoise ORM backends, MySQL, PostgreSQL and SQLite.tortoiseorm
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryTransformers Instrumentationby
TraceloopInstrumentation for Transformers SDK (HuggingFace)python
instrumentation
transformers
huggingfacePythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry urllib Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing HTTP requests made by theurllib
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry urllib3 Instrumentationby
🔭 OpenTelemetry Authors 🔭This library allows tracing HTTP requests made by the urllib3 library.urllib3
instrumentation
pythonPythonLanguageInstrumentationComponentApache 2.0License RepositoryVertexAI Instrumentationby
TraceloopInstrumentation for VertexAI LLMs (prompts logging, tokens, etc.)python
instrumentation
vertexai
googlePythonLanguageInstrumentationComponentApache 2.0License RepositoryIBM Watsonx Instrumentationby
TraceloopInstrumentation for IBM Watsonx LLMs (prompts logging, tokens, etc.)python
instrumentation
IBM
Watsonx
InstanaPythonLanguageInstrumentationComponentApache 2.0License RepositoryWeaviate Instrumentationby
TraceloopInstrumentation for Weaviate Vector DBpython
instrumentation
weaviatePythonLanguageInstrumentationComponentApache 2.0License RepositoryWSGI Middleware Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a WSGI middleware that can be used on any WSGI framework (such as Django / Flask) to track requests timing through OpenTelemetry.python
instrumentationPythonLanguageInstrumentationComponentApache 2.0License RepositoryActionPack Instrumentationby
🔭 OpenTelemetry Authors 🔭ActionPack instrumentation for Ruby.ruby
instrumentation
action_pack Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-action_pack
0.12.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryActionView Instrumentationby
🔭 OpenTelemetry Authors 🔭ActionView instrumentation for Ruby.ruby
instrumentation
action_view Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-action_view
0.9.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry ActionMailer Instrumentationby
🔭 OpenTelemetry Authors 🔭The ActionMailer instrumentation is a community-maintained instrumentation for the ActionMailer portion of the [Ruby on Rails][rails-home] web-application framework.action
mailer
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-action_mailer
0.4.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryActiveJob Instrumentationby
🔭 OpenTelemetry Authors 🔭ActiveJob instrumentation for Ruby.ruby
instrumentation
active_job Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-active_job
0.8.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryActive Model Serializers Instrumentationby
🔭 OpenTelemetry Authors 🔭Active Model Serializers instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-active_model_serializers
0.22.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryActiveRecord Instrumentationby
🔭 OpenTelemetry Authors 🔭ActiveRecord instrumentation for Ruby.ruby
instrumentation
active_record Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-active_record
0.9.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryActiveSupport Instrumentationby
🔭 OpenTelemetry Authors 🔭ActiveSupport instrumentation for Ruby.ruby
instrumentation
active_support Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-active_support
0.8.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryAll-in-one Instrumentationby
🔭 OpenTelemetry Authors 🔭All-in-one instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-all
0.75.1VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry aws-sdk Instrumentationby
🔭 OpenTelemetry Authors 🔭aws-sdk instrumentation for Ruby.ruby
instrumentation
aws-sdk
aws
sqs
sns Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-aws_sdk
0.8.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry AWS-Lambda Instrumentationby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry aws-lambda gem is a community-maintained instrumentation for AWS Lambda functions.aws
lambda
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-aws_lambda
0.3.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry Instrumentation Baseby
🔭 OpenTelemetry Authors 🔭The opentelemetry-instrumentation-base gem contains the instrumentation base class, and the instrumentation registry.base
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-base
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryBunny Instrumentationby
🔭 OpenTelemetry Authors 🔭Bunny instrumentation for Ruby.ruby
instrumentation
bunny Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-bunny
0.22.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryConcurrentRuby Instrumentationby
🔭 OpenTelemetry Authors 🔭ConcurrentRuby instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-concurrent_ruby
0.22.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryDalli Instrumentationby
🔭 OpenTelemetry Authors 🔭Dalli instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-dalli
0.27.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryDelayed Job Instrumentationby
🔭 OpenTelemetry Authors 🔭Delayed Job instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-delayed_job
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryElasticsearch Ruby Client nativeby
Elasticsearch B.V.You can use OpenTelemetry to monitor the performance and behavior of your Elasticsearch requests through the Ruby Client.ruby
elasticsearch ruby client Quick InstallTo install this instrumentation library run:gem install elasticsearch
9.0.0VersionRubyLanguageInstrumentationComponentApache-2.0License Website Documentation Package Details (gems) RepositoryEthon Instrumentationby
🔭 OpenTelemetry Authors 🔭Ethon instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-ethon
0.22.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryExcon Instrumentationby
🔭 OpenTelemetry Authors 🔭Excon instrumentation for Ruby.excon
ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-excon
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryFaraday Instrumentationby
🔭 OpenTelemetry Authors 🔭Faraday instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-faraday
0.26.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry Grape Instrumentationby
🔭 OpenTelemetry Authors 🔭The Grape instrumentation is a community-maintained instrumentation for Grape, a REST-like API framework for Ruby.grape
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-grape
0.3.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryGraphQL Instrumentationby
🔭 OpenTelemetry Authors 🔭GraphQL instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-graphql
0.29.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry gruf Instrumentationby
🔭 OpenTelemetry Authors 🔭Instrumentation for gruf (gRPC Ruby Framework).gruf
grpc
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-gruf
0.3.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryHTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭HTTP instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-http
0.24.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryHttpClient Instrumentationby
🔭 OpenTelemetry Authors 🔭HttpClient instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-http_client
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry HTTPX Instrumentationby
🔭 OpenTelemetry Authors 🔭The HTTPX instrumentation is a community-maintained instrumentation for the HTTPX gem.httpx
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-httpx
0.2.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryKoala Instrumentationby
🔭 OpenTelemetry Authors 🔭Koala instrumentation for Ruby.ruby
instrumentation
koala Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-koala
0.21.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryLMDB Instrumentationby
🔭 OpenTelemetry Authors 🔭LMDB instrumentation for Ruby.ruby
instrumentation
lmdb Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-lmdb
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryMongo Instrumentationby
🔭 OpenTelemetry Authors 🔭Mongo instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-mongo
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryMysql2 Instrumentationby
🔭 OpenTelemetry Authors 🔭Mysql2 instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-mysql2
0.29.1VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryNet::HTTP Instrumentationby
🔭 OpenTelemetry Authors 🔭Net::HTTP instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-net_http
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryPG Instrumentationby
🔭 OpenTelemetry Authors 🔭PG instrumentation for Ruby.ruby
instrumentation
pg
postgresql Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-pg
0.30.1VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryQue Instrumentationby
🔭 OpenTelemetry Authors 🔭Que instrumentation for Ruby.ruby
instrumentation
que Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-que
0.9.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry Racecar Instrumentationby
🔭 OpenTelemetry Authors 🔭The Racecar instrumentation is a community-maintained instrumentation for Racecar, a client library for Apache Kafka.racecar
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-racecar
0.4.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryRack Instrumentationby
🔭 OpenTelemetry Authors 🔭Rack instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-rack
0.26.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryRails Instrumentationby
🔭 OpenTelemetry Authors 🔭Rails instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-rails
0.36.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry Rake Instrumentationby
🔭 OpenTelemetry Authors 🔭The Rake instrumentation is a community-maintained instrumentation for the Rake task invocation.rake
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-rake
0.3.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryOpenTelemetry rdkafka Instrumentationby
🔭 OpenTelemetry Authors 🔭The rdkafka instrumentation is a community-maintained instrumentation for rdkafka, a client library for Apache Kafka.rdkafka
instrumentation
ruby Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-rdkafka
0.6.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryRedis Instrumentationby
🔭 OpenTelemetry Authors 🔭Redis instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-redis
0.26.1VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryResque Instrumentationby
🔭 OpenTelemetry Authors 🔭Resque instrumentation for Ruby.ruby
instrumentation
resque Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-resque
0.6.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryREST Client Instrumentationby
🔭 OpenTelemetry Authors 🔭REST Client instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-restclient
0.23.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryRSpec Instrumentationby
🔭 OpenTelemetry Authors 🔭RSpec instrumentation for Ruby.ruby
instrumentation
rspec Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-rspec
0.4.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryRubyKafka Instrumentationby
🔭 OpenTelemetry Authors 🔭RubyKafka instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-ruby_kafka
0.22.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositorySidekiq Instrumentationby
🔭 OpenTelemetry Authors 🔭Sidekiq instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-sidekiq
0.26.1VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositorySinatra Instrumentationby
🔭 OpenTelemetry Authors 🔭Sinatra instrumentation for Ruby.ruby
instrumentation Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-sinatra
0.25.0VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryTrilogy Instrumentationby
🔭 OpenTelemetry Authors 🔭Trilogy instrumentation for Ruby.ruby
instrumentation
trilogy Quick InstallTo install this instrumentation library run:gem install opentelemetry-instrumentation-trilogy
0.61.1VersionRubyLanguageInstrumentationComponentApache 2.0License Package Details (gems) RepositoryActix Web Instrumentationby
Julian TescherOpenTelemetry integration for Actix Web.rust
instrumentation Quick InstallTo install this instrumentation library run:cargo add actix-web-opentelemetry
0.16.0VersionRustLanguageInstrumentationComponentMITLicense Package Details (crates) Repositoryaxum Instrumentationby
David BernardMiddlewares to integrate axum + tracing + opentelemetry.rust
axum
instrumentation Quick InstallTo install this instrumentation library run:cargo add axum-tracing-opentelemetry
0.16.0VersionRustLanguageInstrumentationComponentCC0 1.0License Package Details (crates) RepositoryTide Instrumentationby
Christoph GraboOpenTelemetry integration for the Tide web framework.rust
instrumentation Quick InstallTo install this instrumentation library run:cargo add opentelemetry-tide
0.12.0VersionRustLanguageInstrumentationComponentApache 2.0 OR MITLicense Package Details (crates) RepositoryTracing Instrumentationby
Julian TescherUtilities for adding OpenTelemetry interoperability to tracing.rust
instrumentation Quick InstallTo install this instrumentation library run:cargo add tracing-opentelemetry
0.22.0VersionRustLanguageInstrumentationComponentMITLicense Package Details (crates) RepositoryTrillium Instrumentation first party integrationby
Jacob RothsteinOpenTelemetry integration for the Trillium web framework.rust
instrumentation Quick InstallTo install this instrumentation library run:cargo add trillium-opentelemetry
0.2.16VersionRustLanguageInstrumentationComponentApache 2.0 OR MITLicense Package Details (crates) RepositoryURLSession Instrumentationby
🔭 OpenTelemetry Authors 🔭This library provides a URLSession instrumentation to track requests through OpenTelemetry.swift
instrumentation
ios
macOS
tvOSSwiftLanguageInstrumentationComponentApache 2.0License Repositorylogrus log bridgeby
🔭 OpenTelemetry Authors 🔭Package otellogrus provides an OpenTelemetry log bridge for github.com/sirupsen/logrus.logrus
log-bridge
goGoLanguageLog bridgeComponentApache 2.0License Repositoryslog log bridgeby
🔭 OpenTelemetry Authors 🔭Package otelslog provides an OpenTelemetry log bridge for log/slog.slog
log-bridge
goGoLanguageLog bridgeComponentApache 2.0License Repositoryzap log bridgeby
🔭 OpenTelemetry Authors 🔭Package otelzap provides an OpenTelemetry log bridge for go.uber.org/zap.zap
log-bridge
goGoLanguageLog bridgeComponentApache 2.0License RepositoryMonolog Appenderby
🔭 OpenTelemetry Authors 🔭MonoLog Log Appender for PHP.php
logsPHPLanguageCoreComponentApache 2.0License Repositoryclj-otel - Idiomatic Clojure API for OpenTelemetryby
Steffan WestcottAn idiomatic Clojure API for adding telemetry to your libraries and applications using OpenTelemetry.clojure
instrumentationJavaLanguageExtensionComponentApache 2.0License RepositoryCollectorby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Collector (Agent/Service)collector
agentCollectorLanguageCoreComponentApache 2.0License RepositoryC++by
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for C++.cppC++LanguageCoreComponentApache 2.0License Repositoryopentelemetry-api.crby
wyhainesAn unofficial implementation of OpenTelemetry in Crystal.crystal
instrumentationCrystalLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry for Dartby
WorkivaAn unofficial implementation of OpenTelemetry in Dart.dart
instrumentationDartLanguageInstrumentationComponentApache 2.0License Repository.NETby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for .NET (C#, F#)c#
.net.NETLanguageCoreComponentApache 2.0License RepositoryErlang/Elixirby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API for Erlang and Elixir.erlang
elixirErlangLanguageCoreComponentApache 2.0License RepositoryErlang/Elixirby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry SDK for Erlang and Elixir.erlang
elixirErlangLanguageCoreComponentApache 2.0License RepositoryGoby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for Go.goGoLanguageCoreComponentApache 2.0License RepositoryGo Automatic Instrumentationby
🔭 OpenTelemetry Authors 🔭OpenTelemetry automatic instrumentation for Go applications.go
instrumentationGoLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry for Haskellby
ethercrowAn unofficial implementation of OpenTelemetry in Haskell.haskell
instrumentationHaskellLanguageInstrumentationComponentApache 2.0License RepositoryJavaby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for Java.javaJavaLanguageCoreComponentApache 2.0License RepositoryJava Instrumentationby
🔭 OpenTelemetry Authors 🔭Both auto-instrumentation and (manual) instrumentation libraries for Java.java
instrumentationJavaLanguageInstrumentationComponentApache 2.0License RepositoryJavaScriptby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for JavaScript (Browser and Node)javascript
node.js
browserJavaScriptLanguageCoreComponentApache 2.0License RepositoryOpenTelemetry.jlby
oolong.devAn unofficial implementation of OpenTelemetry in Julia.julia
instrumentationJuliaLanguageInstrumentationComponentApache 2.0License RepositoryKotlinby
SNKThe OpenTelemetry API and SDK for Kotlin.Kotlin
Js
Jvm
NativeKotlinLanguageCoreComponentApache 2.0License RepositoryKubernetes Operatorby
🔭 OpenTelemetry Authors 🔭A Kubernetes Operator for the OpenTelemetry Collector.kubernetesCollectorLanguageCoreComponentApache 2.0License Repositoryopentelemetry-luaby
yangxikunAn unofficial implementation of OpenTelemetry in lua.lua
instrumentationLuaLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry-Matlab first party integrationby
MathWorksAn unofficial implementation of OpenTelemetry in MATLAB.matlab
simulinkMatlabLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry exporters and instrumentation for OCamlby
ImandraOCaml instrumentation primitives (scopes, metrics, logs, etc.), along with several exporters to talk to signal collectorsOCaml
instrumentationOcamlLanguageInstrumentationComponentMITLicense RepositoryOddDotNet: Test Harness for OpenTelemetryby
Tyler KennaOddDotNet is a Test Harness for OpenTelemetry that works for any language, built in .NET. It is a container image that accepts OpenTelemetry signals over gRPC, and it includes a query language for verifying and validating those signals.
OddDotNet enables automated Observability Driven Development, hence where it gets its name.proto
protobuf
testing
odd
observability
collector
test-harness
odddotnetCollectorLanguageUtilitiesComponentApache 2.0License Documentation RepositoryOpenTelemetry for Perlby
jjatriaAn unofficial implementation of OpenTelemetry in Perl.perl
instrumentationPerlLanguageInstrumentationComponentArtistic-1.0-PerlLicense RepositoryOpenTelemetry SDK for Perlby
jjatriaAn unofficial implementation of the OpenTelemetry SDK in Perl.perl
instrumentationPerlLanguageInstrumentationComponentArtistic-1.0-PerlLicense RepositoryPHPby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry Core repository for PHP.phpPHPLanguageCoreComponentApache 2.0License Documentation RepositoryPHP APIby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API for PHP.phpPHPLanguageCoreComponentApache 2.0License RepositoryPHP Automatic Instrumentationby
🔭 OpenTelemetry Authors 🔭Extension for OpenTelemetry, to enable auto-instrumentation. It is based on zend_observer and requires PHP8+php
instrumentationPHPLanguageInstrumentationComponentApache 2.0License RepositoryPHP Contextby
🔭 OpenTelemetry Authors 🔭OpenTelemetry Context for PHP.phpPHPLanguageCoreComponentApache 2.0License RepositoryPHP SDKby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry SDK for PHP.phpPHPLanguageCoreComponentApache 2.0License RepositoryPHP SemConvby
🔭 OpenTelemetry Authors 🔭OpenTelemetry Semantic Conventions for PHP.phpPHPLanguageCoreComponentApache 2.0License RepositoryPythonby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for Python.pythonPythonLanguageCoreComponentApache 2.0License RepositoryRubyby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for Ruby.rubyRubyLanguageCoreComponentApache 2.0License RepositoryRustby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API for Rust.rust Quick InstallTo install this core run:cargo add opentelemetry
0.28.0VersionRustLanguageCoreComponentApache 2.0License Package Details (crates) RepositoryRust SDKby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry SDK for Rust.rust Quick InstallTo install this core run:cargo add opentelemetry_sdk
0.28.0VersionRustLanguageCoreComponentApache 2.0License Package Details (crates) Repositoryotel4sby
Ross A. Baker,
Zach McCoy,
Maksym OchenashkoAn OpenTelemetry implementation for Scala, based on Cats-Effectscala
typelevel
cats-effectScalaLanguageInstrumentationComponentApache 2.0License RepositoryOpenTelemetry for shell scripts and GitHub actionsby
Philipp LengauerAn unofficial implementation of OpenTelemetry (traces, metrics and logs) for shell scripts (sh, dash, bash, …) and for GitHub Actions.shell
bash
instrumentation
githubShellLanguageCoreComponentApache 2.0License RepositorySwiftby
🔭 OpenTelemetry Authors 🔭The OpenTelemetry API and SDK for Swift.swift
ios
macOS
tvOSSwiftLanguageCoreComponentApache 2.0License RepositoryAWS Resource Detectorsby
🔭 OpenTelemetry Authors 🔭AWS resource detectors for go.aws
ec2
ecs
eks
lambda
resource-detector
goGoLanguageResource detectorComponentApache 2.0License RepositoryGCP Resource detectorby
🔭 OpenTelemetry Authors 🔭The GCP resource detector for go.gcp
resource-detector
goGoLanguageResource detectorComponentApache 2.0License RepositoryOpenTelemetry Resource Detector for AWSby
🔭 OpenTelemetry Authors 🔭AWS resource detectors for Java.aws
ec2
ecs
eks
lambda
resource-detector
javaJavaLanguageResource detectorComponentApache 2.0License RepositoryOpenTelemetry Contributed Resource Detectorsby
🔭 OpenTelemetry Authors 🔭Various ResourceProvider implementations contributed to OpenTelemetry.contrib
glassFish
jetty
tomcat
tomEE
resource-detector
javaJavaLanguageResource detectorComponentApache 2.0License RepositoryOpenTelemetry Resource Detector for GCPby
🔭 OpenTelemetry Authors 🔭The GCP resource detector for Java.gcp
resource-detector
javaJavaLanguageResource detectorComponentApache 2.0License RepositoryOpenTelemetry Resource Detector for Spring Bootby
🔭 OpenTelemetry Authors 🔭Spring Boot specific resource providers.spring-boot
resource-detector
javaJavaLanguageResource detectorComponentApache 2.0License RepositoryOpenTelemetry Resource Detector for Alibaba Cloudby
🔭 OpenTelemetry Authors 🔭Resource detector for Alibaba Cloudalibabacloud
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-alibaba-cloud
0.31.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for AWSby
🔭 OpenTelemetry Authors 🔭Resource detector for Amazon Web Services.aws
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-aws
2.0.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for Azureby
🔭 OpenTelemetry Authors 🔭Resource detector for Azureazure
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-azure
0.7.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for Containerby
🔭 OpenTelemetry Authors 🔭Resource detector for container ID. Compatible with OpenTelemetry JS API and SDK 1.0+.container
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-container
0.7.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for GCPby
🔭 OpenTelemetry Authors 🔭Resource detector for Google Cloud Platform.gcp
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-gcp
0.34.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for GitHub Actionsby
🔭 OpenTelemetry Authors 🔭Detects GITHUB_* environment variables specified and adds as attributes on a resource.github
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-github
0.31.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for Instanaby
🔭 OpenTelemetry Authors 🔭This resource detector will detect the Instana agent to register the OpenTelemetry as a Node.js processinstana
resource-detector
js Quick InstallTo install this resource-detector run:npm install @opentelemetry/resource-detector-instana
0.19.0VersionJavaScriptLanguageResource detectorComponentApache 2.0License Package Details (npm) RepositoryOpenTelemetry Resource Detector for Containerby
🔭 OpenTelemetry Authors 🔭Resource detector for container ID.container
resource-detector
phpPHPLanguageResource detectorComponentApache 2.0License RepositoryAWS SDK Extensionby
🔭 OpenTelemetry Authors 🔭This library provides components to configure OpenTelemetry Python to generate traces which are compatible with AWS X-Ray.python
sdk-extensionPythonLanguageUtilitiesComponentApache 2.0License RepositoryNautilusTelemetryby
Ladd Van Tol,NautilusTelemetry is an iOS-oriented Swift package to collect OpenTelemetry data and submit it in OTLP-JSON format to an OpenTelemetry Collector instance. gRPC is not currently supported in order to keep the package size as small as possible. Not all features of OpenTelemetry are supported, and this package should be considered experimental.swift
instrumentation
ios
macOS
tvOS
watchOSSwiftLanguageInstrumentationComponentMITLicense Repositoryflow - tracing flow metricsby
MrAliasAn OpenTelemetry-Go SpanProcessor reporting tracing flow as Prometheus metrics.go
processor
prometheusGoLanguageProcessorComponentApache 2.0License RepositoryAnsible role for OpenTelemetry Collectorby
Ishan Jain
,
Grafana LabsAnsible role by Grafana to deploy and manage OpenTelemetry Collector across multiple machinescollector
ansible
ansible-roleYamlLanguageUtilitiesComponentGPL-3.0License Documentation RepositoryOpenTelemetry Browser Extension Autoinjection deprecatedby
🔭 OpenTelemetry Authors 🔭DeprecatedThis browser extension is permanently deprecated. Other browser extensions are available that provide similar functionality.This browser extension allows you to inject OpenTelemetry instrumentation in any web page. It uses the Web SDK and can export data to Zipkin or an OpenTelemetry Collector.js
browser
web-ext
browserextension
browser-extension
chrome-extension
firefox-extension
autoinjectionJavaScriptLanguageUtilitiesComponentApache 2.0License RepositoryBrowser Extension for OpenTelemetryby
Theodore BrockmanA highly-configurable browser extension that automatically instruments webpages to emit OpenTelemetry data (while avoiding content-security policy issues!).
Very similar to the archived “OpenTelemetry Browser Extension Autoinjection”, but with a few more features and a slightly different approach to content-script injection.js
browser
web-ext
browserextension
browser-extension
chrome-extension
firefox-extension
safari-extension
edge-extension
autoinstrumentationJavaScriptLanguageUtilitiesComponentGPL-3.0License Documentation RepositoryAlpine Linux Packages for OpenTelemetry C++by
Severin NeumannAlpine Linux packages in support of opentelemetry-cpp.cpp
alpine linux
apk
packageC++LanguageCoreComponentApache 2.0License RepositoryConan Package for OpenTelemetry C++by
The conan authorsConan package for opentelemetry-cpp.cpp
conan
packageC++LanguageCoreComponentMITLicense Repositoryvcpkg package for OpenTelemetry C++by
The vcpkg AuthorsA vcpkg package for opentelemetry-cpp.cpp
vcpkg
packageC++LanguageCoreComponentMITLicense RepositoryStandalone .NET Aspire dashboardby
MicrosoftThe .NET Aspire Dashboard is a browser-based app to view run-time information about your distributed application.dashboard
aspire
viewer
browser-based.NETLanguageUtilitiesComponentMITLicense Documentation RepositoryPurview Telemetry Source Generatorby
Kieron LanningGenerates ActivitySource, ILogger, and Metrics based telemetry from methods you define on an interface.This approach allows for:- Faster iteration cycles - simply create the method on your interface and the implementation will be automatically generated- Easy mocking/ substitution for testing - a full sample project, including tests can be found here- Built-in dependency injection helper generationc#
.net
dotnet
aspnet
logs
log
logger
logging
source-generator
high-performance-logging
otel
open-telemetry
telemetry
traces
tracing
metric
metrics
meter
meters
instrumentation
instruments
events
distributed-traces
distributed-tracing
melt
purview Quick InstallTo install this utilities run:dotnet add package Purview.Telemetry.SourceGenerator
3.0.0Version.NETLanguageUtilitiesComponentMITLicense Website Documentation Package Details (nuget) Repository.NET Integration for Sentry (C#, F#)by
Sentry authorsThe Sentry .NET integration for OpenTelemetry provides a processor and propagator to send data to Sentry and associate traces spans with Sentry errors. It also includes experimental support to forward OpenTelemetry metrics to Sentry.c#
f#
.net
processor
propagator
utilities
sentry
error monitoring.NETLanguageUtilitiesComponentMITLicense Repositorytailsby
Jacob AronoffTails is a small webserver written in Elixir that listens on a socket and streams live messages from a collector.otel
webserver
tailingElixirLanguageUtilitiesComponentApache 2.0License Repositorydocker-otel-lgtmby
Gregor Zeitlinger
,
Fabian Stäberdocker-otel-lgtm is an OpenTelemetry backend in a Docker image.collector
testing
docker
backend
traces
logs
metrics
utilitiesGoLanguageUtilitiesComponentApache 2.0License Repositoryredactby
MrAliasCollection of utilities to redact sensitive information from OpenTelemetry tracing data.go
utilitiesGoLanguageUtilitiesComponentApache 2.0License RepositoryOpenTelemetry Acceptance Tests (OATs)by
Gregor Zeitlinger
,
Matthew Hensley
,
Nikola GrcevskiOATs is a testing suite for OpenTelemetry applications.
Tests are written in YAML and validate traces with TraceQL, logs with LogQL, and metrics with PromQL.collector
testing
traces
logs
metrics
utilitiesGoLanguageUtilitiesComponentApache 2.0License Repositoryotel-desktop-viewerby
CtrlSpiceotel-desktop-viewer is a CLI tool for receiving OpenTelemetry traces while working on your local machine that helps you visualize and explore your trace data without needing to send it on to a telemetry vendor.otel
desktop
viewerGoLanguageUtilitiesComponentApache 2.0License Repositoryotel-tuiby
ymtdzzzA terminal OpenTelemetry viewer. This tool currently supports OpenTelemetry, Zipkin (Traces) and Prometheus (Metrics) formats.otel
terminal
viewer
tuiGoLanguageUtilitiesComponentApache 2.0License RepositoryOpenTelemetry context propagation for Datadogby
Tony LiThis library provides support for propagating trace context in the Datadog X-Datadog-* format.go
datadog
utilities
propagatorGoLanguageUtilitiesComponentApache 2.0License RepositoryApache Druid extension for OTLPby
mishmash ioThis extension allows Apache Druid to ingest OpenTelemetry signals.
An example setup would be to use the Kafka Exporter to publish OTLP data into Kafka topics, and then setup Druid ingestion jobs, using this extension, to populate tables.java
druid
utilities
analytics
dashboards
monitoringJavaLanguageUtilitiesComponentApache 2.0License Documentation RepositoryJava Integration for Sentryby
Sentry authorsThe Sentry OpenTelemetry Java integration provides a processor and propagator to send data to Sentry and to associate traces/spans to Sentry errors. For configuration details, see OpenTelemetry Support.java
processor
propagator
utilities
sentry
error monitoringJavaLanguageUtilitiesComponentMITLicense RepositoryOddDotNet Client for .NETby
Tyler KennaOddDotNet is an Test Harness for OpenTelemetry that works for any language, built in .NET. It is a container image that accepts OpenTelemetry signals over gRPC, and it includes a query language for verifying and validating those signals.
While it’s possible to generate your own client using the proto files, it is often more convenient to use a pre-compiled package installed from NuGet. This client library for .NET also includes the opentelemetry-proto clients to allow for manually generating and sending signals, and lastly it includes a query builder to ease the process of building queries using the OddQueryLanguage (OQL).
The proto files that this project depends on can be found at https://github.com/OddDotNet/OddDotProto.odddotnet
dotnet
c#
testing
odd
observability
test-harness Quick InstallTo install this utilities run:dotnet add package OddDotNet.Client
0.4.1Version.NETLanguageUtilitiesComponentApache 2.0License Documentation Package Details (nuget) RepositoryOTelBinby
Dash0SaaS editor for OpenTelemetry Collector configurations with visualization, validation and sharing supportcollector
configuration-validation
dash0
validation
visualizationCollectorLanguageUtilitiesComponentApache 2.0License RepositoryOpenTelemetry B3 context propagationby
🔭 OpenTelemetry Authors 🔭This library provides support for propagating trace context in the B3 format.php
b3
extension
propagatorPHPLanguageExtensionComponentApache 2.0License RepositoryGoogle Cloud Toolsby
GoogleThis library provides support for propagating trace context in the Google Cloud X-Cloud-Trace-Context format.python
google
utilities
propagator
resource detectorPythonLanguageUtilitiesComponentApache 2.0License RepositoryGoogle Cloud Toolsby
GoogleThis library provides support for detecting GCP resources like GCE, GKE, etc.python
google
utilities
propagator
resource detectorPythonLanguageUtilitiesComponentApache 2.0License RepositoryPython Integration for Sentryby
Sentry authorsThe Sentry OpenTelemetry Python integration provides a processor and propagator to send data to Sentry and to associate traces/spans to Sentry errors. For configuration details, see OpenTelemetry Support.python
processor
propagator
utilities
sentry
error monitoringPythonLanguageUtilitiesComponentMITLicense RepositoryRSpec matchersby
Damien MathieuThe RSpec matchers tool provides a set of matchers to make it easier to write unit tests checking the presence of telemetry data.ruby
rspec Quick InstallTo install this utilities run:gem install rspec-otel
0.0.6VersionRubyLanguageUtilitiesComponentMITLicense Package Details (gems) RepositoryRuby Integration for Sentryby
Sentry authorsThe Sentry OpenTelemetry Ruby integration provides a processor and propagator to send data to Sentry and to associate traces/spans to Sentry errors. For configuration details, see OpenTelemetry Support.ruby
processor
propagator
utilities
sentry
error monitoring Quick InstallTo install this utilities run:gem install sentry-opentelemetry
5.23.0VersionRubyLanguageUtilitiesComponentMITLicense Package Details (gems) RepositoryAWS Utilitiesby
🔭 OpenTelemetry Authors 🔭Utilities related to AWS including XRay Propagator and IDGenerator.rust
utilities
propagator
aws
xray Quick InstallTo install this utilities run:cargo add opentelemetry-aws
0.10.0VersionRustLanguageUtilitiesComponentApache 2.0License Package Details (crates) RepositoryOpenTelemetry Jaeger context propagationby
🔭 OpenTelemetry Authors 🔭This library provides support for propagating trace context in the Jaeger format.rust
jaeger
utilities
propagator Quick InstallTo install this utilities run:cargo add opentelemetry-jaeger-propagator
0.1.0VersionRustLanguageUtilitiesComponentApache 2.0License Package Details (crates) Repositoryotelify.shby
Cisco OpenA shell script that allows you to instrument almost any application without the need to touch the application’s code. It utilizes different zero-code instrumentation solutions provided by the OpenTelemetry project.otelify
shell
instrumentation
zero-codeShellLanguageUtilitiesComponentApache 2.0License RepositoryTraceloop Jest Test Engineby
Traceloop devGenerate e2e tests from tracesjs
ts
testing
test-automation
e2e-testing
api-testingJavaScriptLanguageUtilitiesComponentApache 2.0License Repository\n\n\n\n