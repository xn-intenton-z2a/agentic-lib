sandbox/tests/consoleCapture.test.js
# sandbox/tests/consoleCapture.test.js
import { describe, test, expect, beforeEach, afterEach, vi } from 'vitest';
import {
  startConsoleCapture,
  stopConsoleCapture,
  getCapturedOutput,
  clearCapturedOutput,
} from '../source/consoleCapture.js';

describe('Console Capture API', () => {
  beforeEach(() => {
    // Ensure clean state and reset system time
    clearCapturedOutput();
    stopConsoleCapture();
    vi.useFakeTimers();
  });

  afterEach(() => {
    // Restore real timers and console
    vi.useRealTimers();
    stopConsoleCapture();
  });

  test('should buffer console.log and console.error when capturing', () => {
    const now = new Date('2025-01-01T00:00:00Z');
    vi.setSystemTime(now);
    startConsoleCapture();
    console.log('hello', 'world');
    console.error('something went wrong');
    const entries = getCapturedOutput();
    expect(entries).toHaveLength(2);
    expect(entries[0]).toEqual({
      level: 'info',
      message: 'hello world',
      timestamp: now.toISOString(),
    });
    expect(entries[1]).toEqual({
      level: 'error',
      message: 'something went wrong',
      timestamp: now.toISOString(),
    });
  });

  test('should clear buffer when clearCapturedOutput is called', () => {
    startConsoleCapture();
    console.log('one');
    expect(getCapturedOutput().length).toBe(1);
    clearCapturedOutput();
    expect(getCapturedOutput()).toEqual([]);
  });

  test('should restore console methods and stop buffering after stopConsoleCapture', () => {
    startConsoleCapture();
    console.log('first');
    stopConsoleCapture();
    console.log('second');
    // Buffer should not include 'second'
    const entries = getCapturedOutput();
    expect(entries).toHaveLength(1);
    expect(entries[0].message).toBe('first');
  });

  test('should support multiple capture cycles with fresh buffer', () => {
    vi.setSystemTime(new Date('2025-02-02T12:00:00Z'));
    startConsoleCapture();
    console.log('cycle1');
    stopConsoleCapture();
    // Buffer has cycle1 only
    expect(getCapturedOutput()).toHaveLength(1);

    // Start new cycle
    startConsoleCapture();
    expect(getCapturedOutput()).toEqual([]);
    console.error('cycle2');
    const newEntries = getCapturedOutput();
    expect(newEntries).toHaveLength(1);
    expect(newEntries[0].level).toBe('error');
    stopConsoleCapture();
  });
});
sandbox/tests/consoleCapture.vitest.setup.js
# sandbox/tests/consoleCapture.vitest.setup.js
import { startConsoleCapture, stopConsoleCapture, getCapturedOutput, clearCapturedOutput } from "../source/consoleCapture.js";
import { beforeEach, afterEach, expect } from "vitest";

const enableCapture = Boolean(process.env.VITEST_CONSOLE_CAPTURE);

beforeEach(() => {
  if (enableCapture) {
    startConsoleCapture();
  }
});

afterEach(() => {
  if (enableCapture) {
    stopConsoleCapture();
    const logs = getCapturedOutput();
    if (logs.length > 0) {
      const testName = expect.getState().currentTestName;
      console.log(`[Console Capture] ${testName}`);
      logs.forEach((entry) => {
        console.log(JSON.stringify(entry));
      });
    }
    clearCapturedOutput();
  }
});