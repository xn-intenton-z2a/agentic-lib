sandbox/source/main.js
# sandbox/source/main.js
#!/usr/bin/env node
import fs from "fs";
import { Configuration, OpenAIApi } from "openai";
import { config, logError } from "../../src/lib/main.js";

/**
 * Summarize an SQS digest object using OpenAI Chat Completion API.
 *
 * @param {object} digest The digest object to summarize.
 * @returns {Promise<string>} The summary text.
 */
export async function summarizeDigest(digest) {
  const openai = new OpenAIApi(new Configuration({ apiKey: config.OPENAI_API_KEY }));
  const prompt = `Summarize the following SQS digest JSON into a concise human-readable summary:\n${JSON.stringify(digest, null, 2)}`;
  const response = await openai.createChatCompletion({
    model: "gpt-3.5-turbo",
    messages: [
      { role: "system", content: "You are a helpful assistant." },
      { role: "user", content: prompt }
    ]
  });
  const content = response.data.choices?.[0]?.message?.content;
  if (!content) {
    throw new Error("Invalid response from OpenAI API: missing content");
  }
  return content.trim();
}

/**
 * Process the --summarize flag in CLI arguments.
 *
 * @param {string[]} args Command line arguments.
 * @returns {Promise<boolean>} True if flag was processed.
 */
export async function processSummarize(args) {
  const idx = args.indexOf("--summarize");
  if (idx === -1) {
    return false;
  }
  const nextArg = args[idx + 1];
  if (!nextArg) {
    logError("Missing argument for --summarize");
    process.exit(1);
    return true;
  }
  try {
    let raw;
    if (fs.existsSync(nextArg)) {
      raw = fs.readFileSync(nextArg, "utf-8");
    } else {
      raw = nextArg;
    }
    const digest = JSON.parse(raw);
    const summary = await summarizeDigest(digest);
    console.log(summary);
    return true;
  } catch (error) {
    logError("Failed to summarize digest", error);
    process.exit(1);
    return true;
  }
}
