sandbox/tests/main.test.js
# sandbox/tests/main.test.js
import { describe, test, expect, vi, beforeAll, beforeEach, afterEach } from "vitest";

// Ensure that the global callCount is reset before tests that rely on it
beforeAll(() => {
  globalThis.callCount = 0;
});

// Reset callCount before each test
beforeEach(() => {
  globalThis.callCount = 0;
});

// Clear all mocks after each test
afterEach(() => {
  vi.clearAllMocks();
});

let mainModule;

// Dynamically import the refactored main module from sandbox/source
beforeAll(async () => {
  mainModule = await import("../../sandbox/source/main.js");
});

describe("Main Module Import", () => {
  test("should be non-null", async () => {
    const loaded = await import("../../sandbox/source/main.js");
    expect(loaded).not.toBeNull();
  });
});

// New test for the custom digest CLI flag
describe("Custom Digest CLI Flag", () => {
  test("should process custom digest when '--custom-digest' flag is provided", async () => {
    const logSpy = vi.spyOn(console, 'log').mockImplementation(() => {});
    await mainModule.main(["--custom-digest"]);
    const logs = logSpy.mock.calls.map(call => call[0]);
    // Check that one of the log messages contains 'Custom digest processed'
    const containsCustomDigestMessage = logs.some(log => log.includes('Custom digest processed'));
    expect(containsCustomDigestMessage).toBe(true);
    logSpy.mockRestore();
  });
});
